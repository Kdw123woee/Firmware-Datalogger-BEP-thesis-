
DIY_I2C_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800acf8  0800acf8  0000bcf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b24c  0800b24c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b24c  0800b24c  0000c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b254  0800b254  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b254  0800b254  0000c254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b258  0800b258  0000c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b25c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001d4  0800b430  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800b430  0000d508  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fda  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a4f  00000000  00000000  000221d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00024c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e68  00000000  00000000  00025e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e078  00000000  00000000  00026d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016589  00000000  00000000  00044d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdbb4  00000000  00000000  0005b301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118eb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005430  00000000  00000000  00118ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800acdc 	.word	0x0800acdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800acdc 	.word	0x0800acdc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa5b 	bl	80018f8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f99f 	bl	8001790 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa4d 	bl	80018f8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa43 	bl	80018f8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9c9 	bl	8001818 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9bf 	bl	8001818 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 fa6a 	bl	80029e0 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 fa65 	bl	80029e0 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	d434      	bmi.n	8000588 <__udivmoddi4+0xa0>
 800051e:	469b      	mov	fp, r3
 8000520:	4653      	mov	r3, sl
 8000522:	465a      	mov	r2, fp
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83b      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e079      	b.n	800062e <__udivmoddi4+0x146>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e076      	b.n	8000634 <__udivmoddi4+0x14c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e029      	b.n	80005b4 <__udivmoddi4+0xcc>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	469b      	mov	fp, r3
 800058c:	2320      	movs	r3, #32
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4652      	mov	r2, sl
 8000592:	40da      	lsrs	r2, r3
 8000594:	4641      	mov	r1, r8
 8000596:	0013      	movs	r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	408a      	lsls	r2, r1
 800059c:	0017      	movs	r7, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	431f      	orrs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d9c3      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4643      	mov	r3, r8
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0d8      	beq.n	800056c <__udivmoddi4+0x84>
 80005ba:	07fb      	lsls	r3, r7, #31
 80005bc:	0872      	lsrs	r2, r6, #1
 80005be:	431a      	orrs	r2, r3
 80005c0:	4646      	mov	r6, r8
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	e00e      	b.n	80005e4 <__udivmoddi4+0xfc>
 80005c6:	42ab      	cmp	r3, r5
 80005c8:	d101      	bne.n	80005ce <__udivmoddi4+0xe6>
 80005ca:	42a2      	cmp	r2, r4
 80005cc:	d80c      	bhi.n	80005e8 <__udivmoddi4+0x100>
 80005ce:	1aa4      	subs	r4, r4, r2
 80005d0:	419d      	sbcs	r5, r3
 80005d2:	2001      	movs	r0, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2100      	movs	r1, #0
 80005da:	3e01      	subs	r6, #1
 80005dc:	1824      	adds	r4, r4, r0
 80005de:	414d      	adcs	r5, r1
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d006      	beq.n	80005f2 <__udivmoddi4+0x10a>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d9ee      	bls.n	80005c6 <__udivmoddi4+0xde>
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1924      	adds	r4, r4, r4
 80005ec:	416d      	adcs	r5, r5
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1f8      	bne.n	80005e4 <__udivmoddi4+0xfc>
 80005f2:	9800      	ldr	r0, [sp, #0]
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	465b      	mov	r3, fp
 80005f8:	1900      	adds	r0, r0, r4
 80005fa:	4169      	adcs	r1, r5
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db24      	blt.n	800064a <__udivmoddi4+0x162>
 8000600:	002b      	movs	r3, r5
 8000602:	465a      	mov	r2, fp
 8000604:	4644      	mov	r4, r8
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	db2a      	blt.n	800066c <__udivmoddi4+0x184>
 8000616:	0026      	movs	r6, r4
 8000618:	409e      	lsls	r6, r3
 800061a:	0033      	movs	r3, r6
 800061c:	0026      	movs	r6, r4
 800061e:	4647      	mov	r7, r8
 8000620:	40be      	lsls	r6, r7
 8000622:	0032      	movs	r2, r6
 8000624:	1a80      	subs	r0, r0, r2
 8000626:	4199      	sbcs	r1, r3
 8000628:	9000      	str	r0, [sp, #0]
 800062a:	9101      	str	r1, [sp, #4]
 800062c:	e79e      	b.n	800056c <__udivmoddi4+0x84>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d8bc      	bhi.n	80005ac <__udivmoddi4+0xc4>
 8000632:	e782      	b.n	800053a <__udivmoddi4+0x52>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	2100      	movs	r1, #0
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	9100      	str	r1, [sp, #0]
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	2201      	movs	r2, #1
 8000644:	40da      	lsrs	r2, r3
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	e785      	b.n	8000556 <__udivmoddi4+0x6e>
 800064a:	4642      	mov	r2, r8
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4646      	mov	r6, r8
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4644      	mov	r4, r8
 800065c:	4313      	orrs	r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	40e2      	lsrs	r2, r4
 8000662:	001c      	movs	r4, r3
 8000664:	465b      	mov	r3, fp
 8000666:	0015      	movs	r5, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	dad4      	bge.n	8000616 <__udivmoddi4+0x12e>
 800066c:	4642      	mov	r2, r8
 800066e:	002f      	movs	r7, r5
 8000670:	2320      	movs	r3, #32
 8000672:	0026      	movs	r6, r4
 8000674:	4097      	lsls	r7, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	40de      	lsrs	r6, r3
 800067a:	003b      	movs	r3, r7
 800067c:	4333      	orrs	r3, r6
 800067e:	e7cd      	b.n	800061c <__udivmoddi4+0x134>

08000680 <__aeabi_fmul>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0044      	lsls	r4, r0, #1
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0246      	lsls	r6, r0, #9
 800068e:	1c0f      	adds	r7, r1, #0
 8000690:	0a76      	lsrs	r6, r6, #9
 8000692:	0e24      	lsrs	r4, r4, #24
 8000694:	0fc5      	lsrs	r5, r0, #31
 8000696:	2c00      	cmp	r4, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x1c>
 800069a:	e0da      	b.n	8000852 <__aeabi_fmul+0x1d2>
 800069c:	2cff      	cmp	r4, #255	@ 0xff
 800069e:	d074      	beq.n	800078a <__aeabi_fmul+0x10a>
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	00f6      	lsls	r6, r6, #3
 80006a4:	04db      	lsls	r3, r3, #19
 80006a6:	431e      	orrs	r6, r3
 80006a8:	2300      	movs	r3, #0
 80006aa:	4699      	mov	r9, r3
 80006ac:	469a      	mov	sl, r3
 80006ae:	3c7f      	subs	r4, #127	@ 0x7f
 80006b0:	027b      	lsls	r3, r7, #9
 80006b2:	0a5b      	lsrs	r3, r3, #9
 80006b4:	4698      	mov	r8, r3
 80006b6:	007b      	lsls	r3, r7, #1
 80006b8:	0e1b      	lsrs	r3, r3, #24
 80006ba:	0fff      	lsrs	r7, r7, #31
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d074      	beq.n	80007aa <__aeabi_fmul+0x12a>
 80006c0:	2bff      	cmp	r3, #255	@ 0xff
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fmul+0x46>
 80006c4:	e08e      	b.n	80007e4 <__aeabi_fmul+0x164>
 80006c6:	4642      	mov	r2, r8
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	04c9      	lsls	r1, r1, #19
 80006ce:	4311      	orrs	r1, r2
 80006d0:	3b7f      	subs	r3, #127	@ 0x7f
 80006d2:	002a      	movs	r2, r5
 80006d4:	18e4      	adds	r4, r4, r3
 80006d6:	464b      	mov	r3, r9
 80006d8:	407a      	eors	r2, r7
 80006da:	4688      	mov	r8, r1
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	dc75      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80006e2:	464b      	mov	r3, r9
 80006e4:	2000      	movs	r0, #0
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	dd0f      	ble.n	800070a <__aeabi_fmul+0x8a>
 80006ea:	4649      	mov	r1, r9
 80006ec:	2301      	movs	r3, #1
 80006ee:	408b      	lsls	r3, r1
 80006f0:	21a6      	movs	r1, #166	@ 0xa6
 80006f2:	00c9      	lsls	r1, r1, #3
 80006f4:	420b      	tst	r3, r1
 80006f6:	d169      	bne.n	80007cc <__aeabi_fmul+0x14c>
 80006f8:	2190      	movs	r1, #144	@ 0x90
 80006fa:	0089      	lsls	r1, r1, #2
 80006fc:	420b      	tst	r3, r1
 80006fe:	d000      	beq.n	8000702 <__aeabi_fmul+0x82>
 8000700:	e100      	b.n	8000904 <__aeabi_fmul+0x284>
 8000702:	2188      	movs	r1, #136	@ 0x88
 8000704:	4219      	tst	r1, r3
 8000706:	d000      	beq.n	800070a <__aeabi_fmul+0x8a>
 8000708:	e0f5      	b.n	80008f6 <__aeabi_fmul+0x276>
 800070a:	4641      	mov	r1, r8
 800070c:	0409      	lsls	r1, r1, #16
 800070e:	0c09      	lsrs	r1, r1, #16
 8000710:	4643      	mov	r3, r8
 8000712:	0008      	movs	r0, r1
 8000714:	0c35      	lsrs	r5, r6, #16
 8000716:	0436      	lsls	r6, r6, #16
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	0c36      	lsrs	r6, r6, #16
 800071c:	4370      	muls	r0, r6
 800071e:	4369      	muls	r1, r5
 8000720:	435e      	muls	r6, r3
 8000722:	435d      	muls	r5, r3
 8000724:	1876      	adds	r6, r6, r1
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	199b      	adds	r3, r3, r6
 800072a:	4299      	cmp	r1, r3
 800072c:	d903      	bls.n	8000736 <__aeabi_fmul+0xb6>
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	0249      	lsls	r1, r1, #9
 8000732:	468c      	mov	ip, r1
 8000734:	4465      	add	r5, ip
 8000736:	0400      	lsls	r0, r0, #16
 8000738:	0419      	lsls	r1, r3, #16
 800073a:	0c00      	lsrs	r0, r0, #16
 800073c:	1809      	adds	r1, r1, r0
 800073e:	018e      	lsls	r6, r1, #6
 8000740:	1e70      	subs	r0, r6, #1
 8000742:	4186      	sbcs	r6, r0
 8000744:	0c1b      	lsrs	r3, r3, #16
 8000746:	0e89      	lsrs	r1, r1, #26
 8000748:	195b      	adds	r3, r3, r5
 800074a:	430e      	orrs	r6, r1
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	431e      	orrs	r6, r3
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	d46c      	bmi.n	800082e <__aeabi_fmul+0x1ae>
 8000754:	0023      	movs	r3, r4
 8000756:	337f      	adds	r3, #127	@ 0x7f
 8000758:	2b00      	cmp	r3, #0
 800075a:	dc00      	bgt.n	800075e <__aeabi_fmul+0xde>
 800075c:	e0b1      	b.n	80008c2 <__aeabi_fmul+0x242>
 800075e:	0015      	movs	r5, r2
 8000760:	0771      	lsls	r1, r6, #29
 8000762:	d00b      	beq.n	800077c <__aeabi_fmul+0xfc>
 8000764:	200f      	movs	r0, #15
 8000766:	0021      	movs	r1, r4
 8000768:	4030      	ands	r0, r6
 800076a:	2804      	cmp	r0, #4
 800076c:	d006      	beq.n	800077c <__aeabi_fmul+0xfc>
 800076e:	3604      	adds	r6, #4
 8000770:	0132      	lsls	r2, r6, #4
 8000772:	d503      	bpl.n	800077c <__aeabi_fmul+0xfc>
 8000774:	4b6e      	ldr	r3, [pc, #440]	@ (8000930 <__aeabi_fmul+0x2b0>)
 8000776:	401e      	ands	r6, r3
 8000778:	000b      	movs	r3, r1
 800077a:	3380      	adds	r3, #128	@ 0x80
 800077c:	2bfe      	cmp	r3, #254	@ 0xfe
 800077e:	dd00      	ble.n	8000782 <__aeabi_fmul+0x102>
 8000780:	e0bd      	b.n	80008fe <__aeabi_fmul+0x27e>
 8000782:	01b2      	lsls	r2, r6, #6
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	b2db      	uxtb	r3, r3
 8000788:	e048      	b.n	800081c <__aeabi_fmul+0x19c>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fmul+0x110>
 800078e:	e092      	b.n	80008b6 <__aeabi_fmul+0x236>
 8000790:	2308      	movs	r3, #8
 8000792:	4699      	mov	r9, r3
 8000794:	3b06      	subs	r3, #6
 8000796:	469a      	mov	sl, r3
 8000798:	027b      	lsls	r3, r7, #9
 800079a:	0a5b      	lsrs	r3, r3, #9
 800079c:	4698      	mov	r8, r3
 800079e:	007b      	lsls	r3, r7, #1
 80007a0:	24ff      	movs	r4, #255	@ 0xff
 80007a2:	0e1b      	lsrs	r3, r3, #24
 80007a4:	0fff      	lsrs	r7, r7, #31
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d18a      	bne.n	80006c0 <__aeabi_fmul+0x40>
 80007aa:	4642      	mov	r2, r8
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d164      	bne.n	800087a <__aeabi_fmul+0x1fa>
 80007b0:	4649      	mov	r1, r9
 80007b2:	3201      	adds	r2, #1
 80007b4:	4311      	orrs	r1, r2
 80007b6:	4689      	mov	r9, r1
 80007b8:	290a      	cmp	r1, #10
 80007ba:	dc08      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80007bc:	407d      	eors	r5, r7
 80007be:	2001      	movs	r0, #1
 80007c0:	b2ea      	uxtb	r2, r5
 80007c2:	2902      	cmp	r1, #2
 80007c4:	dc91      	bgt.n	80006ea <__aeabi_fmul+0x6a>
 80007c6:	0015      	movs	r5, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e027      	b.n	800081c <__aeabi_fmul+0x19c>
 80007cc:	0015      	movs	r5, r2
 80007ce:	4653      	mov	r3, sl
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x156>
 80007d4:	e093      	b.n	80008fe <__aeabi_fmul+0x27e>
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d01a      	beq.n	8000810 <__aeabi_fmul+0x190>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12c      	bne.n	8000838 <__aeabi_fmul+0x1b8>
 80007de:	2300      	movs	r3, #0
 80007e0:	2200      	movs	r2, #0
 80007e2:	e01b      	b.n	800081c <__aeabi_fmul+0x19c>
 80007e4:	4643      	mov	r3, r8
 80007e6:	34ff      	adds	r4, #255	@ 0xff
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d055      	beq.n	8000898 <__aeabi_fmul+0x218>
 80007ec:	2103      	movs	r1, #3
 80007ee:	464b      	mov	r3, r9
 80007f0:	430b      	orrs	r3, r1
 80007f2:	0019      	movs	r1, r3
 80007f4:	2b0a      	cmp	r3, #10
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_fmul+0x17a>
 80007f8:	e092      	b.n	8000920 <__aeabi_fmul+0x2a0>
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d000      	beq.n	8000800 <__aeabi_fmul+0x180>
 80007fe:	e08c      	b.n	800091a <__aeabi_fmul+0x29a>
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	03d2      	lsls	r2, r2, #15
 8000804:	4216      	tst	r6, r2
 8000806:	d003      	beq.n	8000810 <__aeabi_fmul+0x190>
 8000808:	4643      	mov	r3, r8
 800080a:	4213      	tst	r3, r2
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x190>
 800080e:	e07d      	b.n	800090c <__aeabi_fmul+0x28c>
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	03d2      	lsls	r2, r2, #15
 8000814:	4332      	orrs	r2, r6
 8000816:	0252      	lsls	r2, r2, #9
 8000818:	0a52      	lsrs	r2, r2, #9
 800081a:	23ff      	movs	r3, #255	@ 0xff
 800081c:	05d8      	lsls	r0, r3, #23
 800081e:	07ed      	lsls	r5, r5, #31
 8000820:	4310      	orrs	r0, r2
 8000822:	4328      	orrs	r0, r5
 8000824:	bce0      	pop	{r5, r6, r7}
 8000826:	46ba      	mov	sl, r7
 8000828:	46b1      	mov	r9, r6
 800082a:	46a8      	mov	r8, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	2301      	movs	r3, #1
 8000830:	0015      	movs	r5, r2
 8000832:	0871      	lsrs	r1, r6, #1
 8000834:	401e      	ands	r6, r3
 8000836:	430e      	orrs	r6, r1
 8000838:	0023      	movs	r3, r4
 800083a:	3380      	adds	r3, #128	@ 0x80
 800083c:	1c61      	adds	r1, r4, #1
 800083e:	2b00      	cmp	r3, #0
 8000840:	dd41      	ble.n	80008c6 <__aeabi_fmul+0x246>
 8000842:	0772      	lsls	r2, r6, #29
 8000844:	d094      	beq.n	8000770 <__aeabi_fmul+0xf0>
 8000846:	220f      	movs	r2, #15
 8000848:	4032      	ands	r2, r6
 800084a:	2a04      	cmp	r2, #4
 800084c:	d000      	beq.n	8000850 <__aeabi_fmul+0x1d0>
 800084e:	e78e      	b.n	800076e <__aeabi_fmul+0xee>
 8000850:	e78e      	b.n	8000770 <__aeabi_fmul+0xf0>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d105      	bne.n	8000862 <__aeabi_fmul+0x1e2>
 8000856:	2304      	movs	r3, #4
 8000858:	4699      	mov	r9, r3
 800085a:	3b03      	subs	r3, #3
 800085c:	2400      	movs	r4, #0
 800085e:	469a      	mov	sl, r3
 8000860:	e726      	b.n	80006b0 <__aeabi_fmul+0x30>
 8000862:	0030      	movs	r0, r6
 8000864:	f002 f89e 	bl	80029a4 <__clzsi2>
 8000868:	2476      	movs	r4, #118	@ 0x76
 800086a:	1f43      	subs	r3, r0, #5
 800086c:	409e      	lsls	r6, r3
 800086e:	2300      	movs	r3, #0
 8000870:	4264      	negs	r4, r4
 8000872:	4699      	mov	r9, r3
 8000874:	469a      	mov	sl, r3
 8000876:	1a24      	subs	r4, r4, r0
 8000878:	e71a      	b.n	80006b0 <__aeabi_fmul+0x30>
 800087a:	4640      	mov	r0, r8
 800087c:	f002 f892 	bl	80029a4 <__clzsi2>
 8000880:	464b      	mov	r3, r9
 8000882:	1a24      	subs	r4, r4, r0
 8000884:	3c76      	subs	r4, #118	@ 0x76
 8000886:	2b0a      	cmp	r3, #10
 8000888:	dca1      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 800088a:	4643      	mov	r3, r8
 800088c:	3805      	subs	r0, #5
 800088e:	4083      	lsls	r3, r0
 8000890:	407d      	eors	r5, r7
 8000892:	4698      	mov	r8, r3
 8000894:	b2ea      	uxtb	r2, r5
 8000896:	e724      	b.n	80006e2 <__aeabi_fmul+0x62>
 8000898:	464a      	mov	r2, r9
 800089a:	3302      	adds	r3, #2
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	407a      	eors	r2, r7
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	2b0a      	cmp	r3, #10
 80008a6:	dc92      	bgt.n	80007ce <__aeabi_fmul+0x14e>
 80008a8:	4649      	mov	r1, r9
 80008aa:	0015      	movs	r5, r2
 80008ac:	2900      	cmp	r1, #0
 80008ae:	d026      	beq.n	80008fe <__aeabi_fmul+0x27e>
 80008b0:	4699      	mov	r9, r3
 80008b2:	2002      	movs	r0, #2
 80008b4:	e719      	b.n	80006ea <__aeabi_fmul+0x6a>
 80008b6:	230c      	movs	r3, #12
 80008b8:	4699      	mov	r9, r3
 80008ba:	3b09      	subs	r3, #9
 80008bc:	24ff      	movs	r4, #255	@ 0xff
 80008be:	469a      	mov	sl, r3
 80008c0:	e6f6      	b.n	80006b0 <__aeabi_fmul+0x30>
 80008c2:	0015      	movs	r5, r2
 80008c4:	0021      	movs	r1, r4
 80008c6:	2201      	movs	r2, #1
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	2b1b      	cmp	r3, #27
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_fmul+0x250>
 80008ce:	e786      	b.n	80007de <__aeabi_fmul+0x15e>
 80008d0:	319e      	adds	r1, #158	@ 0x9e
 80008d2:	0032      	movs	r2, r6
 80008d4:	408e      	lsls	r6, r1
 80008d6:	40da      	lsrs	r2, r3
 80008d8:	1e73      	subs	r3, r6, #1
 80008da:	419e      	sbcs	r6, r3
 80008dc:	4332      	orrs	r2, r6
 80008de:	0753      	lsls	r3, r2, #29
 80008e0:	d004      	beq.n	80008ec <__aeabi_fmul+0x26c>
 80008e2:	230f      	movs	r3, #15
 80008e4:	4013      	ands	r3, r2
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d000      	beq.n	80008ec <__aeabi_fmul+0x26c>
 80008ea:	3204      	adds	r2, #4
 80008ec:	0153      	lsls	r3, r2, #5
 80008ee:	d510      	bpl.n	8000912 <__aeabi_fmul+0x292>
 80008f0:	2301      	movs	r3, #1
 80008f2:	2200      	movs	r2, #0
 80008f4:	e792      	b.n	800081c <__aeabi_fmul+0x19c>
 80008f6:	003d      	movs	r5, r7
 80008f8:	4646      	mov	r6, r8
 80008fa:	4682      	mov	sl, r0
 80008fc:	e767      	b.n	80007ce <__aeabi_fmul+0x14e>
 80008fe:	23ff      	movs	r3, #255	@ 0xff
 8000900:	2200      	movs	r2, #0
 8000902:	e78b      	b.n	800081c <__aeabi_fmul+0x19c>
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	2500      	movs	r5, #0
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	e786      	b.n	800081a <__aeabi_fmul+0x19a>
 800090c:	003d      	movs	r5, r7
 800090e:	431a      	orrs	r2, r3
 8000910:	e783      	b.n	800081a <__aeabi_fmul+0x19a>
 8000912:	0192      	lsls	r2, r2, #6
 8000914:	2300      	movs	r3, #0
 8000916:	0a52      	lsrs	r2, r2, #9
 8000918:	e780      	b.n	800081c <__aeabi_fmul+0x19c>
 800091a:	003d      	movs	r5, r7
 800091c:	4646      	mov	r6, r8
 800091e:	e777      	b.n	8000810 <__aeabi_fmul+0x190>
 8000920:	002a      	movs	r2, r5
 8000922:	2301      	movs	r3, #1
 8000924:	407a      	eors	r2, r7
 8000926:	408b      	lsls	r3, r1
 8000928:	2003      	movs	r0, #3
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	e6e9      	b.n	8000702 <__aeabi_fmul+0x82>
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	f7ffffff 	.word	0xf7ffffff

08000934 <__aeabi_i2f>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	2800      	cmp	r0, #0
 8000938:	d012      	beq.n	8000960 <__aeabi_i2f+0x2c>
 800093a:	17c3      	asrs	r3, r0, #31
 800093c:	18c5      	adds	r5, r0, r3
 800093e:	405d      	eors	r5, r3
 8000940:	0fc4      	lsrs	r4, r0, #31
 8000942:	0028      	movs	r0, r5
 8000944:	f002 f82e 	bl	80029a4 <__clzsi2>
 8000948:	239e      	movs	r3, #158	@ 0x9e
 800094a:	1a1b      	subs	r3, r3, r0
 800094c:	2b96      	cmp	r3, #150	@ 0x96
 800094e:	dc0f      	bgt.n	8000970 <__aeabi_i2f+0x3c>
 8000950:	2808      	cmp	r0, #8
 8000952:	d038      	beq.n	80009c6 <__aeabi_i2f+0x92>
 8000954:	3808      	subs	r0, #8
 8000956:	4085      	lsls	r5, r0
 8000958:	026d      	lsls	r5, r5, #9
 800095a:	0a6d      	lsrs	r5, r5, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e002      	b.n	8000966 <__aeabi_i2f+0x32>
 8000960:	2400      	movs	r4, #0
 8000962:	2000      	movs	r0, #0
 8000964:	2500      	movs	r5, #0
 8000966:	05c0      	lsls	r0, r0, #23
 8000968:	4328      	orrs	r0, r5
 800096a:	07e4      	lsls	r4, r4, #31
 800096c:	4320      	orrs	r0, r4
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	2b99      	cmp	r3, #153	@ 0x99
 8000972:	dc14      	bgt.n	800099e <__aeabi_i2f+0x6a>
 8000974:	1f42      	subs	r2, r0, #5
 8000976:	4095      	lsls	r5, r2
 8000978:	002a      	movs	r2, r5
 800097a:	4915      	ldr	r1, [pc, #84]	@ (80009d0 <__aeabi_i2f+0x9c>)
 800097c:	4011      	ands	r1, r2
 800097e:	0755      	lsls	r5, r2, #29
 8000980:	d01c      	beq.n	80009bc <__aeabi_i2f+0x88>
 8000982:	250f      	movs	r5, #15
 8000984:	402a      	ands	r2, r5
 8000986:	2a04      	cmp	r2, #4
 8000988:	d018      	beq.n	80009bc <__aeabi_i2f+0x88>
 800098a:	3104      	adds	r1, #4
 800098c:	08ca      	lsrs	r2, r1, #3
 800098e:	0149      	lsls	r1, r1, #5
 8000990:	d515      	bpl.n	80009be <__aeabi_i2f+0x8a>
 8000992:	239f      	movs	r3, #159	@ 0x9f
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	1a18      	subs	r0, r3, r0
 8000998:	0a55      	lsrs	r5, r2, #9
 800099a:	b2c0      	uxtb	r0, r0
 800099c:	e7e3      	b.n	8000966 <__aeabi_i2f+0x32>
 800099e:	2205      	movs	r2, #5
 80009a0:	0029      	movs	r1, r5
 80009a2:	1a12      	subs	r2, r2, r0
 80009a4:	40d1      	lsrs	r1, r2
 80009a6:	0002      	movs	r2, r0
 80009a8:	321b      	adds	r2, #27
 80009aa:	4095      	lsls	r5, r2
 80009ac:	002a      	movs	r2, r5
 80009ae:	1e55      	subs	r5, r2, #1
 80009b0:	41aa      	sbcs	r2, r5
 80009b2:	430a      	orrs	r2, r1
 80009b4:	4906      	ldr	r1, [pc, #24]	@ (80009d0 <__aeabi_i2f+0x9c>)
 80009b6:	4011      	ands	r1, r2
 80009b8:	0755      	lsls	r5, r2, #29
 80009ba:	d1e2      	bne.n	8000982 <__aeabi_i2f+0x4e>
 80009bc:	08ca      	lsrs	r2, r1, #3
 80009be:	0252      	lsls	r2, r2, #9
 80009c0:	0a55      	lsrs	r5, r2, #9
 80009c2:	b2d8      	uxtb	r0, r3
 80009c4:	e7cf      	b.n	8000966 <__aeabi_i2f+0x32>
 80009c6:	026d      	lsls	r5, r5, #9
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	308e      	adds	r0, #142	@ 0x8e
 80009cc:	e7cb      	b.n	8000966 <__aeabi_i2f+0x32>
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	fbffffff 	.word	0xfbffffff

080009d4 <__aeabi_dadd>:
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	464f      	mov	r7, r9
 80009d8:	4646      	mov	r6, r8
 80009da:	46d6      	mov	lr, sl
 80009dc:	b5c0      	push	{r6, r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	9000      	str	r0, [sp, #0]
 80009e2:	9101      	str	r1, [sp, #4]
 80009e4:	030e      	lsls	r6, r1, #12
 80009e6:	004c      	lsls	r4, r1, #1
 80009e8:	0fcd      	lsrs	r5, r1, #31
 80009ea:	0a71      	lsrs	r1, r6, #9
 80009ec:	9e00      	ldr	r6, [sp, #0]
 80009ee:	005f      	lsls	r7, r3, #1
 80009f0:	0f76      	lsrs	r6, r6, #29
 80009f2:	430e      	orrs	r6, r1
 80009f4:	9900      	ldr	r1, [sp, #0]
 80009f6:	9200      	str	r2, [sp, #0]
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	00c9      	lsls	r1, r1, #3
 80009fc:	4689      	mov	r9, r1
 80009fe:	0319      	lsls	r1, r3, #12
 8000a00:	0d7b      	lsrs	r3, r7, #21
 8000a02:	4698      	mov	r8, r3
 8000a04:	9b01      	ldr	r3, [sp, #4]
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	0fdb      	lsrs	r3, r3, #31
 8000a0a:	469c      	mov	ip, r3
 8000a0c:	9b00      	ldr	r3, [sp, #0]
 8000a0e:	9a00      	ldr	r2, [sp, #0]
 8000a10:	0f5b      	lsrs	r3, r3, #29
 8000a12:	430b      	orrs	r3, r1
 8000a14:	4641      	mov	r1, r8
 8000a16:	0d64      	lsrs	r4, r4, #21
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	1a61      	subs	r1, r4, r1
 8000a1c:	4565      	cmp	r5, ip
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dadd+0x4e>
 8000a20:	e0a6      	b.n	8000b70 <__aeabi_dadd+0x19c>
 8000a22:	2900      	cmp	r1, #0
 8000a24:	dd72      	ble.n	8000b0c <__aeabi_dadd+0x138>
 8000a26:	4647      	mov	r7, r8
 8000a28:	2f00      	cmp	r7, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x5a>
 8000a2c:	e0dd      	b.n	8000bea <__aeabi_dadd+0x216>
 8000a2e:	4fcc      	ldr	r7, [pc, #816]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000a30:	42bc      	cmp	r4, r7
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x62>
 8000a34:	e19a      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000a36:	2701      	movs	r7, #1
 8000a38:	2938      	cmp	r1, #56	@ 0x38
 8000a3a:	dc17      	bgt.n	8000a6c <__aeabi_dadd+0x98>
 8000a3c:	2780      	movs	r7, #128	@ 0x80
 8000a3e:	043f      	lsls	r7, r7, #16
 8000a40:	433b      	orrs	r3, r7
 8000a42:	291f      	cmp	r1, #31
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_dadd+0x74>
 8000a46:	e1dd      	b.n	8000e04 <__aeabi_dadd+0x430>
 8000a48:	2720      	movs	r7, #32
 8000a4a:	1a78      	subs	r0, r7, r1
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	4087      	lsls	r7, r0
 8000a50:	46ba      	mov	sl, r7
 8000a52:	0017      	movs	r7, r2
 8000a54:	40cf      	lsrs	r7, r1
 8000a56:	4684      	mov	ip, r0
 8000a58:	0038      	movs	r0, r7
 8000a5a:	4657      	mov	r7, sl
 8000a5c:	4307      	orrs	r7, r0
 8000a5e:	4660      	mov	r0, ip
 8000a60:	4082      	lsls	r2, r0
 8000a62:	40cb      	lsrs	r3, r1
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	1af6      	subs	r6, r6, r3
 8000a6a:	4317      	orrs	r7, r2
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	1bdf      	subs	r7, r3, r7
 8000a70:	45b9      	cmp	r9, r7
 8000a72:	4180      	sbcs	r0, r0
 8000a74:	4240      	negs	r0, r0
 8000a76:	1a36      	subs	r6, r6, r0
 8000a78:	0233      	lsls	r3, r6, #8
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_dadd+0xaa>
 8000a7c:	e0ff      	b.n	8000c7e <__aeabi_dadd+0x2aa>
 8000a7e:	0276      	lsls	r6, r6, #9
 8000a80:	0a76      	lsrs	r6, r6, #9
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0xb4>
 8000a86:	e13c      	b.n	8000d02 <__aeabi_dadd+0x32e>
 8000a88:	0030      	movs	r0, r6
 8000a8a:	f001 ff8b 	bl	80029a4 <__clzsi2>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	3b08      	subs	r3, #8
 8000a92:	2120      	movs	r1, #32
 8000a94:	0038      	movs	r0, r7
 8000a96:	1aca      	subs	r2, r1, r3
 8000a98:	40d0      	lsrs	r0, r2
 8000a9a:	409e      	lsls	r6, r3
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	409f      	lsls	r7, r3
 8000aa0:	4332      	orrs	r2, r6
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dadd+0xd4>
 8000aa6:	e1a6      	b.n	8000df6 <__aeabi_dadd+0x422>
 8000aa8:	1b18      	subs	r0, r3, r4
 8000aaa:	3001      	adds	r0, #1
 8000aac:	1a09      	subs	r1, r1, r0
 8000aae:	003e      	movs	r6, r7
 8000ab0:	408f      	lsls	r7, r1
 8000ab2:	40c6      	lsrs	r6, r0
 8000ab4:	1e7b      	subs	r3, r7, #1
 8000ab6:	419f      	sbcs	r7, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	408b      	lsls	r3, r1
 8000abc:	4337      	orrs	r7, r6
 8000abe:	431f      	orrs	r7, r3
 8000ac0:	40c2      	lsrs	r2, r0
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	0016      	movs	r6, r2
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0xfa>
 8000acc:	e1df      	b.n	8000e8e <__aeabi_dadd+0x4ba>
 8000ace:	077b      	lsls	r3, r7, #29
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x100>
 8000ad2:	e332      	b.n	800113a <__aeabi_dadd+0x766>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	403b      	ands	r3, r7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d004      	beq.n	8000ae8 <__aeabi_dadd+0x114>
 8000ade:	1d3a      	adds	r2, r7, #4
 8000ae0:	42ba      	cmp	r2, r7
 8000ae2:	41bf      	sbcs	r7, r7
 8000ae4:	427f      	negs	r7, r7
 8000ae6:	19f6      	adds	r6, r6, r7
 8000ae8:	0233      	lsls	r3, r6, #8
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dadd+0x11a>
 8000aec:	e323      	b.n	8001136 <__aeabi_dadd+0x762>
 8000aee:	4b9c      	ldr	r3, [pc, #624]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000af0:	3401      	adds	r4, #1
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x124>
 8000af6:	e0b4      	b.n	8000c62 <__aeabi_dadd+0x28e>
 8000af8:	4b9a      	ldr	r3, [pc, #616]	@ (8000d64 <__aeabi_dadd+0x390>)
 8000afa:	0564      	lsls	r4, r4, #21
 8000afc:	401e      	ands	r6, r3
 8000afe:	0d64      	lsrs	r4, r4, #21
 8000b00:	0777      	lsls	r7, r6, #29
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	0276      	lsls	r6, r6, #9
 8000b06:	4317      	orrs	r7, r2
 8000b08:	0b36      	lsrs	r6, r6, #12
 8000b0a:	e0ac      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x13e>
 8000b10:	e07e      	b.n	8000c10 <__aeabi_dadd+0x23c>
 8000b12:	4641      	mov	r1, r8
 8000b14:	1b09      	subs	r1, r1, r4
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x148>
 8000b1a:	e160      	b.n	8000dde <__aeabi_dadd+0x40a>
 8000b1c:	0034      	movs	r4, r6
 8000b1e:	4648      	mov	r0, r9
 8000b20:	4304      	orrs	r4, r0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x152>
 8000b24:	e1c9      	b.n	8000eba <__aeabi_dadd+0x4e6>
 8000b26:	1e4c      	subs	r4, r1, #1
 8000b28:	2901      	cmp	r1, #1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x15a>
 8000b2c:	e22e      	b.n	8000f8c <__aeabi_dadd+0x5b8>
 8000b2e:	4d8c      	ldr	r5, [pc, #560]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000b30:	42a9      	cmp	r1, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x162>
 8000b34:	e224      	b.n	8000f80 <__aeabi_dadd+0x5ac>
 8000b36:	2701      	movs	r7, #1
 8000b38:	2c38      	cmp	r4, #56	@ 0x38
 8000b3a:	dc11      	bgt.n	8000b60 <__aeabi_dadd+0x18c>
 8000b3c:	0021      	movs	r1, r4
 8000b3e:	291f      	cmp	r1, #31
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x170>
 8000b42:	e20b      	b.n	8000f5c <__aeabi_dadd+0x588>
 8000b44:	2420      	movs	r4, #32
 8000b46:	0037      	movs	r7, r6
 8000b48:	4648      	mov	r0, r9
 8000b4a:	1a64      	subs	r4, r4, r1
 8000b4c:	40a7      	lsls	r7, r4
 8000b4e:	40c8      	lsrs	r0, r1
 8000b50:	4307      	orrs	r7, r0
 8000b52:	4648      	mov	r0, r9
 8000b54:	40a0      	lsls	r0, r4
 8000b56:	40ce      	lsrs	r6, r1
 8000b58:	1e44      	subs	r4, r0, #1
 8000b5a:	41a0      	sbcs	r0, r4
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	4307      	orrs	r7, r0
 8000b60:	1bd7      	subs	r7, r2, r7
 8000b62:	42ba      	cmp	r2, r7
 8000b64:	4192      	sbcs	r2, r2
 8000b66:	4252      	negs	r2, r2
 8000b68:	4665      	mov	r5, ip
 8000b6a:	4644      	mov	r4, r8
 8000b6c:	1a9e      	subs	r6, r3, r2
 8000b6e:	e783      	b.n	8000a78 <__aeabi_dadd+0xa4>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_dadd+0x1a2>
 8000b74:	e09c      	b.n	8000cb0 <__aeabi_dadd+0x2dc>
 8000b76:	4647      	mov	r7, r8
 8000b78:	2f00      	cmp	r7, #0
 8000b7a:	d167      	bne.n	8000c4c <__aeabi_dadd+0x278>
 8000b7c:	001f      	movs	r7, r3
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0x1b0>
 8000b82:	e0e4      	b.n	8000d4e <__aeabi_dadd+0x37a>
 8000b84:	1e48      	subs	r0, r1, #1
 8000b86:	2901      	cmp	r1, #1
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x1b8>
 8000b8a:	e19b      	b.n	8000ec4 <__aeabi_dadd+0x4f0>
 8000b8c:	4f74      	ldr	r7, [pc, #464]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000b8e:	42b9      	cmp	r1, r7
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x1c0>
 8000b92:	e0eb      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000b94:	2701      	movs	r7, #1
 8000b96:	0001      	movs	r1, r0
 8000b98:	2838      	cmp	r0, #56	@ 0x38
 8000b9a:	dc11      	bgt.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000b9c:	291f      	cmp	r1, #31
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dadd+0x1ce>
 8000ba0:	e1c7      	b.n	8000f32 <__aeabi_dadd+0x55e>
 8000ba2:	2720      	movs	r7, #32
 8000ba4:	1a78      	subs	r0, r7, r1
 8000ba6:	001f      	movs	r7, r3
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4087      	lsls	r7, r0
 8000bac:	0010      	movs	r0, r2
 8000bae:	40c8      	lsrs	r0, r1
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	4660      	mov	r0, ip
 8000bb4:	4082      	lsls	r2, r0
 8000bb6:	40cb      	lsrs	r3, r1
 8000bb8:	1e50      	subs	r0, r2, #1
 8000bba:	4182      	sbcs	r2, r0
 8000bbc:	18f6      	adds	r6, r6, r3
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	444f      	add	r7, r9
 8000bc2:	454f      	cmp	r7, r9
 8000bc4:	4180      	sbcs	r0, r0
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	1836      	adds	r6, r6, r0
 8000bca:	0233      	lsls	r3, r6, #8
 8000bcc:	d557      	bpl.n	8000c7e <__aeabi_dadd+0x2aa>
 8000bce:	4b64      	ldr	r3, [pc, #400]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000bd0:	3401      	adds	r4, #1
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d045      	beq.n	8000c62 <__aeabi_dadd+0x28e>
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4b62      	ldr	r3, [pc, #392]	@ (8000d64 <__aeabi_dadd+0x390>)
 8000bda:	087a      	lsrs	r2, r7, #1
 8000bdc:	401e      	ands	r6, r3
 8000bde:	4039      	ands	r1, r7
 8000be0:	430a      	orrs	r2, r1
 8000be2:	07f7      	lsls	r7, r6, #31
 8000be4:	4317      	orrs	r7, r2
 8000be6:	0876      	lsrs	r6, r6, #1
 8000be8:	e771      	b.n	8000ace <__aeabi_dadd+0xfa>
 8000bea:	001f      	movs	r7, r3
 8000bec:	4317      	orrs	r7, r2
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x21e>
 8000bf0:	e0ad      	b.n	8000d4e <__aeabi_dadd+0x37a>
 8000bf2:	1e4f      	subs	r7, r1, #1
 8000bf4:	46bc      	mov	ip, r7
 8000bf6:	2901      	cmp	r1, #1
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x228>
 8000bfa:	e182      	b.n	8000f02 <__aeabi_dadd+0x52e>
 8000bfc:	4f58      	ldr	r7, [pc, #352]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000bfe:	42b9      	cmp	r1, r7
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x230>
 8000c02:	e190      	b.n	8000f26 <__aeabi_dadd+0x552>
 8000c04:	4661      	mov	r1, ip
 8000c06:	2701      	movs	r7, #1
 8000c08:	2938      	cmp	r1, #56	@ 0x38
 8000c0a:	dd00      	ble.n	8000c0e <__aeabi_dadd+0x23a>
 8000c0c:	e72e      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000c0e:	e718      	b.n	8000a42 <__aeabi_dadd+0x6e>
 8000c10:	4f55      	ldr	r7, [pc, #340]	@ (8000d68 <__aeabi_dadd+0x394>)
 8000c12:	1c61      	adds	r1, r4, #1
 8000c14:	4239      	tst	r1, r7
 8000c16:	d000      	beq.n	8000c1a <__aeabi_dadd+0x246>
 8000c18:	e0d0      	b.n	8000dbc <__aeabi_dadd+0x3e8>
 8000c1a:	0031      	movs	r1, r6
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	001f      	movs	r7, r3
 8000c20:	4301      	orrs	r1, r0
 8000c22:	4317      	orrs	r7, r2
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x256>
 8000c28:	e13d      	b.n	8000ea6 <__aeabi_dadd+0x4d2>
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x25c>
 8000c2e:	e1bc      	b.n	8000faa <__aeabi_dadd+0x5d6>
 8000c30:	2f00      	cmp	r7, #0
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x262>
 8000c34:	e1bf      	b.n	8000fb6 <__aeabi_dadd+0x5e2>
 8000c36:	464b      	mov	r3, r9
 8000c38:	2100      	movs	r1, #0
 8000c3a:	08d8      	lsrs	r0, r3, #3
 8000c3c:	0777      	lsls	r7, r6, #29
 8000c3e:	4307      	orrs	r7, r0
 8000c40:	08f0      	lsrs	r0, r6, #3
 8000c42:	0306      	lsls	r6, r0, #12
 8000c44:	054c      	lsls	r4, r1, #21
 8000c46:	0b36      	lsrs	r6, r6, #12
 8000c48:	0d64      	lsrs	r4, r4, #21
 8000c4a:	e00c      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000c4c:	4f44      	ldr	r7, [pc, #272]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000c4e:	42bc      	cmp	r4, r7
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dadd+0x280>
 8000c52:	e08b      	b.n	8000d6c <__aeabi_dadd+0x398>
 8000c54:	2701      	movs	r7, #1
 8000c56:	2938      	cmp	r1, #56	@ 0x38
 8000c58:	dcb2      	bgt.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000c5a:	2780      	movs	r7, #128	@ 0x80
 8000c5c:	043f      	lsls	r7, r7, #16
 8000c5e:	433b      	orrs	r3, r7
 8000c60:	e79c      	b.n	8000b9c <__aeabi_dadd+0x1c8>
 8000c62:	2600      	movs	r6, #0
 8000c64:	2700      	movs	r7, #0
 8000c66:	0524      	lsls	r4, r4, #20
 8000c68:	4334      	orrs	r4, r6
 8000c6a:	07ed      	lsls	r5, r5, #31
 8000c6c:	432c      	orrs	r4, r5
 8000c6e:	0038      	movs	r0, r7
 8000c70:	0021      	movs	r1, r4
 8000c72:	b002      	add	sp, #8
 8000c74:	bce0      	pop	{r5, r6, r7}
 8000c76:	46ba      	mov	sl, r7
 8000c78:	46b1      	mov	r9, r6
 8000c7a:	46a8      	mov	r8, r5
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	077b      	lsls	r3, r7, #29
 8000c80:	d004      	beq.n	8000c8c <__aeabi_dadd+0x2b8>
 8000c82:	230f      	movs	r3, #15
 8000c84:	403b      	ands	r3, r7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d000      	beq.n	8000c8c <__aeabi_dadd+0x2b8>
 8000c8a:	e728      	b.n	8000ade <__aeabi_dadd+0x10a>
 8000c8c:	08f8      	lsrs	r0, r7, #3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000c90:	0777      	lsls	r7, r6, #29
 8000c92:	4307      	orrs	r7, r0
 8000c94:	08f0      	lsrs	r0, r6, #3
 8000c96:	429c      	cmp	r4, r3
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x2c8>
 8000c9a:	e24a      	b.n	8001132 <__aeabi_dadd+0x75e>
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	d059      	beq.n	8000d56 <__aeabi_dadd+0x382>
 8000ca2:	2680      	movs	r6, #128	@ 0x80
 8000ca4:	0336      	lsls	r6, r6, #12
 8000ca6:	4306      	orrs	r6, r0
 8000ca8:	0336      	lsls	r6, r6, #12
 8000caa:	4c2d      	ldr	r4, [pc, #180]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000cac:	0b36      	lsrs	r6, r6, #12
 8000cae:	e7da      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	d061      	beq.n	8000d78 <__aeabi_dadd+0x3a4>
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	1b09      	subs	r1, r1, r4
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x2ea>
 8000cbc:	e0b9      	b.n	8000e32 <__aeabi_dadd+0x45e>
 8000cbe:	4c28      	ldr	r4, [pc, #160]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x2f2>
 8000cc4:	e1a5      	b.n	8001012 <__aeabi_dadd+0x63e>
 8000cc6:	2701      	movs	r7, #1
 8000cc8:	2938      	cmp	r1, #56	@ 0x38
 8000cca:	dc13      	bgt.n	8000cf4 <__aeabi_dadd+0x320>
 8000ccc:	2480      	movs	r4, #128	@ 0x80
 8000cce:	0424      	lsls	r4, r4, #16
 8000cd0:	4326      	orrs	r6, r4
 8000cd2:	291f      	cmp	r1, #31
 8000cd4:	dd00      	ble.n	8000cd8 <__aeabi_dadd+0x304>
 8000cd6:	e1c8      	b.n	800106a <__aeabi_dadd+0x696>
 8000cd8:	2420      	movs	r4, #32
 8000cda:	0037      	movs	r7, r6
 8000cdc:	4648      	mov	r0, r9
 8000cde:	1a64      	subs	r4, r4, r1
 8000ce0:	40a7      	lsls	r7, r4
 8000ce2:	40c8      	lsrs	r0, r1
 8000ce4:	4307      	orrs	r7, r0
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	40a0      	lsls	r0, r4
 8000cea:	40ce      	lsrs	r6, r1
 8000cec:	1e44      	subs	r4, r0, #1
 8000cee:	41a0      	sbcs	r0, r4
 8000cf0:	199b      	adds	r3, r3, r6
 8000cf2:	4307      	orrs	r7, r0
 8000cf4:	18bf      	adds	r7, r7, r2
 8000cf6:	4297      	cmp	r7, r2
 8000cf8:	4192      	sbcs	r2, r2
 8000cfa:	4252      	negs	r2, r2
 8000cfc:	4644      	mov	r4, r8
 8000cfe:	18d6      	adds	r6, r2, r3
 8000d00:	e763      	b.n	8000bca <__aeabi_dadd+0x1f6>
 8000d02:	0038      	movs	r0, r7
 8000d04:	f001 fe4e 	bl	80029a4 <__clzsi2>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_dadd+0x33e>
 8000d10:	e6bf      	b.n	8000a92 <__aeabi_dadd+0xbe>
 8000d12:	003a      	movs	r2, r7
 8000d14:	3808      	subs	r0, #8
 8000d16:	4082      	lsls	r2, r0
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	dd00      	ble.n	8000d1e <__aeabi_dadd+0x34a>
 8000d1c:	e083      	b.n	8000e26 <__aeabi_dadd+0x452>
 8000d1e:	1b1b      	subs	r3, r3, r4
 8000d20:	1c58      	adds	r0, r3, #1
 8000d22:	281f      	cmp	r0, #31
 8000d24:	dc00      	bgt.n	8000d28 <__aeabi_dadd+0x354>
 8000d26:	e1b4      	b.n	8001092 <__aeabi_dadd+0x6be>
 8000d28:	0017      	movs	r7, r2
 8000d2a:	3b1f      	subs	r3, #31
 8000d2c:	40df      	lsrs	r7, r3
 8000d2e:	2820      	cmp	r0, #32
 8000d30:	d005      	beq.n	8000d3e <__aeabi_dadd+0x36a>
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	1a1b      	subs	r3, r3, r0
 8000d36:	409a      	lsls	r2, r3
 8000d38:	1e53      	subs	r3, r2, #1
 8000d3a:	419a      	sbcs	r2, r3
 8000d3c:	4317      	orrs	r7, r2
 8000d3e:	2400      	movs	r4, #0
 8000d40:	2f00      	cmp	r7, #0
 8000d42:	d00a      	beq.n	8000d5a <__aeabi_dadd+0x386>
 8000d44:	077b      	lsls	r3, r7, #29
 8000d46:	d000      	beq.n	8000d4a <__aeabi_dadd+0x376>
 8000d48:	e6c4      	b.n	8000ad4 <__aeabi_dadd+0x100>
 8000d4a:	0026      	movs	r6, r4
 8000d4c:	e79e      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000d4e:	464b      	mov	r3, r9
 8000d50:	000c      	movs	r4, r1
 8000d52:	08d8      	lsrs	r0, r3, #3
 8000d54:	e79b      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000d56:	2700      	movs	r7, #0
 8000d58:	4c01      	ldr	r4, [pc, #4]	@ (8000d60 <__aeabi_dadd+0x38c>)
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	e783      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	ff7fffff 	.word	0xff7fffff
 8000d68:	000007fe 	.word	0x000007fe
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	0777      	lsls	r7, r6, #29
 8000d70:	08d8      	lsrs	r0, r3, #3
 8000d72:	4307      	orrs	r7, r0
 8000d74:	08f0      	lsrs	r0, r6, #3
 8000d76:	e791      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000d78:	4fcd      	ldr	r7, [pc, #820]	@ (80010b0 <__aeabi_dadd+0x6dc>)
 8000d7a:	1c61      	adds	r1, r4, #1
 8000d7c:	4239      	tst	r1, r7
 8000d7e:	d16b      	bne.n	8000e58 <__aeabi_dadd+0x484>
 8000d80:	0031      	movs	r1, r6
 8000d82:	4648      	mov	r0, r9
 8000d84:	4301      	orrs	r1, r0
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dadd+0x3b8>
 8000d8a:	e14b      	b.n	8001024 <__aeabi_dadd+0x650>
 8000d8c:	001f      	movs	r7, r3
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	2900      	cmp	r1, #0
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dadd+0x3c2>
 8000d94:	e181      	b.n	800109a <__aeabi_dadd+0x6c6>
 8000d96:	2f00      	cmp	r7, #0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x3c8>
 8000d9a:	e74c      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000d9c:	444a      	add	r2, r9
 8000d9e:	454a      	cmp	r2, r9
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	18f6      	adds	r6, r6, r3
 8000da4:	4240      	negs	r0, r0
 8000da6:	1836      	adds	r6, r6, r0
 8000da8:	0233      	lsls	r3, r6, #8
 8000daa:	d500      	bpl.n	8000dae <__aeabi_dadd+0x3da>
 8000dac:	e1b0      	b.n	8001110 <__aeabi_dadd+0x73c>
 8000dae:	0017      	movs	r7, r2
 8000db0:	4691      	mov	r9, r2
 8000db2:	4337      	orrs	r7, r6
 8000db4:	d000      	beq.n	8000db8 <__aeabi_dadd+0x3e4>
 8000db6:	e73e      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e754      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	1a89      	subs	r1, r1, r2
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	45c1      	cmp	r9, r8
 8000dc4:	41bf      	sbcs	r7, r7
 8000dc6:	1af1      	subs	r1, r6, r3
 8000dc8:	427f      	negs	r7, r7
 8000dca:	1bc9      	subs	r1, r1, r7
 8000dcc:	020f      	lsls	r7, r1, #8
 8000dce:	d461      	bmi.n	8000e94 <__aeabi_dadd+0x4c0>
 8000dd0:	4647      	mov	r7, r8
 8000dd2:	430f      	orrs	r7, r1
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x404>
 8000dd6:	e0bd      	b.n	8000f54 <__aeabi_dadd+0x580>
 8000dd8:	000e      	movs	r6, r1
 8000dda:	4647      	mov	r7, r8
 8000ddc:	e651      	b.n	8000a82 <__aeabi_dadd+0xae>
 8000dde:	4cb5      	ldr	r4, [pc, #724]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x412>
 8000de4:	e100      	b.n	8000fe8 <__aeabi_dadd+0x614>
 8000de6:	2701      	movs	r7, #1
 8000de8:	2938      	cmp	r1, #56	@ 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x41a>
 8000dec:	e6b8      	b.n	8000b60 <__aeabi_dadd+0x18c>
 8000dee:	2480      	movs	r4, #128	@ 0x80
 8000df0:	0424      	lsls	r4, r4, #16
 8000df2:	4326      	orrs	r6, r4
 8000df4:	e6a3      	b.n	8000b3e <__aeabi_dadd+0x16a>
 8000df6:	4eb0      	ldr	r6, [pc, #704]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000df8:	1ae4      	subs	r4, r4, r3
 8000dfa:	4016      	ands	r6, r2
 8000dfc:	077b      	lsls	r3, r7, #29
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_dadd+0x42e>
 8000e00:	e73f      	b.n	8000c82 <__aeabi_dadd+0x2ae>
 8000e02:	e743      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000e04:	000f      	movs	r7, r1
 8000e06:	0018      	movs	r0, r3
 8000e08:	3f20      	subs	r7, #32
 8000e0a:	40f8      	lsrs	r0, r7
 8000e0c:	4684      	mov	ip, r0
 8000e0e:	2920      	cmp	r1, #32
 8000e10:	d003      	beq.n	8000e1a <__aeabi_dadd+0x446>
 8000e12:	2740      	movs	r7, #64	@ 0x40
 8000e14:	1a79      	subs	r1, r7, r1
 8000e16:	408b      	lsls	r3, r1
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	1e53      	subs	r3, r2, #1
 8000e1c:	419a      	sbcs	r2, r3
 8000e1e:	4663      	mov	r3, ip
 8000e20:	0017      	movs	r7, r2
 8000e22:	431f      	orrs	r7, r3
 8000e24:	e622      	b.n	8000a6c <__aeabi_dadd+0x98>
 8000e26:	48a4      	ldr	r0, [pc, #656]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000e28:	1ae1      	subs	r1, r4, r3
 8000e2a:	4010      	ands	r0, r2
 8000e2c:	0747      	lsls	r7, r0, #29
 8000e2e:	08c0      	lsrs	r0, r0, #3
 8000e30:	e707      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000e32:	0034      	movs	r4, r6
 8000e34:	4648      	mov	r0, r9
 8000e36:	4304      	orrs	r4, r0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x468>
 8000e3a:	e0fa      	b.n	8001032 <__aeabi_dadd+0x65e>
 8000e3c:	1e4c      	subs	r4, r1, #1
 8000e3e:	2901      	cmp	r1, #1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x470>
 8000e42:	e0d7      	b.n	8000ff4 <__aeabi_dadd+0x620>
 8000e44:	4f9b      	ldr	r7, [pc, #620]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000e46:	42b9      	cmp	r1, r7
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dadd+0x478>
 8000e4a:	e0e2      	b.n	8001012 <__aeabi_dadd+0x63e>
 8000e4c:	2701      	movs	r7, #1
 8000e4e:	2c38      	cmp	r4, #56	@ 0x38
 8000e50:	dd00      	ble.n	8000e54 <__aeabi_dadd+0x480>
 8000e52:	e74f      	b.n	8000cf4 <__aeabi_dadd+0x320>
 8000e54:	0021      	movs	r1, r4
 8000e56:	e73c      	b.n	8000cd2 <__aeabi_dadd+0x2fe>
 8000e58:	4c96      	ldr	r4, [pc, #600]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000e5a:	42a1      	cmp	r1, r4
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x48c>
 8000e5e:	e0dd      	b.n	800101c <__aeabi_dadd+0x648>
 8000e60:	444a      	add	r2, r9
 8000e62:	454a      	cmp	r2, r9
 8000e64:	4180      	sbcs	r0, r0
 8000e66:	18f3      	adds	r3, r6, r3
 8000e68:	4240      	negs	r0, r0
 8000e6a:	1818      	adds	r0, r3, r0
 8000e6c:	07c7      	lsls	r7, r0, #31
 8000e6e:	0852      	lsrs	r2, r2, #1
 8000e70:	4317      	orrs	r7, r2
 8000e72:	0846      	lsrs	r6, r0, #1
 8000e74:	0752      	lsls	r2, r2, #29
 8000e76:	d005      	beq.n	8000e84 <__aeabi_dadd+0x4b0>
 8000e78:	220f      	movs	r2, #15
 8000e7a:	000c      	movs	r4, r1
 8000e7c:	403a      	ands	r2, r7
 8000e7e:	2a04      	cmp	r2, #4
 8000e80:	d000      	beq.n	8000e84 <__aeabi_dadd+0x4b0>
 8000e82:	e62c      	b.n	8000ade <__aeabi_dadd+0x10a>
 8000e84:	0776      	lsls	r6, r6, #29
 8000e86:	08ff      	lsrs	r7, r7, #3
 8000e88:	4337      	orrs	r7, r6
 8000e8a:	0900      	lsrs	r0, r0, #4
 8000e8c:	e6d9      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000e8e:	2700      	movs	r7, #0
 8000e90:	2600      	movs	r6, #0
 8000e92:	e6e8      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000e94:	4649      	mov	r1, r9
 8000e96:	1a57      	subs	r7, r2, r1
 8000e98:	42ba      	cmp	r2, r7
 8000e9a:	4192      	sbcs	r2, r2
 8000e9c:	1b9e      	subs	r6, r3, r6
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	4665      	mov	r5, ip
 8000ea2:	1ab6      	subs	r6, r6, r2
 8000ea4:	e5ed      	b.n	8000a82 <__aeabi_dadd+0xae>
 8000ea6:	2900      	cmp	r1, #0
 8000ea8:	d000      	beq.n	8000eac <__aeabi_dadd+0x4d8>
 8000eaa:	e0c6      	b.n	800103a <__aeabi_dadd+0x666>
 8000eac:	2f00      	cmp	r7, #0
 8000eae:	d167      	bne.n	8000f80 <__aeabi_dadd+0x5ac>
 8000eb0:	2680      	movs	r6, #128	@ 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4c7f      	ldr	r4, [pc, #508]	@ (80010b4 <__aeabi_dadd+0x6e0>)
 8000eb6:	0336      	lsls	r6, r6, #12
 8000eb8:	e6d5      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000eba:	4665      	mov	r5, ip
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	001e      	movs	r6, r3
 8000ec0:	08d0      	lsrs	r0, r2, #3
 8000ec2:	e6e4      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 8000ec4:	444a      	add	r2, r9
 8000ec6:	454a      	cmp	r2, r9
 8000ec8:	4180      	sbcs	r0, r0
 8000eca:	18f3      	adds	r3, r6, r3
 8000ecc:	4240      	negs	r0, r0
 8000ece:	1818      	adds	r0, r3, r0
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0203      	lsls	r3, r0, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0x504>
 8000ed6:	e096      	b.n	8001006 <__aeabi_dadd+0x632>
 8000ed8:	4b77      	ldr	r3, [pc, #476]	@ (80010b8 <__aeabi_dadd+0x6e4>)
 8000eda:	0849      	lsrs	r1, r1, #1
 8000edc:	4018      	ands	r0, r3
 8000ede:	07c3      	lsls	r3, r0, #31
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	0844      	lsrs	r4, r0, #1
 8000ee4:	0749      	lsls	r1, r1, #29
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dadd+0x516>
 8000ee8:	e129      	b.n	800113e <__aeabi_dadd+0x76a>
 8000eea:	220f      	movs	r2, #15
 8000eec:	401a      	ands	r2, r3
 8000eee:	2a04      	cmp	r2, #4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x520>
 8000ef2:	e0ea      	b.n	80010ca <__aeabi_dadd+0x6f6>
 8000ef4:	1d1f      	adds	r7, r3, #4
 8000ef6:	429f      	cmp	r7, r3
 8000ef8:	41b6      	sbcs	r6, r6
 8000efa:	4276      	negs	r6, r6
 8000efc:	1936      	adds	r6, r6, r4
 8000efe:	2402      	movs	r4, #2
 8000f00:	e6c4      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 8000f02:	4649      	mov	r1, r9
 8000f04:	1a8f      	subs	r7, r1, r2
 8000f06:	45b9      	cmp	r9, r7
 8000f08:	4180      	sbcs	r0, r0
 8000f0a:	1af6      	subs	r6, r6, r3
 8000f0c:	4240      	negs	r0, r0
 8000f0e:	1a36      	subs	r6, r6, r0
 8000f10:	0233      	lsls	r3, r6, #8
 8000f12:	d406      	bmi.n	8000f22 <__aeabi_dadd+0x54e>
 8000f14:	0773      	lsls	r3, r6, #29
 8000f16:	08ff      	lsrs	r7, r7, #3
 8000f18:	2101      	movs	r1, #1
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	08f0      	lsrs	r0, r6, #3
 8000f1e:	e690      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000f20:	4665      	mov	r5, ip
 8000f22:	2401      	movs	r4, #1
 8000f24:	e5ab      	b.n	8000a7e <__aeabi_dadd+0xaa>
 8000f26:	464b      	mov	r3, r9
 8000f28:	0777      	lsls	r7, r6, #29
 8000f2a:	08d8      	lsrs	r0, r3, #3
 8000f2c:	4307      	orrs	r7, r0
 8000f2e:	08f0      	lsrs	r0, r6, #3
 8000f30:	e6b4      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000f32:	000f      	movs	r7, r1
 8000f34:	0018      	movs	r0, r3
 8000f36:	3f20      	subs	r7, #32
 8000f38:	40f8      	lsrs	r0, r7
 8000f3a:	4684      	mov	ip, r0
 8000f3c:	2920      	cmp	r1, #32
 8000f3e:	d003      	beq.n	8000f48 <__aeabi_dadd+0x574>
 8000f40:	2740      	movs	r7, #64	@ 0x40
 8000f42:	1a79      	subs	r1, r7, r1
 8000f44:	408b      	lsls	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	1e53      	subs	r3, r2, #1
 8000f4a:	419a      	sbcs	r2, r3
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	0017      	movs	r7, r2
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e635      	b.n	8000bc0 <__aeabi_dadd+0x1ec>
 8000f54:	2500      	movs	r5, #0
 8000f56:	2400      	movs	r4, #0
 8000f58:	2600      	movs	r6, #0
 8000f5a:	e684      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	0035      	movs	r5, r6
 8000f60:	3c20      	subs	r4, #32
 8000f62:	40e5      	lsrs	r5, r4
 8000f64:	2920      	cmp	r1, #32
 8000f66:	d005      	beq.n	8000f74 <__aeabi_dadd+0x5a0>
 8000f68:	2440      	movs	r4, #64	@ 0x40
 8000f6a:	1a61      	subs	r1, r4, r1
 8000f6c:	408e      	lsls	r6, r1
 8000f6e:	4649      	mov	r1, r9
 8000f70:	4331      	orrs	r1, r6
 8000f72:	4689      	mov	r9, r1
 8000f74:	4648      	mov	r0, r9
 8000f76:	1e41      	subs	r1, r0, #1
 8000f78:	4188      	sbcs	r0, r1
 8000f7a:	0007      	movs	r7, r0
 8000f7c:	432f      	orrs	r7, r5
 8000f7e:	e5ef      	b.n	8000b60 <__aeabi_dadd+0x18c>
 8000f80:	08d2      	lsrs	r2, r2, #3
 8000f82:	075f      	lsls	r7, r3, #29
 8000f84:	4665      	mov	r5, ip
 8000f86:	4317      	orrs	r7, r2
 8000f88:	08d8      	lsrs	r0, r3, #3
 8000f8a:	e687      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000f8c:	1a17      	subs	r7, r2, r0
 8000f8e:	42ba      	cmp	r2, r7
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	1b9e      	subs	r6, r3, r6
 8000f94:	4252      	negs	r2, r2
 8000f96:	1ab6      	subs	r6, r6, r2
 8000f98:	0233      	lsls	r3, r6, #8
 8000f9a:	d4c1      	bmi.n	8000f20 <__aeabi_dadd+0x54c>
 8000f9c:	0773      	lsls	r3, r6, #29
 8000f9e:	08ff      	lsrs	r7, r7, #3
 8000fa0:	4665      	mov	r5, ip
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	08f0      	lsrs	r0, r6, #3
 8000fa8:	e64b      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8000faa:	2f00      	cmp	r7, #0
 8000fac:	d07b      	beq.n	80010a6 <__aeabi_dadd+0x6d2>
 8000fae:	4665      	mov	r5, ip
 8000fb0:	001e      	movs	r6, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	e63f      	b.n	8000c36 <__aeabi_dadd+0x262>
 8000fb6:	1a81      	subs	r1, r0, r2
 8000fb8:	4688      	mov	r8, r1
 8000fba:	45c1      	cmp	r9, r8
 8000fbc:	41a4      	sbcs	r4, r4
 8000fbe:	1af1      	subs	r1, r6, r3
 8000fc0:	4264      	negs	r4, r4
 8000fc2:	1b09      	subs	r1, r1, r4
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	0424      	lsls	r4, r4, #16
 8000fc8:	4221      	tst	r1, r4
 8000fca:	d077      	beq.n	80010bc <__aeabi_dadd+0x6e8>
 8000fcc:	1a10      	subs	r0, r2, r0
 8000fce:	4282      	cmp	r2, r0
 8000fd0:	4192      	sbcs	r2, r2
 8000fd2:	0007      	movs	r7, r0
 8000fd4:	1b9e      	subs	r6, r3, r6
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	1ab6      	subs	r6, r6, r2
 8000fda:	4337      	orrs	r7, r6
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dadd+0x60c>
 8000fde:	e0a0      	b.n	8001122 <__aeabi_dadd+0x74e>
 8000fe0:	4665      	mov	r5, ip
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	e63e      	b.n	8000c66 <__aeabi_dadd+0x292>
 8000fe8:	075f      	lsls	r7, r3, #29
 8000fea:	08d2      	lsrs	r2, r2, #3
 8000fec:	4665      	mov	r5, ip
 8000fee:	4317      	orrs	r7, r2
 8000ff0:	08d8      	lsrs	r0, r3, #3
 8000ff2:	e653      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8000ff4:	1881      	adds	r1, r0, r2
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	4192      	sbcs	r2, r2
 8000ffa:	18f0      	adds	r0, r6, r3
 8000ffc:	4252      	negs	r2, r2
 8000ffe:	1880      	adds	r0, r0, r2
 8001000:	0203      	lsls	r3, r0, #8
 8001002:	d500      	bpl.n	8001006 <__aeabi_dadd+0x632>
 8001004:	e768      	b.n	8000ed8 <__aeabi_dadd+0x504>
 8001006:	0747      	lsls	r7, r0, #29
 8001008:	08c9      	lsrs	r1, r1, #3
 800100a:	430f      	orrs	r7, r1
 800100c:	08c0      	lsrs	r0, r0, #3
 800100e:	2101      	movs	r1, #1
 8001010:	e617      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8001012:	08d2      	lsrs	r2, r2, #3
 8001014:	075f      	lsls	r7, r3, #29
 8001016:	4317      	orrs	r7, r2
 8001018:	08d8      	lsrs	r0, r3, #3
 800101a:	e63f      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800101c:	000c      	movs	r4, r1
 800101e:	2600      	movs	r6, #0
 8001020:	2700      	movs	r7, #0
 8001022:	e620      	b.n	8000c66 <__aeabi_dadd+0x292>
 8001024:	2900      	cmp	r1, #0
 8001026:	d156      	bne.n	80010d6 <__aeabi_dadd+0x702>
 8001028:	075f      	lsls	r7, r3, #29
 800102a:	08d2      	lsrs	r2, r2, #3
 800102c:	4317      	orrs	r7, r2
 800102e:	08d8      	lsrs	r0, r3, #3
 8001030:	e634      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8001032:	000c      	movs	r4, r1
 8001034:	001e      	movs	r6, r3
 8001036:	08d0      	lsrs	r0, r2, #3
 8001038:	e629      	b.n	8000c8e <__aeabi_dadd+0x2ba>
 800103a:	08c1      	lsrs	r1, r0, #3
 800103c:	0770      	lsls	r0, r6, #29
 800103e:	4301      	orrs	r1, r0
 8001040:	08f0      	lsrs	r0, r6, #3
 8001042:	2f00      	cmp	r7, #0
 8001044:	d062      	beq.n	800110c <__aeabi_dadd+0x738>
 8001046:	2480      	movs	r4, #128	@ 0x80
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	4220      	tst	r0, r4
 800104c:	d007      	beq.n	800105e <__aeabi_dadd+0x68a>
 800104e:	08de      	lsrs	r6, r3, #3
 8001050:	4226      	tst	r6, r4
 8001052:	d104      	bne.n	800105e <__aeabi_dadd+0x68a>
 8001054:	4665      	mov	r5, ip
 8001056:	0030      	movs	r0, r6
 8001058:	08d1      	lsrs	r1, r2, #3
 800105a:	075b      	lsls	r3, r3, #29
 800105c:	4319      	orrs	r1, r3
 800105e:	0f4f      	lsrs	r7, r1, #29
 8001060:	00c9      	lsls	r1, r1, #3
 8001062:	08c9      	lsrs	r1, r1, #3
 8001064:	077f      	lsls	r7, r7, #29
 8001066:	430f      	orrs	r7, r1
 8001068:	e618      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800106a:	000c      	movs	r4, r1
 800106c:	0030      	movs	r0, r6
 800106e:	3c20      	subs	r4, #32
 8001070:	40e0      	lsrs	r0, r4
 8001072:	4684      	mov	ip, r0
 8001074:	2920      	cmp	r1, #32
 8001076:	d005      	beq.n	8001084 <__aeabi_dadd+0x6b0>
 8001078:	2440      	movs	r4, #64	@ 0x40
 800107a:	1a61      	subs	r1, r4, r1
 800107c:	408e      	lsls	r6, r1
 800107e:	4649      	mov	r1, r9
 8001080:	4331      	orrs	r1, r6
 8001082:	4689      	mov	r9, r1
 8001084:	4648      	mov	r0, r9
 8001086:	1e41      	subs	r1, r0, #1
 8001088:	4188      	sbcs	r0, r1
 800108a:	4661      	mov	r1, ip
 800108c:	0007      	movs	r7, r0
 800108e:	430f      	orrs	r7, r1
 8001090:	e630      	b.n	8000cf4 <__aeabi_dadd+0x320>
 8001092:	2120      	movs	r1, #32
 8001094:	2700      	movs	r7, #0
 8001096:	1a09      	subs	r1, r1, r0
 8001098:	e50e      	b.n	8000ab8 <__aeabi_dadd+0xe4>
 800109a:	001e      	movs	r6, r3
 800109c:	2f00      	cmp	r7, #0
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x6ce>
 80010a0:	e522      	b.n	8000ae8 <__aeabi_dadd+0x114>
 80010a2:	2400      	movs	r4, #0
 80010a4:	e758      	b.n	8000f58 <__aeabi_dadd+0x584>
 80010a6:	2500      	movs	r5, #0
 80010a8:	2400      	movs	r4, #0
 80010aa:	2600      	movs	r6, #0
 80010ac:	e5db      	b.n	8000c66 <__aeabi_dadd+0x292>
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	000007fe 	.word	0x000007fe
 80010b4:	000007ff 	.word	0x000007ff
 80010b8:	ff7fffff 	.word	0xff7fffff
 80010bc:	4647      	mov	r7, r8
 80010be:	430f      	orrs	r7, r1
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dadd+0x6f0>
 80010c2:	e747      	b.n	8000f54 <__aeabi_dadd+0x580>
 80010c4:	000e      	movs	r6, r1
 80010c6:	46c1      	mov	r9, r8
 80010c8:	e5b5      	b.n	8000c36 <__aeabi_dadd+0x262>
 80010ca:	08df      	lsrs	r7, r3, #3
 80010cc:	0764      	lsls	r4, r4, #29
 80010ce:	2102      	movs	r1, #2
 80010d0:	4327      	orrs	r7, r4
 80010d2:	0900      	lsrs	r0, r0, #4
 80010d4:	e5b5      	b.n	8000c42 <__aeabi_dadd+0x26e>
 80010d6:	0019      	movs	r1, r3
 80010d8:	08c0      	lsrs	r0, r0, #3
 80010da:	0777      	lsls	r7, r6, #29
 80010dc:	4307      	orrs	r7, r0
 80010de:	4311      	orrs	r1, r2
 80010e0:	08f0      	lsrs	r0, r6, #3
 80010e2:	2900      	cmp	r1, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dadd+0x714>
 80010e6:	e5d9      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	0309      	lsls	r1, r1, #12
 80010ec:	4208      	tst	r0, r1
 80010ee:	d007      	beq.n	8001100 <__aeabi_dadd+0x72c>
 80010f0:	08dc      	lsrs	r4, r3, #3
 80010f2:	420c      	tst	r4, r1
 80010f4:	d104      	bne.n	8001100 <__aeabi_dadd+0x72c>
 80010f6:	08d2      	lsrs	r2, r2, #3
 80010f8:	075b      	lsls	r3, r3, #29
 80010fa:	431a      	orrs	r2, r3
 80010fc:	0017      	movs	r7, r2
 80010fe:	0020      	movs	r0, r4
 8001100:	0f7b      	lsrs	r3, r7, #29
 8001102:	00ff      	lsls	r7, r7, #3
 8001104:	08ff      	lsrs	r7, r7, #3
 8001106:	075b      	lsls	r3, r3, #29
 8001108:	431f      	orrs	r7, r3
 800110a:	e5c7      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 800110c:	000f      	movs	r7, r1
 800110e:	e5c5      	b.n	8000c9c <__aeabi_dadd+0x2c8>
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <__aeabi_dadd+0x788>)
 8001112:	08d2      	lsrs	r2, r2, #3
 8001114:	4033      	ands	r3, r6
 8001116:	075f      	lsls	r7, r3, #29
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	2401      	movs	r4, #1
 800111c:	4317      	orrs	r7, r2
 800111e:	0b1e      	lsrs	r6, r3, #12
 8001120:	e5a1      	b.n	8000c66 <__aeabi_dadd+0x292>
 8001122:	4226      	tst	r6, r4
 8001124:	d012      	beq.n	800114c <__aeabi_dadd+0x778>
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_dadd+0x788>)
 8001128:	4665      	mov	r5, ip
 800112a:	0002      	movs	r2, r0
 800112c:	2401      	movs	r4, #1
 800112e:	401e      	ands	r6, r3
 8001130:	e4e6      	b.n	8000b00 <__aeabi_dadd+0x12c>
 8001132:	0021      	movs	r1, r4
 8001134:	e585      	b.n	8000c42 <__aeabi_dadd+0x26e>
 8001136:	0017      	movs	r7, r2
 8001138:	e5a8      	b.n	8000c8c <__aeabi_dadd+0x2b8>
 800113a:	003a      	movs	r2, r7
 800113c:	e4d4      	b.n	8000ae8 <__aeabi_dadd+0x114>
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	0764      	lsls	r4, r4, #29
 8001142:	431c      	orrs	r4, r3
 8001144:	0027      	movs	r7, r4
 8001146:	2102      	movs	r1, #2
 8001148:	0900      	lsrs	r0, r0, #4
 800114a:	e57a      	b.n	8000c42 <__aeabi_dadd+0x26e>
 800114c:	08c0      	lsrs	r0, r0, #3
 800114e:	0777      	lsls	r7, r6, #29
 8001150:	4307      	orrs	r7, r0
 8001152:	4665      	mov	r5, ip
 8001154:	2100      	movs	r1, #0
 8001156:	08f0      	lsrs	r0, r6, #3
 8001158:	e573      	b.n	8000c42 <__aeabi_dadd+0x26e>
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	ff7fffff 	.word	0xff7fffff

08001160 <__aeabi_ddiv>:
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	46de      	mov	lr, fp
 8001164:	4645      	mov	r5, r8
 8001166:	4657      	mov	r7, sl
 8001168:	464e      	mov	r6, r9
 800116a:	b5e0      	push	{r5, r6, r7, lr}
 800116c:	b087      	sub	sp, #28
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	030b      	lsls	r3, r1, #12
 8001174:	0b1b      	lsrs	r3, r3, #12
 8001176:	469b      	mov	fp, r3
 8001178:	0fca      	lsrs	r2, r1, #31
 800117a:	004b      	lsls	r3, r1, #1
 800117c:	0004      	movs	r4, r0
 800117e:	4680      	mov	r8, r0
 8001180:	0d5b      	lsrs	r3, r3, #21
 8001182:	9202      	str	r2, [sp, #8]
 8001184:	d100      	bne.n	8001188 <__aeabi_ddiv+0x28>
 8001186:	e098      	b.n	80012ba <__aeabi_ddiv+0x15a>
 8001188:	4a7c      	ldr	r2, [pc, #496]	@ (800137c <__aeabi_ddiv+0x21c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d037      	beq.n	80011fe <__aeabi_ddiv+0x9e>
 800118e:	4659      	mov	r1, fp
 8001190:	0f42      	lsrs	r2, r0, #29
 8001192:	00c9      	lsls	r1, r1, #3
 8001194:	430a      	orrs	r2, r1
 8001196:	2180      	movs	r1, #128	@ 0x80
 8001198:	0409      	lsls	r1, r1, #16
 800119a:	4311      	orrs	r1, r2
 800119c:	00c2      	lsls	r2, r0, #3
 800119e:	4690      	mov	r8, r2
 80011a0:	4a77      	ldr	r2, [pc, #476]	@ (8001380 <__aeabi_ddiv+0x220>)
 80011a2:	4689      	mov	r9, r1
 80011a4:	4692      	mov	sl, r2
 80011a6:	449a      	add	sl, r3
 80011a8:	2300      	movs	r3, #0
 80011aa:	2400      	movs	r4, #0
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	9e00      	ldr	r6, [sp, #0]
 80011b0:	9f01      	ldr	r7, [sp, #4]
 80011b2:	033b      	lsls	r3, r7, #12
 80011b4:	0b1b      	lsrs	r3, r3, #12
 80011b6:	469b      	mov	fp, r3
 80011b8:	007b      	lsls	r3, r7, #1
 80011ba:	0030      	movs	r0, r6
 80011bc:	0d5b      	lsrs	r3, r3, #21
 80011be:	0ffd      	lsrs	r5, r7, #31
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d059      	beq.n	8001278 <__aeabi_ddiv+0x118>
 80011c4:	4a6d      	ldr	r2, [pc, #436]	@ (800137c <__aeabi_ddiv+0x21c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d048      	beq.n	800125c <__aeabi_ddiv+0xfc>
 80011ca:	4659      	mov	r1, fp
 80011cc:	0f72      	lsrs	r2, r6, #29
 80011ce:	00c9      	lsls	r1, r1, #3
 80011d0:	430a      	orrs	r2, r1
 80011d2:	2180      	movs	r1, #128	@ 0x80
 80011d4:	0409      	lsls	r1, r1, #16
 80011d6:	4311      	orrs	r1, r2
 80011d8:	468b      	mov	fp, r1
 80011da:	4969      	ldr	r1, [pc, #420]	@ (8001380 <__aeabi_ddiv+0x220>)
 80011dc:	00f2      	lsls	r2, r6, #3
 80011de:	468c      	mov	ip, r1
 80011e0:	4651      	mov	r1, sl
 80011e2:	4463      	add	r3, ip
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	469a      	mov	sl, r3
 80011e8:	2100      	movs	r1, #0
 80011ea:	9e02      	ldr	r6, [sp, #8]
 80011ec:	406e      	eors	r6, r5
 80011ee:	b2f6      	uxtb	r6, r6
 80011f0:	2c0f      	cmp	r4, #15
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x96>
 80011f4:	e0ce      	b.n	8001394 <__aeabi_ddiv+0x234>
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <__aeabi_ddiv+0x224>)
 80011f8:	00a4      	lsls	r4, r4, #2
 80011fa:	591b      	ldr	r3, [r3, r4]
 80011fc:	469f      	mov	pc, r3
 80011fe:	465a      	mov	r2, fp
 8001200:	4302      	orrs	r2, r0
 8001202:	4691      	mov	r9, r2
 8001204:	d000      	beq.n	8001208 <__aeabi_ddiv+0xa8>
 8001206:	e090      	b.n	800132a <__aeabi_ddiv+0x1ca>
 8001208:	469a      	mov	sl, r3
 800120a:	2302      	movs	r3, #2
 800120c:	4690      	mov	r8, r2
 800120e:	2408      	movs	r4, #8
 8001210:	9303      	str	r3, [sp, #12]
 8001212:	e7cc      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001214:	46cb      	mov	fp, r9
 8001216:	4642      	mov	r2, r8
 8001218:	9d02      	ldr	r5, [sp, #8]
 800121a:	9903      	ldr	r1, [sp, #12]
 800121c:	2902      	cmp	r1, #2
 800121e:	d100      	bne.n	8001222 <__aeabi_ddiv+0xc2>
 8001220:	e1de      	b.n	80015e0 <__aeabi_ddiv+0x480>
 8001222:	2903      	cmp	r1, #3
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0xc8>
 8001226:	e08d      	b.n	8001344 <__aeabi_ddiv+0x1e4>
 8001228:	2901      	cmp	r1, #1
 800122a:	d000      	beq.n	800122e <__aeabi_ddiv+0xce>
 800122c:	e179      	b.n	8001522 <__aeabi_ddiv+0x3c2>
 800122e:	002e      	movs	r6, r5
 8001230:	2200      	movs	r2, #0
 8001232:	2300      	movs	r3, #0
 8001234:	2400      	movs	r4, #0
 8001236:	4690      	mov	r8, r2
 8001238:	051b      	lsls	r3, r3, #20
 800123a:	4323      	orrs	r3, r4
 800123c:	07f6      	lsls	r6, r6, #31
 800123e:	4333      	orrs	r3, r6
 8001240:	4640      	mov	r0, r8
 8001242:	0019      	movs	r1, r3
 8001244:	b007      	add	sp, #28
 8001246:	bcf0      	pop	{r4, r5, r6, r7}
 8001248:	46bb      	mov	fp, r7
 800124a:	46b2      	mov	sl, r6
 800124c:	46a9      	mov	r9, r5
 800124e:	46a0      	mov	r8, r4
 8001250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001252:	2200      	movs	r2, #0
 8001254:	2400      	movs	r4, #0
 8001256:	4690      	mov	r8, r2
 8001258:	4b48      	ldr	r3, [pc, #288]	@ (800137c <__aeabi_ddiv+0x21c>)
 800125a:	e7ed      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800125c:	465a      	mov	r2, fp
 800125e:	9b00      	ldr	r3, [sp, #0]
 8001260:	431a      	orrs	r2, r3
 8001262:	4b49      	ldr	r3, [pc, #292]	@ (8001388 <__aeabi_ddiv+0x228>)
 8001264:	469c      	mov	ip, r3
 8001266:	44e2      	add	sl, ip
 8001268:	2a00      	cmp	r2, #0
 800126a:	d159      	bne.n	8001320 <__aeabi_ddiv+0x1c0>
 800126c:	2302      	movs	r3, #2
 800126e:	431c      	orrs	r4, r3
 8001270:	2300      	movs	r3, #0
 8001272:	2102      	movs	r1, #2
 8001274:	469b      	mov	fp, r3
 8001276:	e7b8      	b.n	80011ea <__aeabi_ddiv+0x8a>
 8001278:	465a      	mov	r2, fp
 800127a:	9b00      	ldr	r3, [sp, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	d049      	beq.n	8001314 <__aeabi_ddiv+0x1b4>
 8001280:	465b      	mov	r3, fp
 8001282:	2b00      	cmp	r3, #0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x128>
 8001286:	e19c      	b.n	80015c2 <__aeabi_ddiv+0x462>
 8001288:	4658      	mov	r0, fp
 800128a:	f001 fb8b 	bl	80029a4 <__clzsi2>
 800128e:	0002      	movs	r2, r0
 8001290:	0003      	movs	r3, r0
 8001292:	3a0b      	subs	r2, #11
 8001294:	271d      	movs	r7, #29
 8001296:	9e00      	ldr	r6, [sp, #0]
 8001298:	1aba      	subs	r2, r7, r2
 800129a:	0019      	movs	r1, r3
 800129c:	4658      	mov	r0, fp
 800129e:	40d6      	lsrs	r6, r2
 80012a0:	3908      	subs	r1, #8
 80012a2:	4088      	lsls	r0, r1
 80012a4:	0032      	movs	r2, r6
 80012a6:	4302      	orrs	r2, r0
 80012a8:	4693      	mov	fp, r2
 80012aa:	9a00      	ldr	r2, [sp, #0]
 80012ac:	408a      	lsls	r2, r1
 80012ae:	4937      	ldr	r1, [pc, #220]	@ (800138c <__aeabi_ddiv+0x22c>)
 80012b0:	4453      	add	r3, sl
 80012b2:	468a      	mov	sl, r1
 80012b4:	2100      	movs	r1, #0
 80012b6:	449a      	add	sl, r3
 80012b8:	e797      	b.n	80011ea <__aeabi_ddiv+0x8a>
 80012ba:	465b      	mov	r3, fp
 80012bc:	4303      	orrs	r3, r0
 80012be:	4699      	mov	r9, r3
 80012c0:	d021      	beq.n	8001306 <__aeabi_ddiv+0x1a6>
 80012c2:	465b      	mov	r3, fp
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x16a>
 80012c8:	e169      	b.n	800159e <__aeabi_ddiv+0x43e>
 80012ca:	4658      	mov	r0, fp
 80012cc:	f001 fb6a 	bl	80029a4 <__clzsi2>
 80012d0:	230b      	movs	r3, #11
 80012d2:	425b      	negs	r3, r3
 80012d4:	469c      	mov	ip, r3
 80012d6:	0002      	movs	r2, r0
 80012d8:	4484      	add	ip, r0
 80012da:	4666      	mov	r6, ip
 80012dc:	231d      	movs	r3, #29
 80012de:	1b9b      	subs	r3, r3, r6
 80012e0:	0026      	movs	r6, r4
 80012e2:	0011      	movs	r1, r2
 80012e4:	4658      	mov	r0, fp
 80012e6:	40de      	lsrs	r6, r3
 80012e8:	3908      	subs	r1, #8
 80012ea:	4088      	lsls	r0, r1
 80012ec:	0033      	movs	r3, r6
 80012ee:	4303      	orrs	r3, r0
 80012f0:	4699      	mov	r9, r3
 80012f2:	0023      	movs	r3, r4
 80012f4:	408b      	lsls	r3, r1
 80012f6:	4698      	mov	r8, r3
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <__aeabi_ddiv+0x230>)
 80012fa:	2400      	movs	r4, #0
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	469a      	mov	sl, r3
 8001300:	2300      	movs	r3, #0
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	e753      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001306:	2300      	movs	r3, #0
 8001308:	4698      	mov	r8, r3
 800130a:	469a      	mov	sl, r3
 800130c:	3301      	adds	r3, #1
 800130e:	2404      	movs	r4, #4
 8001310:	9303      	str	r3, [sp, #12]
 8001312:	e74c      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001314:	2301      	movs	r3, #1
 8001316:	431c      	orrs	r4, r3
 8001318:	2300      	movs	r3, #0
 800131a:	2101      	movs	r1, #1
 800131c:	469b      	mov	fp, r3
 800131e:	e764      	b.n	80011ea <__aeabi_ddiv+0x8a>
 8001320:	2303      	movs	r3, #3
 8001322:	0032      	movs	r2, r6
 8001324:	2103      	movs	r1, #3
 8001326:	431c      	orrs	r4, r3
 8001328:	e75f      	b.n	80011ea <__aeabi_ddiv+0x8a>
 800132a:	469a      	mov	sl, r3
 800132c:	2303      	movs	r3, #3
 800132e:	46d9      	mov	r9, fp
 8001330:	240c      	movs	r4, #12
 8001332:	9303      	str	r3, [sp, #12]
 8001334:	e73b      	b.n	80011ae <__aeabi_ddiv+0x4e>
 8001336:	2300      	movs	r3, #0
 8001338:	2480      	movs	r4, #128	@ 0x80
 800133a:	4698      	mov	r8, r3
 800133c:	2600      	movs	r6, #0
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001340:	0324      	lsls	r4, r4, #12
 8001342:	e779      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001344:	2480      	movs	r4, #128	@ 0x80
 8001346:	465b      	mov	r3, fp
 8001348:	0324      	lsls	r4, r4, #12
 800134a:	431c      	orrs	r4, r3
 800134c:	0324      	lsls	r4, r4, #12
 800134e:	002e      	movs	r6, r5
 8001350:	4690      	mov	r8, r2
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001354:	0b24      	lsrs	r4, r4, #12
 8001356:	e76f      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001358:	2480      	movs	r4, #128	@ 0x80
 800135a:	464b      	mov	r3, r9
 800135c:	0324      	lsls	r4, r4, #12
 800135e:	4223      	tst	r3, r4
 8001360:	d002      	beq.n	8001368 <__aeabi_ddiv+0x208>
 8001362:	465b      	mov	r3, fp
 8001364:	4223      	tst	r3, r4
 8001366:	d0f0      	beq.n	800134a <__aeabi_ddiv+0x1ea>
 8001368:	2480      	movs	r4, #128	@ 0x80
 800136a:	464b      	mov	r3, r9
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	431c      	orrs	r4, r3
 8001370:	0324      	lsls	r4, r4, #12
 8001372:	9e02      	ldr	r6, [sp, #8]
 8001374:	4b01      	ldr	r3, [pc, #4]	@ (800137c <__aeabi_ddiv+0x21c>)
 8001376:	0b24      	lsrs	r4, r4, #12
 8001378:	e75e      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	000007ff 	.word	0x000007ff
 8001380:	fffffc01 	.word	0xfffffc01
 8001384:	0800ada4 	.word	0x0800ada4
 8001388:	fffff801 	.word	0xfffff801
 800138c:	000003f3 	.word	0x000003f3
 8001390:	fffffc0d 	.word	0xfffffc0d
 8001394:	45cb      	cmp	fp, r9
 8001396:	d200      	bcs.n	800139a <__aeabi_ddiv+0x23a>
 8001398:	e0f8      	b.n	800158c <__aeabi_ddiv+0x42c>
 800139a:	d100      	bne.n	800139e <__aeabi_ddiv+0x23e>
 800139c:	e0f3      	b.n	8001586 <__aeabi_ddiv+0x426>
 800139e:	2301      	movs	r3, #1
 80013a0:	425b      	negs	r3, r3
 80013a2:	469c      	mov	ip, r3
 80013a4:	4644      	mov	r4, r8
 80013a6:	4648      	mov	r0, r9
 80013a8:	2500      	movs	r5, #0
 80013aa:	44e2      	add	sl, ip
 80013ac:	465b      	mov	r3, fp
 80013ae:	0e17      	lsrs	r7, r2, #24
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	431f      	orrs	r7, r3
 80013b4:	0c19      	lsrs	r1, r3, #16
 80013b6:	043b      	lsls	r3, r7, #16
 80013b8:	0212      	lsls	r2, r2, #8
 80013ba:	9700      	str	r7, [sp, #0]
 80013bc:	0c1f      	lsrs	r7, r3, #16
 80013be:	4691      	mov	r9, r2
 80013c0:	9102      	str	r1, [sp, #8]
 80013c2:	9703      	str	r7, [sp, #12]
 80013c4:	f7fe ff42 	bl	800024c <__aeabi_uidivmod>
 80013c8:	0002      	movs	r2, r0
 80013ca:	437a      	muls	r2, r7
 80013cc:	040b      	lsls	r3, r1, #16
 80013ce:	0c21      	lsrs	r1, r4, #16
 80013d0:	4680      	mov	r8, r0
 80013d2:	4319      	orrs	r1, r3
 80013d4:	428a      	cmp	r2, r1
 80013d6:	d909      	bls.n	80013ec <__aeabi_ddiv+0x28c>
 80013d8:	9f00      	ldr	r7, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	46bc      	mov	ip, r7
 80013de:	425b      	negs	r3, r3
 80013e0:	4461      	add	r1, ip
 80013e2:	469c      	mov	ip, r3
 80013e4:	44e0      	add	r8, ip
 80013e6:	428f      	cmp	r7, r1
 80013e8:	d800      	bhi.n	80013ec <__aeabi_ddiv+0x28c>
 80013ea:	e15c      	b.n	80016a6 <__aeabi_ddiv+0x546>
 80013ec:	1a88      	subs	r0, r1, r2
 80013ee:	9902      	ldr	r1, [sp, #8]
 80013f0:	f7fe ff2c 	bl	800024c <__aeabi_uidivmod>
 80013f4:	9a03      	ldr	r2, [sp, #12]
 80013f6:	0424      	lsls	r4, r4, #16
 80013f8:	4342      	muls	r2, r0
 80013fa:	0409      	lsls	r1, r1, #16
 80013fc:	0c24      	lsrs	r4, r4, #16
 80013fe:	0003      	movs	r3, r0
 8001400:	430c      	orrs	r4, r1
 8001402:	42a2      	cmp	r2, r4
 8001404:	d906      	bls.n	8001414 <__aeabi_ddiv+0x2b4>
 8001406:	9900      	ldr	r1, [sp, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	468c      	mov	ip, r1
 800140c:	4464      	add	r4, ip
 800140e:	42a1      	cmp	r1, r4
 8001410:	d800      	bhi.n	8001414 <__aeabi_ddiv+0x2b4>
 8001412:	e142      	b.n	800169a <__aeabi_ddiv+0x53a>
 8001414:	1aa0      	subs	r0, r4, r2
 8001416:	4642      	mov	r2, r8
 8001418:	0412      	lsls	r2, r2, #16
 800141a:	431a      	orrs	r2, r3
 800141c:	4693      	mov	fp, r2
 800141e:	464b      	mov	r3, r9
 8001420:	4659      	mov	r1, fp
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	001f      	movs	r7, r3
 8001426:	9304      	str	r3, [sp, #16]
 8001428:	040b      	lsls	r3, r1, #16
 800142a:	4649      	mov	r1, r9
 800142c:	0409      	lsls	r1, r1, #16
 800142e:	0c09      	lsrs	r1, r1, #16
 8001430:	000c      	movs	r4, r1
 8001432:	0c1b      	lsrs	r3, r3, #16
 8001434:	435c      	muls	r4, r3
 8001436:	0c12      	lsrs	r2, r2, #16
 8001438:	437b      	muls	r3, r7
 800143a:	4688      	mov	r8, r1
 800143c:	4351      	muls	r1, r2
 800143e:	437a      	muls	r2, r7
 8001440:	0c27      	lsrs	r7, r4, #16
 8001442:	46bc      	mov	ip, r7
 8001444:	185b      	adds	r3, r3, r1
 8001446:	4463      	add	r3, ip
 8001448:	4299      	cmp	r1, r3
 800144a:	d903      	bls.n	8001454 <__aeabi_ddiv+0x2f4>
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	0249      	lsls	r1, r1, #9
 8001450:	468c      	mov	ip, r1
 8001452:	4462      	add	r2, ip
 8001454:	0c19      	lsrs	r1, r3, #16
 8001456:	0424      	lsls	r4, r4, #16
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	0c24      	lsrs	r4, r4, #16
 800145c:	188a      	adds	r2, r1, r2
 800145e:	191c      	adds	r4, r3, r4
 8001460:	4290      	cmp	r0, r2
 8001462:	d302      	bcc.n	800146a <__aeabi_ddiv+0x30a>
 8001464:	d116      	bne.n	8001494 <__aeabi_ddiv+0x334>
 8001466:	42a5      	cmp	r5, r4
 8001468:	d214      	bcs.n	8001494 <__aeabi_ddiv+0x334>
 800146a:	465b      	mov	r3, fp
 800146c:	9f00      	ldr	r7, [sp, #0]
 800146e:	3b01      	subs	r3, #1
 8001470:	444d      	add	r5, r9
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	454d      	cmp	r5, r9
 8001476:	419b      	sbcs	r3, r3
 8001478:	46bc      	mov	ip, r7
 800147a:	425b      	negs	r3, r3
 800147c:	4463      	add	r3, ip
 800147e:	18c0      	adds	r0, r0, r3
 8001480:	4287      	cmp	r7, r0
 8001482:	d300      	bcc.n	8001486 <__aeabi_ddiv+0x326>
 8001484:	e102      	b.n	800168c <__aeabi_ddiv+0x52c>
 8001486:	4282      	cmp	r2, r0
 8001488:	d900      	bls.n	800148c <__aeabi_ddiv+0x32c>
 800148a:	e129      	b.n	80016e0 <__aeabi_ddiv+0x580>
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x330>
 800148e:	e124      	b.n	80016da <__aeabi_ddiv+0x57a>
 8001490:	9b05      	ldr	r3, [sp, #20]
 8001492:	469b      	mov	fp, r3
 8001494:	1b2c      	subs	r4, r5, r4
 8001496:	42a5      	cmp	r5, r4
 8001498:	41ad      	sbcs	r5, r5
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	1a80      	subs	r0, r0, r2
 800149e:	426d      	negs	r5, r5
 80014a0:	1b40      	subs	r0, r0, r5
 80014a2:	4283      	cmp	r3, r0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_ddiv+0x348>
 80014a6:	e10f      	b.n	80016c8 <__aeabi_ddiv+0x568>
 80014a8:	9902      	ldr	r1, [sp, #8]
 80014aa:	f7fe fecf 	bl	800024c <__aeabi_uidivmod>
 80014ae:	9a03      	ldr	r2, [sp, #12]
 80014b0:	040b      	lsls	r3, r1, #16
 80014b2:	4342      	muls	r2, r0
 80014b4:	0c21      	lsrs	r1, r4, #16
 80014b6:	0005      	movs	r5, r0
 80014b8:	4319      	orrs	r1, r3
 80014ba:	428a      	cmp	r2, r1
 80014bc:	d900      	bls.n	80014c0 <__aeabi_ddiv+0x360>
 80014be:	e0cb      	b.n	8001658 <__aeabi_ddiv+0x4f8>
 80014c0:	1a88      	subs	r0, r1, r2
 80014c2:	9902      	ldr	r1, [sp, #8]
 80014c4:	f7fe fec2 	bl	800024c <__aeabi_uidivmod>
 80014c8:	9a03      	ldr	r2, [sp, #12]
 80014ca:	0424      	lsls	r4, r4, #16
 80014cc:	4342      	muls	r2, r0
 80014ce:	0409      	lsls	r1, r1, #16
 80014d0:	0c24      	lsrs	r4, r4, #16
 80014d2:	0003      	movs	r3, r0
 80014d4:	430c      	orrs	r4, r1
 80014d6:	42a2      	cmp	r2, r4
 80014d8:	d900      	bls.n	80014dc <__aeabi_ddiv+0x37c>
 80014da:	e0ca      	b.n	8001672 <__aeabi_ddiv+0x512>
 80014dc:	4641      	mov	r1, r8
 80014de:	1aa4      	subs	r4, r4, r2
 80014e0:	042a      	lsls	r2, r5, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	9f04      	ldr	r7, [sp, #16]
 80014e6:	0413      	lsls	r3, r2, #16
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	4359      	muls	r1, r3
 80014ec:	4640      	mov	r0, r8
 80014ee:	437b      	muls	r3, r7
 80014f0:	469c      	mov	ip, r3
 80014f2:	0c15      	lsrs	r5, r2, #16
 80014f4:	4368      	muls	r0, r5
 80014f6:	0c0b      	lsrs	r3, r1, #16
 80014f8:	4484      	add	ip, r0
 80014fa:	4463      	add	r3, ip
 80014fc:	437d      	muls	r5, r7
 80014fe:	4298      	cmp	r0, r3
 8001500:	d903      	bls.n	800150a <__aeabi_ddiv+0x3aa>
 8001502:	2080      	movs	r0, #128	@ 0x80
 8001504:	0240      	lsls	r0, r0, #9
 8001506:	4684      	mov	ip, r0
 8001508:	4465      	add	r5, ip
 800150a:	0c18      	lsrs	r0, r3, #16
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	0c09      	lsrs	r1, r1, #16
 8001512:	1940      	adds	r0, r0, r5
 8001514:	185b      	adds	r3, r3, r1
 8001516:	4284      	cmp	r4, r0
 8001518:	d327      	bcc.n	800156a <__aeabi_ddiv+0x40a>
 800151a:	d023      	beq.n	8001564 <__aeabi_ddiv+0x404>
 800151c:	2301      	movs	r3, #1
 800151e:	0035      	movs	r5, r6
 8001520:	431a      	orrs	r2, r3
 8001522:	4b94      	ldr	r3, [pc, #592]	@ (8001774 <__aeabi_ddiv+0x614>)
 8001524:	4453      	add	r3, sl
 8001526:	2b00      	cmp	r3, #0
 8001528:	dd60      	ble.n	80015ec <__aeabi_ddiv+0x48c>
 800152a:	0751      	lsls	r1, r2, #29
 800152c:	d000      	beq.n	8001530 <__aeabi_ddiv+0x3d0>
 800152e:	e086      	b.n	800163e <__aeabi_ddiv+0x4de>
 8001530:	002e      	movs	r6, r5
 8001532:	08d1      	lsrs	r1, r2, #3
 8001534:	465a      	mov	r2, fp
 8001536:	01d2      	lsls	r2, r2, #7
 8001538:	d506      	bpl.n	8001548 <__aeabi_ddiv+0x3e8>
 800153a:	465a      	mov	r2, fp
 800153c:	4b8e      	ldr	r3, [pc, #568]	@ (8001778 <__aeabi_ddiv+0x618>)
 800153e:	401a      	ands	r2, r3
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	4693      	mov	fp, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4453      	add	r3, sl
 8001548:	4a8c      	ldr	r2, [pc, #560]	@ (800177c <__aeabi_ddiv+0x61c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	dd00      	ble.n	8001550 <__aeabi_ddiv+0x3f0>
 800154e:	e680      	b.n	8001252 <__aeabi_ddiv+0xf2>
 8001550:	465a      	mov	r2, fp
 8001552:	0752      	lsls	r2, r2, #29
 8001554:	430a      	orrs	r2, r1
 8001556:	4690      	mov	r8, r2
 8001558:	465a      	mov	r2, fp
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	0254      	lsls	r4, r2, #9
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	0d5b      	lsrs	r3, r3, #21
 8001562:	e669      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001564:	0035      	movs	r5, r6
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0db      	beq.n	8001522 <__aeabi_ddiv+0x3c2>
 800156a:	9d00      	ldr	r5, [sp, #0]
 800156c:	1e51      	subs	r1, r2, #1
 800156e:	46ac      	mov	ip, r5
 8001570:	4464      	add	r4, ip
 8001572:	42ac      	cmp	r4, r5
 8001574:	d200      	bcs.n	8001578 <__aeabi_ddiv+0x418>
 8001576:	e09e      	b.n	80016b6 <__aeabi_ddiv+0x556>
 8001578:	4284      	cmp	r4, r0
 800157a:	d200      	bcs.n	800157e <__aeabi_ddiv+0x41e>
 800157c:	e0e1      	b.n	8001742 <__aeabi_ddiv+0x5e2>
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0x422>
 8001580:	e0ee      	b.n	8001760 <__aeabi_ddiv+0x600>
 8001582:	000a      	movs	r2, r1
 8001584:	e7ca      	b.n	800151c <__aeabi_ddiv+0x3bc>
 8001586:	4542      	cmp	r2, r8
 8001588:	d900      	bls.n	800158c <__aeabi_ddiv+0x42c>
 800158a:	e708      	b.n	800139e <__aeabi_ddiv+0x23e>
 800158c:	464b      	mov	r3, r9
 800158e:	07dc      	lsls	r4, r3, #31
 8001590:	0858      	lsrs	r0, r3, #1
 8001592:	4643      	mov	r3, r8
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	431c      	orrs	r4, r3
 8001598:	4643      	mov	r3, r8
 800159a:	07dd      	lsls	r5, r3, #31
 800159c:	e706      	b.n	80013ac <__aeabi_ddiv+0x24c>
 800159e:	f001 fa01 	bl	80029a4 <__clzsi2>
 80015a2:	2315      	movs	r3, #21
 80015a4:	469c      	mov	ip, r3
 80015a6:	4484      	add	ip, r0
 80015a8:	0002      	movs	r2, r0
 80015aa:	4663      	mov	r3, ip
 80015ac:	3220      	adds	r2, #32
 80015ae:	2b1c      	cmp	r3, #28
 80015b0:	dc00      	bgt.n	80015b4 <__aeabi_ddiv+0x454>
 80015b2:	e692      	b.n	80012da <__aeabi_ddiv+0x17a>
 80015b4:	0023      	movs	r3, r4
 80015b6:	3808      	subs	r0, #8
 80015b8:	4083      	lsls	r3, r0
 80015ba:	4699      	mov	r9, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	4698      	mov	r8, r3
 80015c0:	e69a      	b.n	80012f8 <__aeabi_ddiv+0x198>
 80015c2:	f001 f9ef 	bl	80029a4 <__clzsi2>
 80015c6:	0002      	movs	r2, r0
 80015c8:	0003      	movs	r3, r0
 80015ca:	3215      	adds	r2, #21
 80015cc:	3320      	adds	r3, #32
 80015ce:	2a1c      	cmp	r2, #28
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_ddiv+0x474>
 80015d2:	e65f      	b.n	8001294 <__aeabi_ddiv+0x134>
 80015d4:	9900      	ldr	r1, [sp, #0]
 80015d6:	3808      	subs	r0, #8
 80015d8:	4081      	lsls	r1, r0
 80015da:	2200      	movs	r2, #0
 80015dc:	468b      	mov	fp, r1
 80015de:	e666      	b.n	80012ae <__aeabi_ddiv+0x14e>
 80015e0:	2200      	movs	r2, #0
 80015e2:	002e      	movs	r6, r5
 80015e4:	2400      	movs	r4, #0
 80015e6:	4690      	mov	r8, r2
 80015e8:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <__aeabi_ddiv+0x620>)
 80015ea:	e625      	b.n	8001238 <__aeabi_ddiv+0xd8>
 80015ec:	002e      	movs	r6, r5
 80015ee:	2101      	movs	r1, #1
 80015f0:	1ac9      	subs	r1, r1, r3
 80015f2:	2938      	cmp	r1, #56	@ 0x38
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_ddiv+0x498>
 80015f6:	e61b      	b.n	8001230 <__aeabi_ddiv+0xd0>
 80015f8:	291f      	cmp	r1, #31
 80015fa:	dc7e      	bgt.n	80016fa <__aeabi_ddiv+0x59a>
 80015fc:	4861      	ldr	r0, [pc, #388]	@ (8001784 <__aeabi_ddiv+0x624>)
 80015fe:	0014      	movs	r4, r2
 8001600:	4450      	add	r0, sl
 8001602:	465b      	mov	r3, fp
 8001604:	4082      	lsls	r2, r0
 8001606:	4083      	lsls	r3, r0
 8001608:	40cc      	lsrs	r4, r1
 800160a:	1e50      	subs	r0, r2, #1
 800160c:	4182      	sbcs	r2, r0
 800160e:	4323      	orrs	r3, r4
 8001610:	431a      	orrs	r2, r3
 8001612:	465b      	mov	r3, fp
 8001614:	40cb      	lsrs	r3, r1
 8001616:	0751      	lsls	r1, r2, #29
 8001618:	d009      	beq.n	800162e <__aeabi_ddiv+0x4ce>
 800161a:	210f      	movs	r1, #15
 800161c:	4011      	ands	r1, r2
 800161e:	2904      	cmp	r1, #4
 8001620:	d005      	beq.n	800162e <__aeabi_ddiv+0x4ce>
 8001622:	1d11      	adds	r1, r2, #4
 8001624:	4291      	cmp	r1, r2
 8001626:	4192      	sbcs	r2, r2
 8001628:	4252      	negs	r2, r2
 800162a:	189b      	adds	r3, r3, r2
 800162c:	000a      	movs	r2, r1
 800162e:	0219      	lsls	r1, r3, #8
 8001630:	d400      	bmi.n	8001634 <__aeabi_ddiv+0x4d4>
 8001632:	e09b      	b.n	800176c <__aeabi_ddiv+0x60c>
 8001634:	2200      	movs	r2, #0
 8001636:	2301      	movs	r3, #1
 8001638:	2400      	movs	r4, #0
 800163a:	4690      	mov	r8, r2
 800163c:	e5fc      	b.n	8001238 <__aeabi_ddiv+0xd8>
 800163e:	210f      	movs	r1, #15
 8001640:	4011      	ands	r1, r2
 8001642:	2904      	cmp	r1, #4
 8001644:	d100      	bne.n	8001648 <__aeabi_ddiv+0x4e8>
 8001646:	e773      	b.n	8001530 <__aeabi_ddiv+0x3d0>
 8001648:	1d11      	adds	r1, r2, #4
 800164a:	4291      	cmp	r1, r2
 800164c:	4192      	sbcs	r2, r2
 800164e:	4252      	negs	r2, r2
 8001650:	002e      	movs	r6, r5
 8001652:	08c9      	lsrs	r1, r1, #3
 8001654:	4493      	add	fp, r2
 8001656:	e76d      	b.n	8001534 <__aeabi_ddiv+0x3d4>
 8001658:	9b00      	ldr	r3, [sp, #0]
 800165a:	3d01      	subs	r5, #1
 800165c:	469c      	mov	ip, r3
 800165e:	4461      	add	r1, ip
 8001660:	428b      	cmp	r3, r1
 8001662:	d900      	bls.n	8001666 <__aeabi_ddiv+0x506>
 8001664:	e72c      	b.n	80014c0 <__aeabi_ddiv+0x360>
 8001666:	428a      	cmp	r2, r1
 8001668:	d800      	bhi.n	800166c <__aeabi_ddiv+0x50c>
 800166a:	e729      	b.n	80014c0 <__aeabi_ddiv+0x360>
 800166c:	1e85      	subs	r5, r0, #2
 800166e:	4461      	add	r1, ip
 8001670:	e726      	b.n	80014c0 <__aeabi_ddiv+0x360>
 8001672:	9900      	ldr	r1, [sp, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	468c      	mov	ip, r1
 8001678:	4464      	add	r4, ip
 800167a:	42a1      	cmp	r1, r4
 800167c:	d900      	bls.n	8001680 <__aeabi_ddiv+0x520>
 800167e:	e72d      	b.n	80014dc <__aeabi_ddiv+0x37c>
 8001680:	42a2      	cmp	r2, r4
 8001682:	d800      	bhi.n	8001686 <__aeabi_ddiv+0x526>
 8001684:	e72a      	b.n	80014dc <__aeabi_ddiv+0x37c>
 8001686:	1e83      	subs	r3, r0, #2
 8001688:	4464      	add	r4, ip
 800168a:	e727      	b.n	80014dc <__aeabi_ddiv+0x37c>
 800168c:	4287      	cmp	r7, r0
 800168e:	d000      	beq.n	8001692 <__aeabi_ddiv+0x532>
 8001690:	e6fe      	b.n	8001490 <__aeabi_ddiv+0x330>
 8001692:	45a9      	cmp	r9, r5
 8001694:	d900      	bls.n	8001698 <__aeabi_ddiv+0x538>
 8001696:	e6fb      	b.n	8001490 <__aeabi_ddiv+0x330>
 8001698:	e6f5      	b.n	8001486 <__aeabi_ddiv+0x326>
 800169a:	42a2      	cmp	r2, r4
 800169c:	d800      	bhi.n	80016a0 <__aeabi_ddiv+0x540>
 800169e:	e6b9      	b.n	8001414 <__aeabi_ddiv+0x2b4>
 80016a0:	1e83      	subs	r3, r0, #2
 80016a2:	4464      	add	r4, ip
 80016a4:	e6b6      	b.n	8001414 <__aeabi_ddiv+0x2b4>
 80016a6:	428a      	cmp	r2, r1
 80016a8:	d800      	bhi.n	80016ac <__aeabi_ddiv+0x54c>
 80016aa:	e69f      	b.n	80013ec <__aeabi_ddiv+0x28c>
 80016ac:	46bc      	mov	ip, r7
 80016ae:	1e83      	subs	r3, r0, #2
 80016b0:	4698      	mov	r8, r3
 80016b2:	4461      	add	r1, ip
 80016b4:	e69a      	b.n	80013ec <__aeabi_ddiv+0x28c>
 80016b6:	000a      	movs	r2, r1
 80016b8:	4284      	cmp	r4, r0
 80016ba:	d000      	beq.n	80016be <__aeabi_ddiv+0x55e>
 80016bc:	e72e      	b.n	800151c <__aeabi_ddiv+0x3bc>
 80016be:	454b      	cmp	r3, r9
 80016c0:	d000      	beq.n	80016c4 <__aeabi_ddiv+0x564>
 80016c2:	e72b      	b.n	800151c <__aeabi_ddiv+0x3bc>
 80016c4:	0035      	movs	r5, r6
 80016c6:	e72c      	b.n	8001522 <__aeabi_ddiv+0x3c2>
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <__aeabi_ddiv+0x614>)
 80016ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001788 <__aeabi_ddiv+0x628>)
 80016cc:	4453      	add	r3, sl
 80016ce:	4592      	cmp	sl, r2
 80016d0:	db43      	blt.n	800175a <__aeabi_ddiv+0x5fa>
 80016d2:	2201      	movs	r2, #1
 80016d4:	2100      	movs	r1, #0
 80016d6:	4493      	add	fp, r2
 80016d8:	e72c      	b.n	8001534 <__aeabi_ddiv+0x3d4>
 80016da:	42ac      	cmp	r4, r5
 80016dc:	d800      	bhi.n	80016e0 <__aeabi_ddiv+0x580>
 80016de:	e6d7      	b.n	8001490 <__aeabi_ddiv+0x330>
 80016e0:	2302      	movs	r3, #2
 80016e2:	425b      	negs	r3, r3
 80016e4:	469c      	mov	ip, r3
 80016e6:	9900      	ldr	r1, [sp, #0]
 80016e8:	444d      	add	r5, r9
 80016ea:	454d      	cmp	r5, r9
 80016ec:	419b      	sbcs	r3, r3
 80016ee:	44e3      	add	fp, ip
 80016f0:	468c      	mov	ip, r1
 80016f2:	425b      	negs	r3, r3
 80016f4:	4463      	add	r3, ip
 80016f6:	18c0      	adds	r0, r0, r3
 80016f8:	e6cc      	b.n	8001494 <__aeabi_ddiv+0x334>
 80016fa:	201f      	movs	r0, #31
 80016fc:	4240      	negs	r0, r0
 80016fe:	1ac3      	subs	r3, r0, r3
 8001700:	4658      	mov	r0, fp
 8001702:	40d8      	lsrs	r0, r3
 8001704:	2920      	cmp	r1, #32
 8001706:	d004      	beq.n	8001712 <__aeabi_ddiv+0x5b2>
 8001708:	4659      	mov	r1, fp
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <__aeabi_ddiv+0x62c>)
 800170c:	4453      	add	r3, sl
 800170e:	4099      	lsls	r1, r3
 8001710:	430a      	orrs	r2, r1
 8001712:	1e53      	subs	r3, r2, #1
 8001714:	419a      	sbcs	r2, r3
 8001716:	2307      	movs	r3, #7
 8001718:	0019      	movs	r1, r3
 800171a:	4302      	orrs	r2, r0
 800171c:	2400      	movs	r4, #0
 800171e:	4011      	ands	r1, r2
 8001720:	4213      	tst	r3, r2
 8001722:	d009      	beq.n	8001738 <__aeabi_ddiv+0x5d8>
 8001724:	3308      	adds	r3, #8
 8001726:	4013      	ands	r3, r2
 8001728:	2b04      	cmp	r3, #4
 800172a:	d01d      	beq.n	8001768 <__aeabi_ddiv+0x608>
 800172c:	1d13      	adds	r3, r2, #4
 800172e:	4293      	cmp	r3, r2
 8001730:	4189      	sbcs	r1, r1
 8001732:	001a      	movs	r2, r3
 8001734:	4249      	negs	r1, r1
 8001736:	0749      	lsls	r1, r1, #29
 8001738:	08d2      	lsrs	r2, r2, #3
 800173a:	430a      	orrs	r2, r1
 800173c:	4690      	mov	r8, r2
 800173e:	2300      	movs	r3, #0
 8001740:	e57a      	b.n	8001238 <__aeabi_ddiv+0xd8>
 8001742:	4649      	mov	r1, r9
 8001744:	9f00      	ldr	r7, [sp, #0]
 8001746:	004d      	lsls	r5, r1, #1
 8001748:	454d      	cmp	r5, r9
 800174a:	4189      	sbcs	r1, r1
 800174c:	46bc      	mov	ip, r7
 800174e:	4249      	negs	r1, r1
 8001750:	4461      	add	r1, ip
 8001752:	46a9      	mov	r9, r5
 8001754:	3a02      	subs	r2, #2
 8001756:	1864      	adds	r4, r4, r1
 8001758:	e7ae      	b.n	80016b8 <__aeabi_ddiv+0x558>
 800175a:	2201      	movs	r2, #1
 800175c:	4252      	negs	r2, r2
 800175e:	e746      	b.n	80015ee <__aeabi_ddiv+0x48e>
 8001760:	4599      	cmp	r9, r3
 8001762:	d3ee      	bcc.n	8001742 <__aeabi_ddiv+0x5e2>
 8001764:	000a      	movs	r2, r1
 8001766:	e7aa      	b.n	80016be <__aeabi_ddiv+0x55e>
 8001768:	2100      	movs	r1, #0
 800176a:	e7e5      	b.n	8001738 <__aeabi_ddiv+0x5d8>
 800176c:	0759      	lsls	r1, r3, #29
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	0b1c      	lsrs	r4, r3, #12
 8001772:	e7e1      	b.n	8001738 <__aeabi_ddiv+0x5d8>
 8001774:	000003ff 	.word	0x000003ff
 8001778:	feffffff 	.word	0xfeffffff
 800177c:	000007fe 	.word	0x000007fe
 8001780:	000007ff 	.word	0x000007ff
 8001784:	0000041e 	.word	0x0000041e
 8001788:	fffffc02 	.word	0xfffffc02
 800178c:	0000043e 	.word	0x0000043e

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4657      	mov	r7, sl
 8001794:	46de      	mov	lr, fp
 8001796:	464e      	mov	r6, r9
 8001798:	4645      	mov	r5, r8
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	000d      	movs	r5, r1
 800179e:	0004      	movs	r4, r0
 80017a0:	0fe8      	lsrs	r0, r5, #31
 80017a2:	4683      	mov	fp, r0
 80017a4:	0309      	lsls	r1, r1, #12
 80017a6:	0fd8      	lsrs	r0, r3, #31
 80017a8:	0b09      	lsrs	r1, r1, #12
 80017aa:	4682      	mov	sl, r0
 80017ac:	4819      	ldr	r0, [pc, #100]	@ (8001814 <__eqdf2+0x84>)
 80017ae:	468c      	mov	ip, r1
 80017b0:	031f      	lsls	r7, r3, #12
 80017b2:	0069      	lsls	r1, r5, #1
 80017b4:	005e      	lsls	r6, r3, #1
 80017b6:	0d49      	lsrs	r1, r1, #21
 80017b8:	0b3f      	lsrs	r7, r7, #12
 80017ba:	0d76      	lsrs	r6, r6, #21
 80017bc:	4281      	cmp	r1, r0
 80017be:	d018      	beq.n	80017f2 <__eqdf2+0x62>
 80017c0:	4286      	cmp	r6, r0
 80017c2:	d00f      	beq.n	80017e4 <__eqdf2+0x54>
 80017c4:	2001      	movs	r0, #1
 80017c6:	42b1      	cmp	r1, r6
 80017c8:	d10d      	bne.n	80017e6 <__eqdf2+0x56>
 80017ca:	45bc      	cmp	ip, r7
 80017cc:	d10b      	bne.n	80017e6 <__eqdf2+0x56>
 80017ce:	4294      	cmp	r4, r2
 80017d0:	d109      	bne.n	80017e6 <__eqdf2+0x56>
 80017d2:	45d3      	cmp	fp, sl
 80017d4:	d01c      	beq.n	8001810 <__eqdf2+0x80>
 80017d6:	2900      	cmp	r1, #0
 80017d8:	d105      	bne.n	80017e6 <__eqdf2+0x56>
 80017da:	4660      	mov	r0, ip
 80017dc:	4320      	orrs	r0, r4
 80017de:	1e43      	subs	r3, r0, #1
 80017e0:	4198      	sbcs	r0, r3
 80017e2:	e000      	b.n	80017e6 <__eqdf2+0x56>
 80017e4:	2001      	movs	r0, #1
 80017e6:	bcf0      	pop	{r4, r5, r6, r7}
 80017e8:	46bb      	mov	fp, r7
 80017ea:	46b2      	mov	sl, r6
 80017ec:	46a9      	mov	r9, r5
 80017ee:	46a0      	mov	r8, r4
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	2001      	movs	r0, #1
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d1f6      	bne.n	80017e6 <__eqdf2+0x56>
 80017f8:	4661      	mov	r1, ip
 80017fa:	4339      	orrs	r1, r7
 80017fc:	000f      	movs	r7, r1
 80017fe:	4317      	orrs	r7, r2
 8001800:	4327      	orrs	r7, r4
 8001802:	d1f0      	bne.n	80017e6 <__eqdf2+0x56>
 8001804:	465b      	mov	r3, fp
 8001806:	4652      	mov	r2, sl
 8001808:	1a98      	subs	r0, r3, r2
 800180a:	1e43      	subs	r3, r0, #1
 800180c:	4198      	sbcs	r0, r3
 800180e:	e7ea      	b.n	80017e6 <__eqdf2+0x56>
 8001810:	2000      	movs	r0, #0
 8001812:	e7e8      	b.n	80017e6 <__eqdf2+0x56>
 8001814:	000007ff 	.word	0x000007ff

08001818 <__gedf2>:
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	4657      	mov	r7, sl
 800181c:	464e      	mov	r6, r9
 800181e:	4645      	mov	r5, r8
 8001820:	46de      	mov	lr, fp
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	000d      	movs	r5, r1
 8001826:	030e      	lsls	r6, r1, #12
 8001828:	0049      	lsls	r1, r1, #1
 800182a:	0d49      	lsrs	r1, r1, #21
 800182c:	468a      	mov	sl, r1
 800182e:	0fdf      	lsrs	r7, r3, #31
 8001830:	0fe9      	lsrs	r1, r5, #31
 8001832:	46bc      	mov	ip, r7
 8001834:	b083      	sub	sp, #12
 8001836:	4f2f      	ldr	r7, [pc, #188]	@ (80018f4 <__gedf2+0xdc>)
 8001838:	0004      	movs	r4, r0
 800183a:	4680      	mov	r8, r0
 800183c:	9101      	str	r1, [sp, #4]
 800183e:	0058      	lsls	r0, r3, #1
 8001840:	0319      	lsls	r1, r3, #12
 8001842:	4691      	mov	r9, r2
 8001844:	0b36      	lsrs	r6, r6, #12
 8001846:	0b09      	lsrs	r1, r1, #12
 8001848:	0d40      	lsrs	r0, r0, #21
 800184a:	45ba      	cmp	sl, r7
 800184c:	d01d      	beq.n	800188a <__gedf2+0x72>
 800184e:	42b8      	cmp	r0, r7
 8001850:	d00d      	beq.n	800186e <__gedf2+0x56>
 8001852:	4657      	mov	r7, sl
 8001854:	2f00      	cmp	r7, #0
 8001856:	d12a      	bne.n	80018ae <__gedf2+0x96>
 8001858:	4334      	orrs	r4, r6
 800185a:	2800      	cmp	r0, #0
 800185c:	d124      	bne.n	80018a8 <__gedf2+0x90>
 800185e:	430a      	orrs	r2, r1
 8001860:	d036      	beq.n	80018d0 <__gedf2+0xb8>
 8001862:	2c00      	cmp	r4, #0
 8001864:	d141      	bne.n	80018ea <__gedf2+0xd2>
 8001866:	4663      	mov	r3, ip
 8001868:	0058      	lsls	r0, r3, #1
 800186a:	3801      	subs	r0, #1
 800186c:	e015      	b.n	800189a <__gedf2+0x82>
 800186e:	4311      	orrs	r1, r2
 8001870:	d138      	bne.n	80018e4 <__gedf2+0xcc>
 8001872:	4653      	mov	r3, sl
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <__gedf2+0x64>
 8001878:	4326      	orrs	r6, r4
 800187a:	d0f4      	beq.n	8001866 <__gedf2+0x4e>
 800187c:	9b01      	ldr	r3, [sp, #4]
 800187e:	4563      	cmp	r3, ip
 8001880:	d107      	bne.n	8001892 <__gedf2+0x7a>
 8001882:	9b01      	ldr	r3, [sp, #4]
 8001884:	0058      	lsls	r0, r3, #1
 8001886:	3801      	subs	r0, #1
 8001888:	e007      	b.n	800189a <__gedf2+0x82>
 800188a:	4326      	orrs	r6, r4
 800188c:	d12a      	bne.n	80018e4 <__gedf2+0xcc>
 800188e:	4550      	cmp	r0, sl
 8001890:	d021      	beq.n	80018d6 <__gedf2+0xbe>
 8001892:	2001      	movs	r0, #1
 8001894:	9b01      	ldr	r3, [sp, #4]
 8001896:	425f      	negs	r7, r3
 8001898:	4338      	orrs	r0, r7
 800189a:	b003      	add	sp, #12
 800189c:	bcf0      	pop	{r4, r5, r6, r7}
 800189e:	46bb      	mov	fp, r7
 80018a0:	46b2      	mov	sl, r6
 80018a2:	46a9      	mov	r9, r5
 80018a4:	46a0      	mov	r8, r4
 80018a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a8:	2c00      	cmp	r4, #0
 80018aa:	d0dc      	beq.n	8001866 <__gedf2+0x4e>
 80018ac:	e7e6      	b.n	800187c <__gedf2+0x64>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d0ef      	beq.n	8001892 <__gedf2+0x7a>
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	4563      	cmp	r3, ip
 80018b6:	d1ec      	bne.n	8001892 <__gedf2+0x7a>
 80018b8:	4582      	cmp	sl, r0
 80018ba:	dcea      	bgt.n	8001892 <__gedf2+0x7a>
 80018bc:	dbe1      	blt.n	8001882 <__gedf2+0x6a>
 80018be:	428e      	cmp	r6, r1
 80018c0:	d8e7      	bhi.n	8001892 <__gedf2+0x7a>
 80018c2:	d1de      	bne.n	8001882 <__gedf2+0x6a>
 80018c4:	45c8      	cmp	r8, r9
 80018c6:	d8e4      	bhi.n	8001892 <__gedf2+0x7a>
 80018c8:	2000      	movs	r0, #0
 80018ca:	45c8      	cmp	r8, r9
 80018cc:	d2e5      	bcs.n	800189a <__gedf2+0x82>
 80018ce:	e7d8      	b.n	8001882 <__gedf2+0x6a>
 80018d0:	2c00      	cmp	r4, #0
 80018d2:	d0e2      	beq.n	800189a <__gedf2+0x82>
 80018d4:	e7dd      	b.n	8001892 <__gedf2+0x7a>
 80018d6:	4311      	orrs	r1, r2
 80018d8:	d104      	bne.n	80018e4 <__gedf2+0xcc>
 80018da:	9b01      	ldr	r3, [sp, #4]
 80018dc:	4563      	cmp	r3, ip
 80018de:	d1d8      	bne.n	8001892 <__gedf2+0x7a>
 80018e0:	2000      	movs	r0, #0
 80018e2:	e7da      	b.n	800189a <__gedf2+0x82>
 80018e4:	2002      	movs	r0, #2
 80018e6:	4240      	negs	r0, r0
 80018e8:	e7d7      	b.n	800189a <__gedf2+0x82>
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	4563      	cmp	r3, ip
 80018ee:	d0e6      	beq.n	80018be <__gedf2+0xa6>
 80018f0:	e7cf      	b.n	8001892 <__gedf2+0x7a>
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__ledf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	4657      	mov	r7, sl
 80018fc:	464e      	mov	r6, r9
 80018fe:	4645      	mov	r5, r8
 8001900:	46de      	mov	lr, fp
 8001902:	b5e0      	push	{r5, r6, r7, lr}
 8001904:	000d      	movs	r5, r1
 8001906:	030e      	lsls	r6, r1, #12
 8001908:	0049      	lsls	r1, r1, #1
 800190a:	0d49      	lsrs	r1, r1, #21
 800190c:	468a      	mov	sl, r1
 800190e:	0fdf      	lsrs	r7, r3, #31
 8001910:	0fe9      	lsrs	r1, r5, #31
 8001912:	46bc      	mov	ip, r7
 8001914:	b083      	sub	sp, #12
 8001916:	4f2e      	ldr	r7, [pc, #184]	@ (80019d0 <__ledf2+0xd8>)
 8001918:	0004      	movs	r4, r0
 800191a:	4680      	mov	r8, r0
 800191c:	9101      	str	r1, [sp, #4]
 800191e:	0058      	lsls	r0, r3, #1
 8001920:	0319      	lsls	r1, r3, #12
 8001922:	4691      	mov	r9, r2
 8001924:	0b36      	lsrs	r6, r6, #12
 8001926:	0b09      	lsrs	r1, r1, #12
 8001928:	0d40      	lsrs	r0, r0, #21
 800192a:	45ba      	cmp	sl, r7
 800192c:	d01e      	beq.n	800196c <__ledf2+0x74>
 800192e:	42b8      	cmp	r0, r7
 8001930:	d00d      	beq.n	800194e <__ledf2+0x56>
 8001932:	4657      	mov	r7, sl
 8001934:	2f00      	cmp	r7, #0
 8001936:	d127      	bne.n	8001988 <__ledf2+0x90>
 8001938:	4334      	orrs	r4, r6
 800193a:	2800      	cmp	r0, #0
 800193c:	d133      	bne.n	80019a6 <__ledf2+0xae>
 800193e:	430a      	orrs	r2, r1
 8001940:	d034      	beq.n	80019ac <__ledf2+0xb4>
 8001942:	2c00      	cmp	r4, #0
 8001944:	d140      	bne.n	80019c8 <__ledf2+0xd0>
 8001946:	4663      	mov	r3, ip
 8001948:	0058      	lsls	r0, r3, #1
 800194a:	3801      	subs	r0, #1
 800194c:	e015      	b.n	800197a <__ledf2+0x82>
 800194e:	4311      	orrs	r1, r2
 8001950:	d112      	bne.n	8001978 <__ledf2+0x80>
 8001952:	4653      	mov	r3, sl
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <__ledf2+0x64>
 8001958:	4326      	orrs	r6, r4
 800195a:	d0f4      	beq.n	8001946 <__ledf2+0x4e>
 800195c:	9b01      	ldr	r3, [sp, #4]
 800195e:	4563      	cmp	r3, ip
 8001960:	d01d      	beq.n	800199e <__ledf2+0xa6>
 8001962:	2001      	movs	r0, #1
 8001964:	9b01      	ldr	r3, [sp, #4]
 8001966:	425f      	negs	r7, r3
 8001968:	4338      	orrs	r0, r7
 800196a:	e006      	b.n	800197a <__ledf2+0x82>
 800196c:	4326      	orrs	r6, r4
 800196e:	d103      	bne.n	8001978 <__ledf2+0x80>
 8001970:	4550      	cmp	r0, sl
 8001972:	d1f6      	bne.n	8001962 <__ledf2+0x6a>
 8001974:	4311      	orrs	r1, r2
 8001976:	d01c      	beq.n	80019b2 <__ledf2+0xba>
 8001978:	2002      	movs	r0, #2
 800197a:	b003      	add	sp, #12
 800197c:	bcf0      	pop	{r4, r5, r6, r7}
 800197e:	46bb      	mov	fp, r7
 8001980:	46b2      	mov	sl, r6
 8001982:	46a9      	mov	r9, r5
 8001984:	46a0      	mov	r8, r4
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001988:	2800      	cmp	r0, #0
 800198a:	d0ea      	beq.n	8001962 <__ledf2+0x6a>
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	4563      	cmp	r3, ip
 8001990:	d1e7      	bne.n	8001962 <__ledf2+0x6a>
 8001992:	4582      	cmp	sl, r0
 8001994:	dce5      	bgt.n	8001962 <__ledf2+0x6a>
 8001996:	db02      	blt.n	800199e <__ledf2+0xa6>
 8001998:	428e      	cmp	r6, r1
 800199a:	d8e2      	bhi.n	8001962 <__ledf2+0x6a>
 800199c:	d00e      	beq.n	80019bc <__ledf2+0xc4>
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	0058      	lsls	r0, r3, #1
 80019a2:	3801      	subs	r0, #1
 80019a4:	e7e9      	b.n	800197a <__ledf2+0x82>
 80019a6:	2c00      	cmp	r4, #0
 80019a8:	d0cd      	beq.n	8001946 <__ledf2+0x4e>
 80019aa:	e7d7      	b.n	800195c <__ledf2+0x64>
 80019ac:	2c00      	cmp	r4, #0
 80019ae:	d0e4      	beq.n	800197a <__ledf2+0x82>
 80019b0:	e7d7      	b.n	8001962 <__ledf2+0x6a>
 80019b2:	9b01      	ldr	r3, [sp, #4]
 80019b4:	2000      	movs	r0, #0
 80019b6:	4563      	cmp	r3, ip
 80019b8:	d0df      	beq.n	800197a <__ledf2+0x82>
 80019ba:	e7d2      	b.n	8001962 <__ledf2+0x6a>
 80019bc:	45c8      	cmp	r8, r9
 80019be:	d8d0      	bhi.n	8001962 <__ledf2+0x6a>
 80019c0:	2000      	movs	r0, #0
 80019c2:	45c8      	cmp	r8, r9
 80019c4:	d2d9      	bcs.n	800197a <__ledf2+0x82>
 80019c6:	e7ea      	b.n	800199e <__ledf2+0xa6>
 80019c8:	9b01      	ldr	r3, [sp, #4]
 80019ca:	4563      	cmp	r3, ip
 80019cc:	d0e4      	beq.n	8001998 <__ledf2+0xa0>
 80019ce:	e7c8      	b.n	8001962 <__ledf2+0x6a>
 80019d0:	000007ff 	.word	0x000007ff

080019d4 <__aeabi_dmul>:
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	4657      	mov	r7, sl
 80019d8:	464e      	mov	r6, r9
 80019da:	46de      	mov	lr, fp
 80019dc:	4645      	mov	r5, r8
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	001f      	movs	r7, r3
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0b1b      	lsrs	r3, r3, #12
 80019e6:	0016      	movs	r6, r2
 80019e8:	469a      	mov	sl, r3
 80019ea:	0fca      	lsrs	r2, r1, #31
 80019ec:	004b      	lsls	r3, r1, #1
 80019ee:	0004      	movs	r4, r0
 80019f0:	4691      	mov	r9, r2
 80019f2:	b085      	sub	sp, #20
 80019f4:	0d5b      	lsrs	r3, r3, #21
 80019f6:	d100      	bne.n	80019fa <__aeabi_dmul+0x26>
 80019f8:	e1cf      	b.n	8001d9a <__aeabi_dmul+0x3c6>
 80019fa:	4acd      	ldr	r2, [pc, #820]	@ (8001d30 <__aeabi_dmul+0x35c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d055      	beq.n	8001aac <__aeabi_dmul+0xd8>
 8001a00:	4651      	mov	r1, sl
 8001a02:	0f42      	lsrs	r2, r0, #29
 8001a04:	00c9      	lsls	r1, r1, #3
 8001a06:	430a      	orrs	r2, r1
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0409      	lsls	r1, r1, #16
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	00c2      	lsls	r2, r0, #3
 8001a10:	4690      	mov	r8, r2
 8001a12:	4ac8      	ldr	r2, [pc, #800]	@ (8001d34 <__aeabi_dmul+0x360>)
 8001a14:	468a      	mov	sl, r1
 8001a16:	4693      	mov	fp, r2
 8001a18:	449b      	add	fp, r3
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	033c      	lsls	r4, r7, #12
 8001a22:	007b      	lsls	r3, r7, #1
 8001a24:	0ffa      	lsrs	r2, r7, #31
 8001a26:	9601      	str	r6, [sp, #4]
 8001a28:	0b24      	lsrs	r4, r4, #12
 8001a2a:	0d5b      	lsrs	r3, r3, #21
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dmul+0x5e>
 8001a30:	e188      	b.n	8001d44 <__aeabi_dmul+0x370>
 8001a32:	4abf      	ldr	r2, [pc, #764]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x66>
 8001a38:	e092      	b.n	8001b60 <__aeabi_dmul+0x18c>
 8001a3a:	4abe      	ldr	r2, [pc, #760]	@ (8001d34 <__aeabi_dmul+0x360>)
 8001a3c:	4694      	mov	ip, r2
 8001a3e:	4463      	add	r3, ip
 8001a40:	449b      	add	fp, r3
 8001a42:	2d0a      	cmp	r5, #10
 8001a44:	dc42      	bgt.n	8001acc <__aeabi_dmul+0xf8>
 8001a46:	00e4      	lsls	r4, r4, #3
 8001a48:	0f73      	lsrs	r3, r6, #29
 8001a4a:	4323      	orrs	r3, r4
 8001a4c:	2480      	movs	r4, #128	@ 0x80
 8001a4e:	4649      	mov	r1, r9
 8001a50:	0424      	lsls	r4, r4, #16
 8001a52:	431c      	orrs	r4, r3
 8001a54:	00f3      	lsls	r3, r6, #3
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	4059      	eors	r1, r3
 8001a5e:	b2cb      	uxtb	r3, r1
 8001a60:	9303      	str	r3, [sp, #12]
 8001a62:	2d02      	cmp	r5, #2
 8001a64:	dc00      	bgt.n	8001a68 <__aeabi_dmul+0x94>
 8001a66:	e094      	b.n	8001b92 <__aeabi_dmul+0x1be>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	40ab      	lsls	r3, r5
 8001a6c:	001d      	movs	r5, r3
 8001a6e:	23a6      	movs	r3, #166	@ 0xa6
 8001a70:	002a      	movs	r2, r5
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	401a      	ands	r2, r3
 8001a76:	421d      	tst	r5, r3
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dmul+0xa8>
 8001a7a:	e229      	b.n	8001ed0 <__aeabi_dmul+0x4fc>
 8001a7c:	2390      	movs	r3, #144	@ 0x90
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	421d      	tst	r5, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0xb2>
 8001a84:	e24d      	b.n	8001f22 <__aeabi_dmul+0x54e>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2480      	movs	r4, #128	@ 0x80
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	4ba8      	ldr	r3, [pc, #672]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001a90:	0010      	movs	r0, r2
 8001a92:	464a      	mov	r2, r9
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	4323      	orrs	r3, r4
 8001a98:	07d2      	lsls	r2, r2, #31
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	b005      	add	sp, #20
 8001aa0:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa2:	46bb      	mov	fp, r7
 8001aa4:	46b2      	mov	sl, r6
 8001aa6:	46a9      	mov	r9, r5
 8001aa8:	46a0      	mov	r8, r4
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aac:	4652      	mov	r2, sl
 8001aae:	4302      	orrs	r2, r0
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dmul+0xe2>
 8001ab4:	e1ac      	b.n	8001e10 <__aeabi_dmul+0x43c>
 8001ab6:	469b      	mov	fp, r3
 8001ab8:	2302      	movs	r3, #2
 8001aba:	4692      	mov	sl, r2
 8001abc:	2508      	movs	r5, #8
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	e7ae      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	46a2      	mov	sl, r4
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	9b01      	ldr	r3, [sp, #4]
 8001aca:	4698      	mov	r8, r3
 8001acc:	9b02      	ldr	r3, [sp, #8]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dmul+0x100>
 8001ad2:	e1ca      	b.n	8001e6a <__aeabi_dmul+0x496>
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dmul+0x106>
 8001ad8:	e192      	b.n	8001e00 <__aeabi_dmul+0x42c>
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d110      	bne.n	8001b00 <__aeabi_dmul+0x12c>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	e7d4      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	087b      	lsrs	r3, r7, #1
 8001aea:	403a      	ands	r2, r7
 8001aec:	4313      	orrs	r3, r2
 8001aee:	4652      	mov	r2, sl
 8001af0:	07d2      	lsls	r2, r2, #31
 8001af2:	4313      	orrs	r3, r2
 8001af4:	4698      	mov	r8, r3
 8001af6:	4653      	mov	r3, sl
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	469a      	mov	sl, r3
 8001afc:	9b03      	ldr	r3, [sp, #12]
 8001afe:	4699      	mov	r9, r3
 8001b00:	465b      	mov	r3, fp
 8001b02:	1c58      	adds	r0, r3, #1
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	445b      	add	r3, fp
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dmul+0x13c>
 8001b0e:	e1b1      	b.n	8001e74 <__aeabi_dmul+0x4a0>
 8001b10:	4642      	mov	r2, r8
 8001b12:	0752      	lsls	r2, r2, #29
 8001b14:	d00b      	beq.n	8001b2e <__aeabi_dmul+0x15a>
 8001b16:	220f      	movs	r2, #15
 8001b18:	4641      	mov	r1, r8
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	2a04      	cmp	r2, #4
 8001b1e:	d006      	beq.n	8001b2e <__aeabi_dmul+0x15a>
 8001b20:	4642      	mov	r2, r8
 8001b22:	1d11      	adds	r1, r2, #4
 8001b24:	4541      	cmp	r1, r8
 8001b26:	4192      	sbcs	r2, r2
 8001b28:	4688      	mov	r8, r1
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	4492      	add	sl, r2
 8001b2e:	4652      	mov	r2, sl
 8001b30:	01d2      	lsls	r2, r2, #7
 8001b32:	d506      	bpl.n	8001b42 <__aeabi_dmul+0x16e>
 8001b34:	4652      	mov	r2, sl
 8001b36:	4b80      	ldr	r3, [pc, #512]	@ (8001d38 <__aeabi_dmul+0x364>)
 8001b38:	401a      	ands	r2, r3
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	4692      	mov	sl, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	18c3      	adds	r3, r0, r3
 8001b42:	4a7e      	ldr	r2, [pc, #504]	@ (8001d3c <__aeabi_dmul+0x368>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_dmul+0x176>
 8001b48:	e18f      	b.n	8001e6a <__aeabi_dmul+0x496>
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	08d1      	lsrs	r1, r2, #3
 8001b4e:	4652      	mov	r2, sl
 8001b50:	0752      	lsls	r2, r2, #29
 8001b52:	430a      	orrs	r2, r1
 8001b54:	4651      	mov	r1, sl
 8001b56:	055b      	lsls	r3, r3, #21
 8001b58:	024c      	lsls	r4, r1, #9
 8001b5a:	0b24      	lsrs	r4, r4, #12
 8001b5c:	0d5b      	lsrs	r3, r3, #21
 8001b5e:	e797      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001b60:	4b73      	ldr	r3, [pc, #460]	@ (8001d30 <__aeabi_dmul+0x35c>)
 8001b62:	4326      	orrs	r6, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	44e3      	add	fp, ip
 8001b68:	2e00      	cmp	r6, #0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dmul+0x19a>
 8001b6c:	e16f      	b.n	8001e4e <__aeabi_dmul+0x47a>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	4649      	mov	r1, r9
 8001b72:	431d      	orrs	r5, r3
 8001b74:	9b00      	ldr	r3, [sp, #0]
 8001b76:	4059      	eors	r1, r3
 8001b78:	b2cb      	uxtb	r3, r1
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	2d0a      	cmp	r5, #10
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dmul+0x1ae>
 8001b80:	e133      	b.n	8001dea <__aeabi_dmul+0x416>
 8001b82:	2301      	movs	r3, #1
 8001b84:	40ab      	lsls	r3, r5
 8001b86:	001d      	movs	r5, r3
 8001b88:	2303      	movs	r3, #3
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2288      	movs	r2, #136	@ 0x88
 8001b8e:	422a      	tst	r2, r5
 8001b90:	d197      	bne.n	8001ac2 <__aeabi_dmul+0xee>
 8001b92:	4642      	mov	r2, r8
 8001b94:	4643      	mov	r3, r8
 8001b96:	0412      	lsls	r2, r2, #16
 8001b98:	0c12      	lsrs	r2, r2, #16
 8001b9a:	0016      	movs	r6, r2
 8001b9c:	9801      	ldr	r0, [sp, #4]
 8001b9e:	0c1d      	lsrs	r5, r3, #16
 8001ba0:	0c03      	lsrs	r3, r0, #16
 8001ba2:	0400      	lsls	r0, r0, #16
 8001ba4:	0c00      	lsrs	r0, r0, #16
 8001ba6:	4346      	muls	r6, r0
 8001ba8:	46b4      	mov	ip, r6
 8001baa:	001e      	movs	r6, r3
 8001bac:	436e      	muls	r6, r5
 8001bae:	9600      	str	r6, [sp, #0]
 8001bb0:	0016      	movs	r6, r2
 8001bb2:	0007      	movs	r7, r0
 8001bb4:	435e      	muls	r6, r3
 8001bb6:	4661      	mov	r1, ip
 8001bb8:	46b0      	mov	r8, r6
 8001bba:	436f      	muls	r7, r5
 8001bbc:	0c0e      	lsrs	r6, r1, #16
 8001bbe:	44b8      	add	r8, r7
 8001bc0:	4446      	add	r6, r8
 8001bc2:	42b7      	cmp	r7, r6
 8001bc4:	d905      	bls.n	8001bd2 <__aeabi_dmul+0x1fe>
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	0249      	lsls	r1, r1, #9
 8001bca:	4688      	mov	r8, r1
 8001bcc:	9f00      	ldr	r7, [sp, #0]
 8001bce:	4447      	add	r7, r8
 8001bd0:	9700      	str	r7, [sp, #0]
 8001bd2:	4661      	mov	r1, ip
 8001bd4:	0409      	lsls	r1, r1, #16
 8001bd6:	0c09      	lsrs	r1, r1, #16
 8001bd8:	0c37      	lsrs	r7, r6, #16
 8001bda:	0436      	lsls	r6, r6, #16
 8001bdc:	468c      	mov	ip, r1
 8001bde:	0031      	movs	r1, r6
 8001be0:	4461      	add	r1, ip
 8001be2:	9101      	str	r1, [sp, #4]
 8001be4:	0011      	movs	r1, r2
 8001be6:	0c26      	lsrs	r6, r4, #16
 8001be8:	0424      	lsls	r4, r4, #16
 8001bea:	0c24      	lsrs	r4, r4, #16
 8001bec:	4361      	muls	r1, r4
 8001bee:	468c      	mov	ip, r1
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	4369      	muls	r1, r5
 8001bf4:	4689      	mov	r9, r1
 8001bf6:	4661      	mov	r1, ip
 8001bf8:	0c09      	lsrs	r1, r1, #16
 8001bfa:	4688      	mov	r8, r1
 8001bfc:	4372      	muls	r2, r6
 8001bfe:	444a      	add	r2, r9
 8001c00:	4442      	add	r2, r8
 8001c02:	4375      	muls	r5, r6
 8001c04:	4591      	cmp	r9, r2
 8001c06:	d903      	bls.n	8001c10 <__aeabi_dmul+0x23c>
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0249      	lsls	r1, r1, #9
 8001c0c:	4688      	mov	r8, r1
 8001c0e:	4445      	add	r5, r8
 8001c10:	0c11      	lsrs	r1, r2, #16
 8001c12:	4688      	mov	r8, r1
 8001c14:	4661      	mov	r1, ip
 8001c16:	0409      	lsls	r1, r1, #16
 8001c18:	0c09      	lsrs	r1, r1, #16
 8001c1a:	468c      	mov	ip, r1
 8001c1c:	0412      	lsls	r2, r2, #16
 8001c1e:	4462      	add	r2, ip
 8001c20:	18b9      	adds	r1, r7, r2
 8001c22:	9102      	str	r1, [sp, #8]
 8001c24:	4651      	mov	r1, sl
 8001c26:	0c09      	lsrs	r1, r1, #16
 8001c28:	468c      	mov	ip, r1
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	040f      	lsls	r7, r1, #16
 8001c2e:	0c3f      	lsrs	r7, r7, #16
 8001c30:	0039      	movs	r1, r7
 8001c32:	4341      	muls	r1, r0
 8001c34:	4445      	add	r5, r8
 8001c36:	4688      	mov	r8, r1
 8001c38:	4661      	mov	r1, ip
 8001c3a:	4341      	muls	r1, r0
 8001c3c:	468a      	mov	sl, r1
 8001c3e:	4641      	mov	r1, r8
 8001c40:	4660      	mov	r0, ip
 8001c42:	0c09      	lsrs	r1, r1, #16
 8001c44:	4689      	mov	r9, r1
 8001c46:	4358      	muls	r0, r3
 8001c48:	437b      	muls	r3, r7
 8001c4a:	4453      	add	r3, sl
 8001c4c:	444b      	add	r3, r9
 8001c4e:	459a      	cmp	sl, r3
 8001c50:	d903      	bls.n	8001c5a <__aeabi_dmul+0x286>
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	4689      	mov	r9, r1
 8001c58:	4448      	add	r0, r9
 8001c5a:	0c19      	lsrs	r1, r3, #16
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	4641      	mov	r1, r8
 8001c60:	0409      	lsls	r1, r1, #16
 8001c62:	0c09      	lsrs	r1, r1, #16
 8001c64:	4688      	mov	r8, r1
 8001c66:	0039      	movs	r1, r7
 8001c68:	4361      	muls	r1, r4
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	4443      	add	r3, r8
 8001c6e:	4688      	mov	r8, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	434c      	muls	r4, r1
 8001c74:	4371      	muls	r1, r6
 8001c76:	468c      	mov	ip, r1
 8001c78:	4641      	mov	r1, r8
 8001c7a:	4377      	muls	r7, r6
 8001c7c:	0c0e      	lsrs	r6, r1, #16
 8001c7e:	193f      	adds	r7, r7, r4
 8001c80:	19f6      	adds	r6, r6, r7
 8001c82:	4448      	add	r0, r9
 8001c84:	42b4      	cmp	r4, r6
 8001c86:	d903      	bls.n	8001c90 <__aeabi_dmul+0x2bc>
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	0249      	lsls	r1, r1, #9
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	44cc      	add	ip, r9
 8001c90:	9902      	ldr	r1, [sp, #8]
 8001c92:	9f00      	ldr	r7, [sp, #0]
 8001c94:	4689      	mov	r9, r1
 8001c96:	0431      	lsls	r1, r6, #16
 8001c98:	444f      	add	r7, r9
 8001c9a:	4689      	mov	r9, r1
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	4297      	cmp	r7, r2
 8001ca0:	4192      	sbcs	r2, r2
 8001ca2:	040c      	lsls	r4, r1, #16
 8001ca4:	0c24      	lsrs	r4, r4, #16
 8001ca6:	444c      	add	r4, r9
 8001ca8:	18ff      	adds	r7, r7, r3
 8001caa:	4252      	negs	r2, r2
 8001cac:	1964      	adds	r4, r4, r5
 8001cae:	18a1      	adds	r1, r4, r2
 8001cb0:	429f      	cmp	r7, r3
 8001cb2:	419b      	sbcs	r3, r3
 8001cb4:	4688      	mov	r8, r1
 8001cb6:	4682      	mov	sl, r0
 8001cb8:	425b      	negs	r3, r3
 8001cba:	4699      	mov	r9, r3
 8001cbc:	4590      	cmp	r8, r2
 8001cbe:	4192      	sbcs	r2, r2
 8001cc0:	42ac      	cmp	r4, r5
 8001cc2:	41a4      	sbcs	r4, r4
 8001cc4:	44c2      	add	sl, r8
 8001cc6:	44d1      	add	r9, sl
 8001cc8:	4252      	negs	r2, r2
 8001cca:	4264      	negs	r4, r4
 8001ccc:	4314      	orrs	r4, r2
 8001cce:	4599      	cmp	r9, r3
 8001cd0:	419b      	sbcs	r3, r3
 8001cd2:	4582      	cmp	sl, r0
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	4252      	negs	r2, r2
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	464a      	mov	r2, r9
 8001cde:	0c36      	lsrs	r6, r6, #16
 8001ce0:	19a4      	adds	r4, r4, r6
 8001ce2:	18e3      	adds	r3, r4, r3
 8001ce4:	4463      	add	r3, ip
 8001ce6:	025b      	lsls	r3, r3, #9
 8001ce8:	0dd2      	lsrs	r2, r2, #23
 8001cea:	431a      	orrs	r2, r3
 8001cec:	9901      	ldr	r1, [sp, #4]
 8001cee:	4692      	mov	sl, r2
 8001cf0:	027a      	lsls	r2, r7, #9
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	1e50      	subs	r0, r2, #1
 8001cf6:	4182      	sbcs	r2, r0
 8001cf8:	0dff      	lsrs	r7, r7, #23
 8001cfa:	4317      	orrs	r7, r2
 8001cfc:	464a      	mov	r2, r9
 8001cfe:	0252      	lsls	r2, r2, #9
 8001d00:	4317      	orrs	r7, r2
 8001d02:	46b8      	mov	r8, r7
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	d500      	bpl.n	8001d0a <__aeabi_dmul+0x336>
 8001d08:	e6ed      	b.n	8001ae6 <__aeabi_dmul+0x112>
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <__aeabi_dmul+0x36c>)
 8001d0c:	9a03      	ldr	r2, [sp, #12]
 8001d0e:	445b      	add	r3, fp
 8001d10:	4691      	mov	r9, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dc00      	bgt.n	8001d18 <__aeabi_dmul+0x344>
 8001d16:	e0ac      	b.n	8001e72 <__aeabi_dmul+0x49e>
 8001d18:	003a      	movs	r2, r7
 8001d1a:	0752      	lsls	r2, r2, #29
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dmul+0x34c>
 8001d1e:	e710      	b.n	8001b42 <__aeabi_dmul+0x16e>
 8001d20:	220f      	movs	r2, #15
 8001d22:	4658      	mov	r0, fp
 8001d24:	403a      	ands	r2, r7
 8001d26:	2a04      	cmp	r2, #4
 8001d28:	d000      	beq.n	8001d2c <__aeabi_dmul+0x358>
 8001d2a:	e6f9      	b.n	8001b20 <__aeabi_dmul+0x14c>
 8001d2c:	e709      	b.n	8001b42 <__aeabi_dmul+0x16e>
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff
 8001d34:	fffffc01 	.word	0xfffffc01
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	000003ff 	.word	0x000003ff
 8001d44:	0022      	movs	r2, r4
 8001d46:	4332      	orrs	r2, r6
 8001d48:	d06f      	beq.n	8001e2a <__aeabi_dmul+0x456>
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dmul+0x37c>
 8001d4e:	e0c2      	b.n	8001ed6 <__aeabi_dmul+0x502>
 8001d50:	0020      	movs	r0, r4
 8001d52:	f000 fe27 	bl	80029a4 <__clzsi2>
 8001d56:	0002      	movs	r2, r0
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3a0b      	subs	r2, #11
 8001d5c:	201d      	movs	r0, #29
 8001d5e:	1a82      	subs	r2, r0, r2
 8001d60:	0030      	movs	r0, r6
 8001d62:	0019      	movs	r1, r3
 8001d64:	40d0      	lsrs	r0, r2
 8001d66:	3908      	subs	r1, #8
 8001d68:	408c      	lsls	r4, r1
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	4322      	orrs	r2, r4
 8001d6e:	0034      	movs	r4, r6
 8001d70:	408c      	lsls	r4, r1
 8001d72:	4659      	mov	r1, fp
 8001d74:	1acb      	subs	r3, r1, r3
 8001d76:	4986      	ldr	r1, [pc, #536]	@ (8001f90 <__aeabi_dmul+0x5bc>)
 8001d78:	468b      	mov	fp, r1
 8001d7a:	449b      	add	fp, r3
 8001d7c:	2d0a      	cmp	r5, #10
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dmul+0x3ae>
 8001d80:	e6a4      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001d82:	4649      	mov	r1, r9
 8001d84:	9b00      	ldr	r3, [sp, #0]
 8001d86:	9401      	str	r4, [sp, #4]
 8001d88:	4059      	eors	r1, r3
 8001d8a:	b2cb      	uxtb	r3, r1
 8001d8c:	0014      	movs	r4, r2
 8001d8e:	2000      	movs	r0, #0
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	2d02      	cmp	r5, #2
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dmul+0x3c4>
 8001d96:	e667      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001d98:	e6fb      	b.n	8001b92 <__aeabi_dmul+0x1be>
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	4698      	mov	r8, r3
 8001da0:	d03c      	beq.n	8001e1c <__aeabi_dmul+0x448>
 8001da2:	4653      	mov	r3, sl
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d100      	bne.n	8001daa <__aeabi_dmul+0x3d6>
 8001da8:	e0a3      	b.n	8001ef2 <__aeabi_dmul+0x51e>
 8001daa:	4650      	mov	r0, sl
 8001dac:	f000 fdfa 	bl	80029a4 <__clzsi2>
 8001db0:	230b      	movs	r3, #11
 8001db2:	425b      	negs	r3, r3
 8001db4:	469c      	mov	ip, r3
 8001db6:	0002      	movs	r2, r0
 8001db8:	4484      	add	ip, r0
 8001dba:	0011      	movs	r1, r2
 8001dbc:	4650      	mov	r0, sl
 8001dbe:	3908      	subs	r1, #8
 8001dc0:	4088      	lsls	r0, r1
 8001dc2:	231d      	movs	r3, #29
 8001dc4:	4680      	mov	r8, r0
 8001dc6:	4660      	mov	r0, ip
 8001dc8:	1a1b      	subs	r3, r3, r0
 8001dca:	0020      	movs	r0, r4
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	0003      	movs	r3, r0
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4303      	orrs	r3, r0
 8001dd4:	469a      	mov	sl, r3
 8001dd6:	0023      	movs	r3, r4
 8001dd8:	408b      	lsls	r3, r1
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <__aeabi_dmul+0x5bc>)
 8001dde:	2500      	movs	r5, #0
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	e61a      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001dea:	2d0f      	cmp	r5, #15
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dmul+0x41c>
 8001dee:	e0c9      	b.n	8001f84 <__aeabi_dmul+0x5b0>
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	4652      	mov	r2, sl
 8001df4:	031b      	lsls	r3, r3, #12
 8001df6:	421a      	tst	r2, r3
 8001df8:	d002      	beq.n	8001e00 <__aeabi_dmul+0x42c>
 8001dfa:	421c      	tst	r4, r3
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dmul+0x42c>
 8001dfe:	e092      	b.n	8001f26 <__aeabi_dmul+0x552>
 8001e00:	2480      	movs	r4, #128	@ 0x80
 8001e02:	4653      	mov	r3, sl
 8001e04:	0324      	lsls	r4, r4, #12
 8001e06:	431c      	orrs	r4, r3
 8001e08:	0324      	lsls	r4, r4, #12
 8001e0a:	4642      	mov	r2, r8
 8001e0c:	0b24      	lsrs	r4, r4, #12
 8001e0e:	e63e      	b.n	8001a8e <__aeabi_dmul+0xba>
 8001e10:	469b      	mov	fp, r3
 8001e12:	2303      	movs	r3, #3
 8001e14:	4680      	mov	r8, r0
 8001e16:	250c      	movs	r5, #12
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	e601      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	469a      	mov	sl, r3
 8001e20:	469b      	mov	fp, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	2504      	movs	r5, #4
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	e5fa      	b.n	8001a20 <__aeabi_dmul+0x4c>
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	430d      	orrs	r5, r1
 8001e2e:	2d0a      	cmp	r5, #10
 8001e30:	dd00      	ble.n	8001e34 <__aeabi_dmul+0x460>
 8001e32:	e64b      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001e34:	4649      	mov	r1, r9
 8001e36:	9800      	ldr	r0, [sp, #0]
 8001e38:	4041      	eors	r1, r0
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	9103      	str	r1, [sp, #12]
 8001e3e:	2d02      	cmp	r5, #2
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_dmul+0x470>
 8001e42:	e096      	b.n	8001f72 <__aeabi_dmul+0x59e>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2400      	movs	r4, #0
 8001e48:	2001      	movs	r0, #1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	e60c      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001e4e:	4649      	mov	r1, r9
 8001e50:	2302      	movs	r3, #2
 8001e52:	9a00      	ldr	r2, [sp, #0]
 8001e54:	432b      	orrs	r3, r5
 8001e56:	4051      	eors	r1, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	9203      	str	r2, [sp, #12]
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	dd00      	ble.n	8001e62 <__aeabi_dmul+0x48e>
 8001e60:	e634      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d157      	bne.n	8001f16 <__aeabi_dmul+0x542>
 8001e66:	9b03      	ldr	r3, [sp, #12]
 8001e68:	4699      	mov	r9, r3
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <__aeabi_dmul+0x5c0>)
 8001e70:	e60e      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001e72:	4658      	mov	r0, fp
 8001e74:	2101      	movs	r1, #1
 8001e76:	1ac9      	subs	r1, r1, r3
 8001e78:	2938      	cmp	r1, #56	@ 0x38
 8001e7a:	dd00      	ble.n	8001e7e <__aeabi_dmul+0x4aa>
 8001e7c:	e62f      	b.n	8001ade <__aeabi_dmul+0x10a>
 8001e7e:	291f      	cmp	r1, #31
 8001e80:	dd56      	ble.n	8001f30 <__aeabi_dmul+0x55c>
 8001e82:	221f      	movs	r2, #31
 8001e84:	4654      	mov	r4, sl
 8001e86:	4252      	negs	r2, r2
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	40dc      	lsrs	r4, r3
 8001e8c:	2920      	cmp	r1, #32
 8001e8e:	d007      	beq.n	8001ea0 <__aeabi_dmul+0x4cc>
 8001e90:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <__aeabi_dmul+0x5c4>)
 8001e92:	4642      	mov	r2, r8
 8001e94:	469c      	mov	ip, r3
 8001e96:	4653      	mov	r3, sl
 8001e98:	4460      	add	r0, ip
 8001e9a:	4083      	lsls	r3, r0
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	2107      	movs	r1, #7
 8001ea4:	1e53      	subs	r3, r2, #1
 8001ea6:	419a      	sbcs	r2, r3
 8001ea8:	000b      	movs	r3, r1
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4013      	ands	r3, r2
 8001eae:	2400      	movs	r4, #0
 8001eb0:	4211      	tst	r1, r2
 8001eb2:	d009      	beq.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d05d      	beq.n	8001f78 <__aeabi_dmul+0x5a4>
 8001ebc:	1d11      	adds	r1, r2, #4
 8001ebe:	4291      	cmp	r1, r2
 8001ec0:	419b      	sbcs	r3, r3
 8001ec2:	000a      	movs	r2, r1
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	075b      	lsls	r3, r3, #29
 8001ec8:	08d2      	lsrs	r2, r2, #3
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e5df      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001ed0:	9b03      	ldr	r3, [sp, #12]
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	e5fa      	b.n	8001acc <__aeabi_dmul+0xf8>
 8001ed6:	9801      	ldr	r0, [sp, #4]
 8001ed8:	f000 fd64 	bl	80029a4 <__clzsi2>
 8001edc:	0002      	movs	r2, r0
 8001ede:	0003      	movs	r3, r0
 8001ee0:	3215      	adds	r2, #21
 8001ee2:	3320      	adds	r3, #32
 8001ee4:	2a1c      	cmp	r2, #28
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_dmul+0x516>
 8001ee8:	e738      	b.n	8001d5c <__aeabi_dmul+0x388>
 8001eea:	9a01      	ldr	r2, [sp, #4]
 8001eec:	3808      	subs	r0, #8
 8001eee:	4082      	lsls	r2, r0
 8001ef0:	e73f      	b.n	8001d72 <__aeabi_dmul+0x39e>
 8001ef2:	f000 fd57 	bl	80029a4 <__clzsi2>
 8001ef6:	2315      	movs	r3, #21
 8001ef8:	469c      	mov	ip, r3
 8001efa:	4484      	add	ip, r0
 8001efc:	0002      	movs	r2, r0
 8001efe:	4663      	mov	r3, ip
 8001f00:	3220      	adds	r2, #32
 8001f02:	2b1c      	cmp	r3, #28
 8001f04:	dc00      	bgt.n	8001f08 <__aeabi_dmul+0x534>
 8001f06:	e758      	b.n	8001dba <__aeabi_dmul+0x3e6>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	0023      	movs	r3, r4
 8001f0e:	3808      	subs	r0, #8
 8001f10:	4083      	lsls	r3, r0
 8001f12:	469a      	mov	sl, r3
 8001f14:	e762      	b.n	8001ddc <__aeabi_dmul+0x408>
 8001f16:	001d      	movs	r5, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	e5a2      	b.n	8001a68 <__aeabi_dmul+0x94>
 8001f22:	9002      	str	r0, [sp, #8]
 8001f24:	e632      	b.n	8001b8c <__aeabi_dmul+0x1b8>
 8001f26:	431c      	orrs	r4, r3
 8001f28:	9b00      	ldr	r3, [sp, #0]
 8001f2a:	9a01      	ldr	r2, [sp, #4]
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	e5ae      	b.n	8001a8e <__aeabi_dmul+0xba>
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <__aeabi_dmul+0x5c8>)
 8001f32:	4652      	mov	r2, sl
 8001f34:	18c3      	adds	r3, r0, r3
 8001f36:	4640      	mov	r0, r8
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	40c8      	lsrs	r0, r1
 8001f3c:	4302      	orrs	r2, r0
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4098      	lsls	r0, r3
 8001f42:	0003      	movs	r3, r0
 8001f44:	1e58      	subs	r0, r3, #1
 8001f46:	4183      	sbcs	r3, r0
 8001f48:	4654      	mov	r4, sl
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	40cc      	lsrs	r4, r1
 8001f4e:	0753      	lsls	r3, r2, #29
 8001f50:	d009      	beq.n	8001f66 <__aeabi_dmul+0x592>
 8001f52:	230f      	movs	r3, #15
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d005      	beq.n	8001f66 <__aeabi_dmul+0x592>
 8001f5a:	1d13      	adds	r3, r2, #4
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	4192      	sbcs	r2, r2
 8001f60:	4252      	negs	r2, r2
 8001f62:	18a4      	adds	r4, r4, r2
 8001f64:	001a      	movs	r2, r3
 8001f66:	0223      	lsls	r3, r4, #8
 8001f68:	d508      	bpl.n	8001f7c <__aeabi_dmul+0x5a8>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	e58e      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001f72:	4689      	mov	r9, r1
 8001f74:	2400      	movs	r4, #0
 8001f76:	e58b      	b.n	8001a90 <__aeabi_dmul+0xbc>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e7a5      	b.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001f7c:	0763      	lsls	r3, r4, #29
 8001f7e:	0264      	lsls	r4, r4, #9
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	e7a1      	b.n	8001ec8 <__aeabi_dmul+0x4f4>
 8001f84:	9b00      	ldr	r3, [sp, #0]
 8001f86:	46a2      	mov	sl, r4
 8001f88:	4699      	mov	r9, r3
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	e737      	b.n	8001e00 <__aeabi_dmul+0x42c>
 8001f90:	fffffc0d 	.word	0xfffffc0d
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	0000043e 	.word	0x0000043e
 8001f9c:	0000041e 	.word	0x0000041e

08001fa0 <__aeabi_dsub>:
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	4657      	mov	r7, sl
 8001fa4:	464e      	mov	r6, r9
 8001fa6:	4645      	mov	r5, r8
 8001fa8:	46de      	mov	lr, fp
 8001faa:	b5e0      	push	{r5, r6, r7, lr}
 8001fac:	b083      	sub	sp, #12
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	9101      	str	r1, [sp, #4]
 8001fb2:	030c      	lsls	r4, r1, #12
 8001fb4:	004d      	lsls	r5, r1, #1
 8001fb6:	0fce      	lsrs	r6, r1, #31
 8001fb8:	0a61      	lsrs	r1, r4, #9
 8001fba:	9c00      	ldr	r4, [sp, #0]
 8001fbc:	005f      	lsls	r7, r3, #1
 8001fbe:	0f64      	lsrs	r4, r4, #29
 8001fc0:	430c      	orrs	r4, r1
 8001fc2:	9900      	ldr	r1, [sp, #0]
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	00c8      	lsls	r0, r1, #3
 8001fca:	0319      	lsls	r1, r3, #12
 8001fcc:	0d7b      	lsrs	r3, r7, #21
 8001fce:	4699      	mov	r9, r3
 8001fd0:	9b01      	ldr	r3, [sp, #4]
 8001fd2:	4fcc      	ldr	r7, [pc, #816]	@ (8002304 <__aeabi_dsub+0x364>)
 8001fd4:	0fdb      	lsrs	r3, r3, #31
 8001fd6:	469c      	mov	ip, r3
 8001fd8:	0a4b      	lsrs	r3, r1, #9
 8001fda:	9900      	ldr	r1, [sp, #0]
 8001fdc:	4680      	mov	r8, r0
 8001fde:	0f49      	lsrs	r1, r1, #29
 8001fe0:	4319      	orrs	r1, r3
 8001fe2:	9b00      	ldr	r3, [sp, #0]
 8001fe4:	468b      	mov	fp, r1
 8001fe6:	00da      	lsls	r2, r3, #3
 8001fe8:	4692      	mov	sl, r2
 8001fea:	0d6d      	lsrs	r5, r5, #21
 8001fec:	45b9      	cmp	r9, r7
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x52>
 8001ff0:	e0bf      	b.n	8002172 <__aeabi_dsub+0x1d2>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4661      	mov	r1, ip
 8001ff6:	4059      	eors	r1, r3
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	468c      	mov	ip, r1
 8001ffc:	1aeb      	subs	r3, r5, r3
 8001ffe:	428e      	cmp	r6, r1
 8002000:	d075      	beq.n	80020ee <__aeabi_dsub+0x14e>
 8002002:	2b00      	cmp	r3, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x68>
 8002006:	e2a3      	b.n	8002550 <__aeabi_dsub+0x5b0>
 8002008:	4649      	mov	r1, r9
 800200a:	2900      	cmp	r1, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x70>
 800200e:	e0ce      	b.n	80021ae <__aeabi_dsub+0x20e>
 8002010:	42bd      	cmp	r5, r7
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x76>
 8002014:	e200      	b.n	8002418 <__aeabi_dsub+0x478>
 8002016:	2701      	movs	r7, #1
 8002018:	2b38      	cmp	r3, #56	@ 0x38
 800201a:	dc19      	bgt.n	8002050 <__aeabi_dsub+0xb0>
 800201c:	2780      	movs	r7, #128	@ 0x80
 800201e:	4659      	mov	r1, fp
 8002020:	043f      	lsls	r7, r7, #16
 8002022:	4339      	orrs	r1, r7
 8002024:	468b      	mov	fp, r1
 8002026:	2b1f      	cmp	r3, #31
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x8c>
 800202a:	e1fa      	b.n	8002422 <__aeabi_dsub+0x482>
 800202c:	2720      	movs	r7, #32
 800202e:	1af9      	subs	r1, r7, r3
 8002030:	468c      	mov	ip, r1
 8002032:	4659      	mov	r1, fp
 8002034:	4667      	mov	r7, ip
 8002036:	40b9      	lsls	r1, r7
 8002038:	000f      	movs	r7, r1
 800203a:	0011      	movs	r1, r2
 800203c:	40d9      	lsrs	r1, r3
 800203e:	430f      	orrs	r7, r1
 8002040:	4661      	mov	r1, ip
 8002042:	408a      	lsls	r2, r1
 8002044:	1e51      	subs	r1, r2, #1
 8002046:	418a      	sbcs	r2, r1
 8002048:	4659      	mov	r1, fp
 800204a:	40d9      	lsrs	r1, r3
 800204c:	4317      	orrs	r7, r2
 800204e:	1a64      	subs	r4, r4, r1
 8002050:	1bc7      	subs	r7, r0, r7
 8002052:	42b8      	cmp	r0, r7
 8002054:	4180      	sbcs	r0, r0
 8002056:	4240      	negs	r0, r0
 8002058:	1a24      	subs	r4, r4, r0
 800205a:	0223      	lsls	r3, r4, #8
 800205c:	d400      	bmi.n	8002060 <__aeabi_dsub+0xc0>
 800205e:	e140      	b.n	80022e2 <__aeabi_dsub+0x342>
 8002060:	0264      	lsls	r4, r4, #9
 8002062:	0a64      	lsrs	r4, r4, #9
 8002064:	2c00      	cmp	r4, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0xca>
 8002068:	e154      	b.n	8002314 <__aeabi_dsub+0x374>
 800206a:	0020      	movs	r0, r4
 800206c:	f000 fc9a 	bl	80029a4 <__clzsi2>
 8002070:	0003      	movs	r3, r0
 8002072:	3b08      	subs	r3, #8
 8002074:	2120      	movs	r1, #32
 8002076:	0038      	movs	r0, r7
 8002078:	1aca      	subs	r2, r1, r3
 800207a:	40d0      	lsrs	r0, r2
 800207c:	409c      	lsls	r4, r3
 800207e:	0002      	movs	r2, r0
 8002080:	409f      	lsls	r7, r3
 8002082:	4322      	orrs	r2, r4
 8002084:	429d      	cmp	r5, r3
 8002086:	dd00      	ble.n	800208a <__aeabi_dsub+0xea>
 8002088:	e1a6      	b.n	80023d8 <__aeabi_dsub+0x438>
 800208a:	1b58      	subs	r0, r3, r5
 800208c:	3001      	adds	r0, #1
 800208e:	1a09      	subs	r1, r1, r0
 8002090:	003c      	movs	r4, r7
 8002092:	408f      	lsls	r7, r1
 8002094:	40c4      	lsrs	r4, r0
 8002096:	1e7b      	subs	r3, r7, #1
 8002098:	419f      	sbcs	r7, r3
 800209a:	0013      	movs	r3, r2
 800209c:	408b      	lsls	r3, r1
 800209e:	4327      	orrs	r7, r4
 80020a0:	431f      	orrs	r7, r3
 80020a2:	40c2      	lsrs	r2, r0
 80020a4:	003b      	movs	r3, r7
 80020a6:	0014      	movs	r4, r2
 80020a8:	2500      	movs	r5, #0
 80020aa:	4313      	orrs	r3, r2
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x110>
 80020ae:	e1f7      	b.n	80024a0 <__aeabi_dsub+0x500>
 80020b0:	077b      	lsls	r3, r7, #29
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x116>
 80020b4:	e377      	b.n	80027a6 <__aeabi_dsub+0x806>
 80020b6:	230f      	movs	r3, #15
 80020b8:	0038      	movs	r0, r7
 80020ba:	403b      	ands	r3, r7
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d004      	beq.n	80020ca <__aeabi_dsub+0x12a>
 80020c0:	1d38      	adds	r0, r7, #4
 80020c2:	42b8      	cmp	r0, r7
 80020c4:	41bf      	sbcs	r7, r7
 80020c6:	427f      	negs	r7, r7
 80020c8:	19e4      	adds	r4, r4, r7
 80020ca:	0223      	lsls	r3, r4, #8
 80020cc:	d400      	bmi.n	80020d0 <__aeabi_dsub+0x130>
 80020ce:	e368      	b.n	80027a2 <__aeabi_dsub+0x802>
 80020d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002304 <__aeabi_dsub+0x364>)
 80020d2:	3501      	adds	r5, #1
 80020d4:	429d      	cmp	r5, r3
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x13a>
 80020d8:	e0f4      	b.n	80022c4 <__aeabi_dsub+0x324>
 80020da:	4b8b      	ldr	r3, [pc, #556]	@ (8002308 <__aeabi_dsub+0x368>)
 80020dc:	056d      	lsls	r5, r5, #21
 80020de:	401c      	ands	r4, r3
 80020e0:	0d6d      	lsrs	r5, r5, #21
 80020e2:	0767      	lsls	r7, r4, #29
 80020e4:	08c0      	lsrs	r0, r0, #3
 80020e6:	0264      	lsls	r4, r4, #9
 80020e8:	4307      	orrs	r7, r0
 80020ea:	0b24      	lsrs	r4, r4, #12
 80020ec:	e0ec      	b.n	80022c8 <__aeabi_dsub+0x328>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	dc00      	bgt.n	80020f4 <__aeabi_dsub+0x154>
 80020f2:	e329      	b.n	8002748 <__aeabi_dsub+0x7a8>
 80020f4:	4649      	mov	r1, r9
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d000      	beq.n	80020fc <__aeabi_dsub+0x15c>
 80020fa:	e0d6      	b.n	80022aa <__aeabi_dsub+0x30a>
 80020fc:	4659      	mov	r1, fp
 80020fe:	4311      	orrs	r1, r2
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x164>
 8002102:	e12e      	b.n	8002362 <__aeabi_dsub+0x3c2>
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x16c>
 800210a:	e1e6      	b.n	80024da <__aeabi_dsub+0x53a>
 800210c:	42bb      	cmp	r3, r7
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x172>
 8002110:	e182      	b.n	8002418 <__aeabi_dsub+0x478>
 8002112:	2701      	movs	r7, #1
 8002114:	000b      	movs	r3, r1
 8002116:	2938      	cmp	r1, #56	@ 0x38
 8002118:	dc14      	bgt.n	8002144 <__aeabi_dsub+0x1a4>
 800211a:	2b1f      	cmp	r3, #31
 800211c:	dd00      	ble.n	8002120 <__aeabi_dsub+0x180>
 800211e:	e23c      	b.n	800259a <__aeabi_dsub+0x5fa>
 8002120:	2720      	movs	r7, #32
 8002122:	1af9      	subs	r1, r7, r3
 8002124:	468c      	mov	ip, r1
 8002126:	4659      	mov	r1, fp
 8002128:	4667      	mov	r7, ip
 800212a:	40b9      	lsls	r1, r7
 800212c:	000f      	movs	r7, r1
 800212e:	0011      	movs	r1, r2
 8002130:	40d9      	lsrs	r1, r3
 8002132:	430f      	orrs	r7, r1
 8002134:	4661      	mov	r1, ip
 8002136:	408a      	lsls	r2, r1
 8002138:	1e51      	subs	r1, r2, #1
 800213a:	418a      	sbcs	r2, r1
 800213c:	4659      	mov	r1, fp
 800213e:	40d9      	lsrs	r1, r3
 8002140:	4317      	orrs	r7, r2
 8002142:	1864      	adds	r4, r4, r1
 8002144:	183f      	adds	r7, r7, r0
 8002146:	4287      	cmp	r7, r0
 8002148:	4180      	sbcs	r0, r0
 800214a:	4240      	negs	r0, r0
 800214c:	1824      	adds	r4, r4, r0
 800214e:	0223      	lsls	r3, r4, #8
 8002150:	d400      	bmi.n	8002154 <__aeabi_dsub+0x1b4>
 8002152:	e0c6      	b.n	80022e2 <__aeabi_dsub+0x342>
 8002154:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <__aeabi_dsub+0x364>)
 8002156:	3501      	adds	r5, #1
 8002158:	429d      	cmp	r5, r3
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x1be>
 800215c:	e0b2      	b.n	80022c4 <__aeabi_dsub+0x324>
 800215e:	2101      	movs	r1, #1
 8002160:	4b69      	ldr	r3, [pc, #420]	@ (8002308 <__aeabi_dsub+0x368>)
 8002162:	087a      	lsrs	r2, r7, #1
 8002164:	401c      	ands	r4, r3
 8002166:	4039      	ands	r1, r7
 8002168:	430a      	orrs	r2, r1
 800216a:	07e7      	lsls	r7, r4, #31
 800216c:	4317      	orrs	r7, r2
 800216e:	0864      	lsrs	r4, r4, #1
 8002170:	e79e      	b.n	80020b0 <__aeabi_dsub+0x110>
 8002172:	4b66      	ldr	r3, [pc, #408]	@ (800230c <__aeabi_dsub+0x36c>)
 8002174:	4311      	orrs	r1, r2
 8002176:	468a      	mov	sl, r1
 8002178:	18eb      	adds	r3, r5, r3
 800217a:	2900      	cmp	r1, #0
 800217c:	d028      	beq.n	80021d0 <__aeabi_dsub+0x230>
 800217e:	4566      	cmp	r6, ip
 8002180:	d02c      	beq.n	80021dc <__aeabi_dsub+0x23c>
 8002182:	2b00      	cmp	r3, #0
 8002184:	d05b      	beq.n	800223e <__aeabi_dsub+0x29e>
 8002186:	2d00      	cmp	r5, #0
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x1ec>
 800218a:	e12c      	b.n	80023e6 <__aeabi_dsub+0x446>
 800218c:	465b      	mov	r3, fp
 800218e:	4666      	mov	r6, ip
 8002190:	075f      	lsls	r7, r3, #29
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	4317      	orrs	r7, r2
 8002196:	08dd      	lsrs	r5, r3, #3
 8002198:	003b      	movs	r3, r7
 800219a:	432b      	orrs	r3, r5
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x200>
 800219e:	e0e2      	b.n	8002366 <__aeabi_dsub+0x3c6>
 80021a0:	2480      	movs	r4, #128	@ 0x80
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	432c      	orrs	r4, r5
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	4d56      	ldr	r5, [pc, #344]	@ (8002304 <__aeabi_dsub+0x364>)
 80021aa:	0b24      	lsrs	r4, r4, #12
 80021ac:	e08c      	b.n	80022c8 <__aeabi_dsub+0x328>
 80021ae:	4659      	mov	r1, fp
 80021b0:	4311      	orrs	r1, r2
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x216>
 80021b4:	e0d5      	b.n	8002362 <__aeabi_dsub+0x3c2>
 80021b6:	1e59      	subs	r1, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x21e>
 80021bc:	e1b9      	b.n	8002532 <__aeabi_dsub+0x592>
 80021be:	42bb      	cmp	r3, r7
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x224>
 80021c2:	e1b1      	b.n	8002528 <__aeabi_dsub+0x588>
 80021c4:	2701      	movs	r7, #1
 80021c6:	000b      	movs	r3, r1
 80021c8:	2938      	cmp	r1, #56	@ 0x38
 80021ca:	dd00      	ble.n	80021ce <__aeabi_dsub+0x22e>
 80021cc:	e740      	b.n	8002050 <__aeabi_dsub+0xb0>
 80021ce:	e72a      	b.n	8002026 <__aeabi_dsub+0x86>
 80021d0:	4661      	mov	r1, ip
 80021d2:	2701      	movs	r7, #1
 80021d4:	4079      	eors	r1, r7
 80021d6:	468c      	mov	ip, r1
 80021d8:	4566      	cmp	r6, ip
 80021da:	d1d2      	bne.n	8002182 <__aeabi_dsub+0x1e2>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x242>
 80021e0:	e0c5      	b.n	800236e <__aeabi_dsub+0x3ce>
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x248>
 80021e6:	e155      	b.n	8002494 <__aeabi_dsub+0x4f4>
 80021e8:	464b      	mov	r3, r9
 80021ea:	0025      	movs	r5, r4
 80021ec:	4305      	orrs	r5, r0
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x252>
 80021f0:	e212      	b.n	8002618 <__aeabi_dsub+0x678>
 80021f2:	1e59      	subs	r1, r3, #1
 80021f4:	468c      	mov	ip, r1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x25c>
 80021fa:	e249      	b.n	8002690 <__aeabi_dsub+0x6f0>
 80021fc:	4d41      	ldr	r5, [pc, #260]	@ (8002304 <__aeabi_dsub+0x364>)
 80021fe:	42ab      	cmp	r3, r5
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x264>
 8002202:	e28f      	b.n	8002724 <__aeabi_dsub+0x784>
 8002204:	2701      	movs	r7, #1
 8002206:	2938      	cmp	r1, #56	@ 0x38
 8002208:	dc11      	bgt.n	800222e <__aeabi_dsub+0x28e>
 800220a:	4663      	mov	r3, ip
 800220c:	2b1f      	cmp	r3, #31
 800220e:	dd00      	ble.n	8002212 <__aeabi_dsub+0x272>
 8002210:	e25b      	b.n	80026ca <__aeabi_dsub+0x72a>
 8002212:	4661      	mov	r1, ip
 8002214:	2320      	movs	r3, #32
 8002216:	0027      	movs	r7, r4
 8002218:	1a5b      	subs	r3, r3, r1
 800221a:	0005      	movs	r5, r0
 800221c:	4098      	lsls	r0, r3
 800221e:	409f      	lsls	r7, r3
 8002220:	40cd      	lsrs	r5, r1
 8002222:	1e43      	subs	r3, r0, #1
 8002224:	4198      	sbcs	r0, r3
 8002226:	40cc      	lsrs	r4, r1
 8002228:	432f      	orrs	r7, r5
 800222a:	4307      	orrs	r7, r0
 800222c:	44a3      	add	fp, r4
 800222e:	18bf      	adds	r7, r7, r2
 8002230:	4297      	cmp	r7, r2
 8002232:	4192      	sbcs	r2, r2
 8002234:	4252      	negs	r2, r2
 8002236:	445a      	add	r2, fp
 8002238:	0014      	movs	r4, r2
 800223a:	464d      	mov	r5, r9
 800223c:	e787      	b.n	800214e <__aeabi_dsub+0x1ae>
 800223e:	4f34      	ldr	r7, [pc, #208]	@ (8002310 <__aeabi_dsub+0x370>)
 8002240:	1c6b      	adds	r3, r5, #1
 8002242:	423b      	tst	r3, r7
 8002244:	d000      	beq.n	8002248 <__aeabi_dsub+0x2a8>
 8002246:	e0b6      	b.n	80023b6 <__aeabi_dsub+0x416>
 8002248:	4659      	mov	r1, fp
 800224a:	0023      	movs	r3, r4
 800224c:	4311      	orrs	r1, r2
 800224e:	000f      	movs	r7, r1
 8002250:	4303      	orrs	r3, r0
 8002252:	2d00      	cmp	r5, #0
 8002254:	d000      	beq.n	8002258 <__aeabi_dsub+0x2b8>
 8002256:	e126      	b.n	80024a6 <__aeabi_dsub+0x506>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x2be>
 800225c:	e1c0      	b.n	80025e0 <__aeabi_dsub+0x640>
 800225e:	2900      	cmp	r1, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x2c4>
 8002262:	e0a1      	b.n	80023a8 <__aeabi_dsub+0x408>
 8002264:	1a83      	subs	r3, r0, r2
 8002266:	4698      	mov	r8, r3
 8002268:	465b      	mov	r3, fp
 800226a:	4540      	cmp	r0, r8
 800226c:	41ad      	sbcs	r5, r5
 800226e:	1ae3      	subs	r3, r4, r3
 8002270:	426d      	negs	r5, r5
 8002272:	1b5b      	subs	r3, r3, r5
 8002274:	2580      	movs	r5, #128	@ 0x80
 8002276:	042d      	lsls	r5, r5, #16
 8002278:	422b      	tst	r3, r5
 800227a:	d100      	bne.n	800227e <__aeabi_dsub+0x2de>
 800227c:	e14b      	b.n	8002516 <__aeabi_dsub+0x576>
 800227e:	465b      	mov	r3, fp
 8002280:	1a10      	subs	r0, r2, r0
 8002282:	4282      	cmp	r2, r0
 8002284:	4192      	sbcs	r2, r2
 8002286:	1b1c      	subs	r4, r3, r4
 8002288:	0007      	movs	r7, r0
 800228a:	2601      	movs	r6, #1
 800228c:	4663      	mov	r3, ip
 800228e:	4252      	negs	r2, r2
 8002290:	1aa4      	subs	r4, r4, r2
 8002292:	4327      	orrs	r7, r4
 8002294:	401e      	ands	r6, r3
 8002296:	2f00      	cmp	r7, #0
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x2fc>
 800229a:	e142      	b.n	8002522 <__aeabi_dsub+0x582>
 800229c:	422c      	tst	r4, r5
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x302>
 80022a0:	e26d      	b.n	800277e <__aeabi_dsub+0x7de>
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <__aeabi_dsub+0x368>)
 80022a4:	2501      	movs	r5, #1
 80022a6:	401c      	ands	r4, r3
 80022a8:	e71b      	b.n	80020e2 <__aeabi_dsub+0x142>
 80022aa:	42bd      	cmp	r5, r7
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x310>
 80022ae:	e13b      	b.n	8002528 <__aeabi_dsub+0x588>
 80022b0:	2701      	movs	r7, #1
 80022b2:	2b38      	cmp	r3, #56	@ 0x38
 80022b4:	dd00      	ble.n	80022b8 <__aeabi_dsub+0x318>
 80022b6:	e745      	b.n	8002144 <__aeabi_dsub+0x1a4>
 80022b8:	2780      	movs	r7, #128	@ 0x80
 80022ba:	4659      	mov	r1, fp
 80022bc:	043f      	lsls	r7, r7, #16
 80022be:	4339      	orrs	r1, r7
 80022c0:	468b      	mov	fp, r1
 80022c2:	e72a      	b.n	800211a <__aeabi_dsub+0x17a>
 80022c4:	2400      	movs	r4, #0
 80022c6:	2700      	movs	r7, #0
 80022c8:	052d      	lsls	r5, r5, #20
 80022ca:	4325      	orrs	r5, r4
 80022cc:	07f6      	lsls	r6, r6, #31
 80022ce:	4335      	orrs	r5, r6
 80022d0:	0038      	movs	r0, r7
 80022d2:	0029      	movs	r1, r5
 80022d4:	b003      	add	sp, #12
 80022d6:	bcf0      	pop	{r4, r5, r6, r7}
 80022d8:	46bb      	mov	fp, r7
 80022da:	46b2      	mov	sl, r6
 80022dc:	46a9      	mov	r9, r5
 80022de:	46a0      	mov	r8, r4
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	077b      	lsls	r3, r7, #29
 80022e4:	d004      	beq.n	80022f0 <__aeabi_dsub+0x350>
 80022e6:	230f      	movs	r3, #15
 80022e8:	403b      	ands	r3, r7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d000      	beq.n	80022f0 <__aeabi_dsub+0x350>
 80022ee:	e6e7      	b.n	80020c0 <__aeabi_dsub+0x120>
 80022f0:	002b      	movs	r3, r5
 80022f2:	08f8      	lsrs	r0, r7, #3
 80022f4:	4a03      	ldr	r2, [pc, #12]	@ (8002304 <__aeabi_dsub+0x364>)
 80022f6:	0767      	lsls	r7, r4, #29
 80022f8:	4307      	orrs	r7, r0
 80022fa:	08e5      	lsrs	r5, r4, #3
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x362>
 8002300:	e74a      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002302:	e0a5      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002304:	000007ff 	.word	0x000007ff
 8002308:	ff7fffff 	.word	0xff7fffff
 800230c:	fffff801 	.word	0xfffff801
 8002310:	000007fe 	.word	0x000007fe
 8002314:	0038      	movs	r0, r7
 8002316:	f000 fb45 	bl	80029a4 <__clzsi2>
 800231a:	0003      	movs	r3, r0
 800231c:	3318      	adds	r3, #24
 800231e:	2b1f      	cmp	r3, #31
 8002320:	dc00      	bgt.n	8002324 <__aeabi_dsub+0x384>
 8002322:	e6a7      	b.n	8002074 <__aeabi_dsub+0xd4>
 8002324:	003a      	movs	r2, r7
 8002326:	3808      	subs	r0, #8
 8002328:	4082      	lsls	r2, r0
 800232a:	429d      	cmp	r5, r3
 800232c:	dd00      	ble.n	8002330 <__aeabi_dsub+0x390>
 800232e:	e08a      	b.n	8002446 <__aeabi_dsub+0x4a6>
 8002330:	1b5b      	subs	r3, r3, r5
 8002332:	1c58      	adds	r0, r3, #1
 8002334:	281f      	cmp	r0, #31
 8002336:	dc00      	bgt.n	800233a <__aeabi_dsub+0x39a>
 8002338:	e1d8      	b.n	80026ec <__aeabi_dsub+0x74c>
 800233a:	0017      	movs	r7, r2
 800233c:	3b1f      	subs	r3, #31
 800233e:	40df      	lsrs	r7, r3
 8002340:	2820      	cmp	r0, #32
 8002342:	d005      	beq.n	8002350 <__aeabi_dsub+0x3b0>
 8002344:	2340      	movs	r3, #64	@ 0x40
 8002346:	1a1b      	subs	r3, r3, r0
 8002348:	409a      	lsls	r2, r3
 800234a:	1e53      	subs	r3, r2, #1
 800234c:	419a      	sbcs	r2, r3
 800234e:	4317      	orrs	r7, r2
 8002350:	2500      	movs	r5, #0
 8002352:	2f00      	cmp	r7, #0
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x3b8>
 8002356:	e0e5      	b.n	8002524 <__aeabi_dsub+0x584>
 8002358:	077b      	lsls	r3, r7, #29
 800235a:	d000      	beq.n	800235e <__aeabi_dsub+0x3be>
 800235c:	e6ab      	b.n	80020b6 <__aeabi_dsub+0x116>
 800235e:	002c      	movs	r4, r5
 8002360:	e7c6      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002362:	08c0      	lsrs	r0, r0, #3
 8002364:	e7c6      	b.n	80022f4 <__aeabi_dsub+0x354>
 8002366:	2700      	movs	r7, #0
 8002368:	2400      	movs	r4, #0
 800236a:	4dd1      	ldr	r5, [pc, #836]	@ (80026b0 <__aeabi_dsub+0x710>)
 800236c:	e7ac      	b.n	80022c8 <__aeabi_dsub+0x328>
 800236e:	4fd1      	ldr	r7, [pc, #836]	@ (80026b4 <__aeabi_dsub+0x714>)
 8002370:	1c6b      	adds	r3, r5, #1
 8002372:	423b      	tst	r3, r7
 8002374:	d171      	bne.n	800245a <__aeabi_dsub+0x4ba>
 8002376:	0023      	movs	r3, r4
 8002378:	4303      	orrs	r3, r0
 800237a:	2d00      	cmp	r5, #0
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x3e0>
 800237e:	e14e      	b.n	800261e <__aeabi_dsub+0x67e>
 8002380:	4657      	mov	r7, sl
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x3e8>
 8002386:	e1b5      	b.n	80026f4 <__aeabi_dsub+0x754>
 8002388:	2f00      	cmp	r7, #0
 800238a:	d00d      	beq.n	80023a8 <__aeabi_dsub+0x408>
 800238c:	1883      	adds	r3, r0, r2
 800238e:	4283      	cmp	r3, r0
 8002390:	4180      	sbcs	r0, r0
 8002392:	445c      	add	r4, fp
 8002394:	4240      	negs	r0, r0
 8002396:	1824      	adds	r4, r4, r0
 8002398:	0222      	lsls	r2, r4, #8
 800239a:	d500      	bpl.n	800239e <__aeabi_dsub+0x3fe>
 800239c:	e1c8      	b.n	8002730 <__aeabi_dsub+0x790>
 800239e:	001f      	movs	r7, r3
 80023a0:	4698      	mov	r8, r3
 80023a2:	4327      	orrs	r7, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x408>
 80023a6:	e0bc      	b.n	8002522 <__aeabi_dsub+0x582>
 80023a8:	4643      	mov	r3, r8
 80023aa:	0767      	lsls	r7, r4, #29
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	431f      	orrs	r7, r3
 80023b0:	08e5      	lsrs	r5, r4, #3
 80023b2:	2300      	movs	r3, #0
 80023b4:	e04c      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80023b6:	1a83      	subs	r3, r0, r2
 80023b8:	4698      	mov	r8, r3
 80023ba:	465b      	mov	r3, fp
 80023bc:	4540      	cmp	r0, r8
 80023be:	41bf      	sbcs	r7, r7
 80023c0:	1ae3      	subs	r3, r4, r3
 80023c2:	427f      	negs	r7, r7
 80023c4:	1bdb      	subs	r3, r3, r7
 80023c6:	021f      	lsls	r7, r3, #8
 80023c8:	d47c      	bmi.n	80024c4 <__aeabi_dsub+0x524>
 80023ca:	4647      	mov	r7, r8
 80023cc:	431f      	orrs	r7, r3
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x432>
 80023d0:	e0a6      	b.n	8002520 <__aeabi_dsub+0x580>
 80023d2:	001c      	movs	r4, r3
 80023d4:	4647      	mov	r7, r8
 80023d6:	e645      	b.n	8002064 <__aeabi_dsub+0xc4>
 80023d8:	4cb7      	ldr	r4, [pc, #732]	@ (80026b8 <__aeabi_dsub+0x718>)
 80023da:	1aed      	subs	r5, r5, r3
 80023dc:	4014      	ands	r4, r2
 80023de:	077b      	lsls	r3, r7, #29
 80023e0:	d000      	beq.n	80023e4 <__aeabi_dsub+0x444>
 80023e2:	e780      	b.n	80022e6 <__aeabi_dsub+0x346>
 80023e4:	e784      	b.n	80022f0 <__aeabi_dsub+0x350>
 80023e6:	464b      	mov	r3, r9
 80023e8:	0025      	movs	r5, r4
 80023ea:	4305      	orrs	r5, r0
 80023ec:	d066      	beq.n	80024bc <__aeabi_dsub+0x51c>
 80023ee:	1e5f      	subs	r7, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d100      	bne.n	80023f6 <__aeabi_dsub+0x456>
 80023f4:	e0fc      	b.n	80025f0 <__aeabi_dsub+0x650>
 80023f6:	4dae      	ldr	r5, [pc, #696]	@ (80026b0 <__aeabi_dsub+0x710>)
 80023f8:	42ab      	cmp	r3, r5
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x45e>
 80023fc:	e15e      	b.n	80026bc <__aeabi_dsub+0x71c>
 80023fe:	4666      	mov	r6, ip
 8002400:	2f38      	cmp	r7, #56	@ 0x38
 8002402:	dc00      	bgt.n	8002406 <__aeabi_dsub+0x466>
 8002404:	e0b4      	b.n	8002570 <__aeabi_dsub+0x5d0>
 8002406:	2001      	movs	r0, #1
 8002408:	1a17      	subs	r7, r2, r0
 800240a:	42ba      	cmp	r2, r7
 800240c:	4192      	sbcs	r2, r2
 800240e:	465b      	mov	r3, fp
 8002410:	4252      	negs	r2, r2
 8002412:	464d      	mov	r5, r9
 8002414:	1a9c      	subs	r4, r3, r2
 8002416:	e620      	b.n	800205a <__aeabi_dsub+0xba>
 8002418:	0767      	lsls	r7, r4, #29
 800241a:	08c0      	lsrs	r0, r0, #3
 800241c:	4307      	orrs	r7, r0
 800241e:	08e5      	lsrs	r5, r4, #3
 8002420:	e6ba      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002422:	001f      	movs	r7, r3
 8002424:	4659      	mov	r1, fp
 8002426:	3f20      	subs	r7, #32
 8002428:	40f9      	lsrs	r1, r7
 800242a:	000f      	movs	r7, r1
 800242c:	2b20      	cmp	r3, #32
 800242e:	d005      	beq.n	800243c <__aeabi_dsub+0x49c>
 8002430:	2140      	movs	r1, #64	@ 0x40
 8002432:	1acb      	subs	r3, r1, r3
 8002434:	4659      	mov	r1, fp
 8002436:	4099      	lsls	r1, r3
 8002438:	430a      	orrs	r2, r1
 800243a:	4692      	mov	sl, r2
 800243c:	4653      	mov	r3, sl
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	4193      	sbcs	r3, r2
 8002442:	431f      	orrs	r7, r3
 8002444:	e604      	b.n	8002050 <__aeabi_dsub+0xb0>
 8002446:	1aeb      	subs	r3, r5, r3
 8002448:	4d9b      	ldr	r5, [pc, #620]	@ (80026b8 <__aeabi_dsub+0x718>)
 800244a:	4015      	ands	r5, r2
 800244c:	076f      	lsls	r7, r5, #29
 800244e:	08ed      	lsrs	r5, r5, #3
 8002450:	032c      	lsls	r4, r5, #12
 8002452:	055d      	lsls	r5, r3, #21
 8002454:	0b24      	lsrs	r4, r4, #12
 8002456:	0d6d      	lsrs	r5, r5, #21
 8002458:	e736      	b.n	80022c8 <__aeabi_dsub+0x328>
 800245a:	4d95      	ldr	r5, [pc, #596]	@ (80026b0 <__aeabi_dsub+0x710>)
 800245c:	42ab      	cmp	r3, r5
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x4c2>
 8002460:	e0d6      	b.n	8002610 <__aeabi_dsub+0x670>
 8002462:	1882      	adds	r2, r0, r2
 8002464:	0021      	movs	r1, r4
 8002466:	4282      	cmp	r2, r0
 8002468:	4180      	sbcs	r0, r0
 800246a:	4459      	add	r1, fp
 800246c:	4240      	negs	r0, r0
 800246e:	1808      	adds	r0, r1, r0
 8002470:	07c7      	lsls	r7, r0, #31
 8002472:	0852      	lsrs	r2, r2, #1
 8002474:	4317      	orrs	r7, r2
 8002476:	0844      	lsrs	r4, r0, #1
 8002478:	0752      	lsls	r2, r2, #29
 800247a:	d400      	bmi.n	800247e <__aeabi_dsub+0x4de>
 800247c:	e185      	b.n	800278a <__aeabi_dsub+0x7ea>
 800247e:	220f      	movs	r2, #15
 8002480:	001d      	movs	r5, r3
 8002482:	403a      	ands	r2, r7
 8002484:	2a04      	cmp	r2, #4
 8002486:	d000      	beq.n	800248a <__aeabi_dsub+0x4ea>
 8002488:	e61a      	b.n	80020c0 <__aeabi_dsub+0x120>
 800248a:	08ff      	lsrs	r7, r7, #3
 800248c:	0764      	lsls	r4, r4, #29
 800248e:	4327      	orrs	r7, r4
 8002490:	0905      	lsrs	r5, r0, #4
 8002492:	e7dd      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002494:	465b      	mov	r3, fp
 8002496:	08d2      	lsrs	r2, r2, #3
 8002498:	075f      	lsls	r7, r3, #29
 800249a:	4317      	orrs	r7, r2
 800249c:	08dd      	lsrs	r5, r3, #3
 800249e:	e67b      	b.n	8002198 <__aeabi_dsub+0x1f8>
 80024a0:	2700      	movs	r7, #0
 80024a2:	2400      	movs	r4, #0
 80024a4:	e710      	b.n	80022c8 <__aeabi_dsub+0x328>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d000      	beq.n	80024ac <__aeabi_dsub+0x50c>
 80024aa:	e0d6      	b.n	800265a <__aeabi_dsub+0x6ba>
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d000      	beq.n	80024b2 <__aeabi_dsub+0x512>
 80024b0:	e12f      	b.n	8002712 <__aeabi_dsub+0x772>
 80024b2:	2480      	movs	r4, #128	@ 0x80
 80024b4:	2600      	movs	r6, #0
 80024b6:	4d7e      	ldr	r5, [pc, #504]	@ (80026b0 <__aeabi_dsub+0x710>)
 80024b8:	0324      	lsls	r4, r4, #12
 80024ba:	e705      	b.n	80022c8 <__aeabi_dsub+0x328>
 80024bc:	4666      	mov	r6, ip
 80024be:	465c      	mov	r4, fp
 80024c0:	08d0      	lsrs	r0, r2, #3
 80024c2:	e717      	b.n	80022f4 <__aeabi_dsub+0x354>
 80024c4:	465b      	mov	r3, fp
 80024c6:	1a17      	subs	r7, r2, r0
 80024c8:	42ba      	cmp	r2, r7
 80024ca:	4192      	sbcs	r2, r2
 80024cc:	1b1c      	subs	r4, r3, r4
 80024ce:	2601      	movs	r6, #1
 80024d0:	4663      	mov	r3, ip
 80024d2:	4252      	negs	r2, r2
 80024d4:	1aa4      	subs	r4, r4, r2
 80024d6:	401e      	ands	r6, r3
 80024d8:	e5c4      	b.n	8002064 <__aeabi_dsub+0xc4>
 80024da:	1883      	adds	r3, r0, r2
 80024dc:	4283      	cmp	r3, r0
 80024de:	4180      	sbcs	r0, r0
 80024e0:	445c      	add	r4, fp
 80024e2:	4240      	negs	r0, r0
 80024e4:	1825      	adds	r5, r4, r0
 80024e6:	022a      	lsls	r2, r5, #8
 80024e8:	d400      	bmi.n	80024ec <__aeabi_dsub+0x54c>
 80024ea:	e0da      	b.n	80026a2 <__aeabi_dsub+0x702>
 80024ec:	4a72      	ldr	r2, [pc, #456]	@ (80026b8 <__aeabi_dsub+0x718>)
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	4015      	ands	r5, r2
 80024f2:	07ea      	lsls	r2, r5, #31
 80024f4:	431a      	orrs	r2, r3
 80024f6:	0869      	lsrs	r1, r5, #1
 80024f8:	075b      	lsls	r3, r3, #29
 80024fa:	d400      	bmi.n	80024fe <__aeabi_dsub+0x55e>
 80024fc:	e14a      	b.n	8002794 <__aeabi_dsub+0x7f4>
 80024fe:	230f      	movs	r3, #15
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x568>
 8002506:	e0fc      	b.n	8002702 <__aeabi_dsub+0x762>
 8002508:	1d17      	adds	r7, r2, #4
 800250a:	4297      	cmp	r7, r2
 800250c:	41a4      	sbcs	r4, r4
 800250e:	4264      	negs	r4, r4
 8002510:	2502      	movs	r5, #2
 8002512:	1864      	adds	r4, r4, r1
 8002514:	e6ec      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002516:	4647      	mov	r7, r8
 8002518:	001c      	movs	r4, r3
 800251a:	431f      	orrs	r7, r3
 800251c:	d000      	beq.n	8002520 <__aeabi_dsub+0x580>
 800251e:	e743      	b.n	80023a8 <__aeabi_dsub+0x408>
 8002520:	2600      	movs	r6, #0
 8002522:	2500      	movs	r5, #0
 8002524:	2400      	movs	r4, #0
 8002526:	e6cf      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	0767      	lsls	r7, r4, #29
 800252c:	4307      	orrs	r7, r0
 800252e:	08e5      	lsrs	r5, r4, #3
 8002530:	e632      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002532:	1a87      	subs	r7, r0, r2
 8002534:	465b      	mov	r3, fp
 8002536:	42b8      	cmp	r0, r7
 8002538:	4180      	sbcs	r0, r0
 800253a:	1ae4      	subs	r4, r4, r3
 800253c:	4240      	negs	r0, r0
 800253e:	1a24      	subs	r4, r4, r0
 8002540:	0223      	lsls	r3, r4, #8
 8002542:	d428      	bmi.n	8002596 <__aeabi_dsub+0x5f6>
 8002544:	0763      	lsls	r3, r4, #29
 8002546:	08ff      	lsrs	r7, r7, #3
 8002548:	431f      	orrs	r7, r3
 800254a:	08e5      	lsrs	r5, r4, #3
 800254c:	2301      	movs	r3, #1
 800254e:	e77f      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x5b6>
 8002554:	e673      	b.n	800223e <__aeabi_dsub+0x29e>
 8002556:	464b      	mov	r3, r9
 8002558:	1b5f      	subs	r7, r3, r5
 800255a:	003b      	movs	r3, r7
 800255c:	2d00      	cmp	r5, #0
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x5c2>
 8002560:	e742      	b.n	80023e8 <__aeabi_dsub+0x448>
 8002562:	2f38      	cmp	r7, #56	@ 0x38
 8002564:	dd00      	ble.n	8002568 <__aeabi_dsub+0x5c8>
 8002566:	e0ec      	b.n	8002742 <__aeabi_dsub+0x7a2>
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	000e      	movs	r6, r1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431c      	orrs	r4, r3
 8002570:	2f1f      	cmp	r7, #31
 8002572:	dc25      	bgt.n	80025c0 <__aeabi_dsub+0x620>
 8002574:	2520      	movs	r5, #32
 8002576:	0023      	movs	r3, r4
 8002578:	1bed      	subs	r5, r5, r7
 800257a:	0001      	movs	r1, r0
 800257c:	40a8      	lsls	r0, r5
 800257e:	40ab      	lsls	r3, r5
 8002580:	40f9      	lsrs	r1, r7
 8002582:	1e45      	subs	r5, r0, #1
 8002584:	41a8      	sbcs	r0, r5
 8002586:	430b      	orrs	r3, r1
 8002588:	40fc      	lsrs	r4, r7
 800258a:	4318      	orrs	r0, r3
 800258c:	465b      	mov	r3, fp
 800258e:	1b1b      	subs	r3, r3, r4
 8002590:	469b      	mov	fp, r3
 8002592:	e739      	b.n	8002408 <__aeabi_dsub+0x468>
 8002594:	4666      	mov	r6, ip
 8002596:	2501      	movs	r5, #1
 8002598:	e562      	b.n	8002060 <__aeabi_dsub+0xc0>
 800259a:	001f      	movs	r7, r3
 800259c:	4659      	mov	r1, fp
 800259e:	3f20      	subs	r7, #32
 80025a0:	40f9      	lsrs	r1, r7
 80025a2:	468c      	mov	ip, r1
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d005      	beq.n	80025b4 <__aeabi_dsub+0x614>
 80025a8:	2740      	movs	r7, #64	@ 0x40
 80025aa:	4659      	mov	r1, fp
 80025ac:	1afb      	subs	r3, r7, r3
 80025ae:	4099      	lsls	r1, r3
 80025b0:	430a      	orrs	r2, r1
 80025b2:	4692      	mov	sl, r2
 80025b4:	4657      	mov	r7, sl
 80025b6:	1e7b      	subs	r3, r7, #1
 80025b8:	419f      	sbcs	r7, r3
 80025ba:	4663      	mov	r3, ip
 80025bc:	431f      	orrs	r7, r3
 80025be:	e5c1      	b.n	8002144 <__aeabi_dsub+0x1a4>
 80025c0:	003b      	movs	r3, r7
 80025c2:	0025      	movs	r5, r4
 80025c4:	3b20      	subs	r3, #32
 80025c6:	40dd      	lsrs	r5, r3
 80025c8:	2f20      	cmp	r7, #32
 80025ca:	d004      	beq.n	80025d6 <__aeabi_dsub+0x636>
 80025cc:	2340      	movs	r3, #64	@ 0x40
 80025ce:	1bdb      	subs	r3, r3, r7
 80025d0:	409c      	lsls	r4, r3
 80025d2:	4320      	orrs	r0, r4
 80025d4:	4680      	mov	r8, r0
 80025d6:	4640      	mov	r0, r8
 80025d8:	1e43      	subs	r3, r0, #1
 80025da:	4198      	sbcs	r0, r3
 80025dc:	4328      	orrs	r0, r5
 80025de:	e713      	b.n	8002408 <__aeabi_dsub+0x468>
 80025e0:	2900      	cmp	r1, #0
 80025e2:	d09d      	beq.n	8002520 <__aeabi_dsub+0x580>
 80025e4:	2601      	movs	r6, #1
 80025e6:	4663      	mov	r3, ip
 80025e8:	465c      	mov	r4, fp
 80025ea:	4690      	mov	r8, r2
 80025ec:	401e      	ands	r6, r3
 80025ee:	e6db      	b.n	80023a8 <__aeabi_dsub+0x408>
 80025f0:	1a17      	subs	r7, r2, r0
 80025f2:	465b      	mov	r3, fp
 80025f4:	42ba      	cmp	r2, r7
 80025f6:	4192      	sbcs	r2, r2
 80025f8:	1b1c      	subs	r4, r3, r4
 80025fa:	4252      	negs	r2, r2
 80025fc:	1aa4      	subs	r4, r4, r2
 80025fe:	0223      	lsls	r3, r4, #8
 8002600:	d4c8      	bmi.n	8002594 <__aeabi_dsub+0x5f4>
 8002602:	0763      	lsls	r3, r4, #29
 8002604:	08ff      	lsrs	r7, r7, #3
 8002606:	431f      	orrs	r7, r3
 8002608:	4666      	mov	r6, ip
 800260a:	2301      	movs	r3, #1
 800260c:	08e5      	lsrs	r5, r4, #3
 800260e:	e71f      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002610:	001d      	movs	r5, r3
 8002612:	2400      	movs	r4, #0
 8002614:	2700      	movs	r7, #0
 8002616:	e657      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002618:	465c      	mov	r4, fp
 800261a:	08d0      	lsrs	r0, r2, #3
 800261c:	e66a      	b.n	80022f4 <__aeabi_dsub+0x354>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x684>
 8002622:	e737      	b.n	8002494 <__aeabi_dsub+0x4f4>
 8002624:	4653      	mov	r3, sl
 8002626:	08c0      	lsrs	r0, r0, #3
 8002628:	0767      	lsls	r7, r4, #29
 800262a:	4307      	orrs	r7, r0
 800262c:	08e5      	lsrs	r5, r4, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <__aeabi_dsub+0x694>
 8002632:	e5b1      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	031b      	lsls	r3, r3, #12
 8002638:	421d      	tst	r5, r3
 800263a:	d008      	beq.n	800264e <__aeabi_dsub+0x6ae>
 800263c:	4659      	mov	r1, fp
 800263e:	08c8      	lsrs	r0, r1, #3
 8002640:	4218      	tst	r0, r3
 8002642:	d104      	bne.n	800264e <__aeabi_dsub+0x6ae>
 8002644:	08d2      	lsrs	r2, r2, #3
 8002646:	0749      	lsls	r1, r1, #29
 8002648:	430a      	orrs	r2, r1
 800264a:	0017      	movs	r7, r2
 800264c:	0005      	movs	r5, r0
 800264e:	0f7b      	lsrs	r3, r7, #29
 8002650:	00ff      	lsls	r7, r7, #3
 8002652:	08ff      	lsrs	r7, r7, #3
 8002654:	075b      	lsls	r3, r3, #29
 8002656:	431f      	orrs	r7, r3
 8002658:	e59e      	b.n	8002198 <__aeabi_dsub+0x1f8>
 800265a:	08c0      	lsrs	r0, r0, #3
 800265c:	0763      	lsls	r3, r4, #29
 800265e:	4318      	orrs	r0, r3
 8002660:	08e5      	lsrs	r5, r4, #3
 8002662:	2900      	cmp	r1, #0
 8002664:	d053      	beq.n	800270e <__aeabi_dsub+0x76e>
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	031b      	lsls	r3, r3, #12
 800266a:	421d      	tst	r5, r3
 800266c:	d00a      	beq.n	8002684 <__aeabi_dsub+0x6e4>
 800266e:	4659      	mov	r1, fp
 8002670:	08cc      	lsrs	r4, r1, #3
 8002672:	421c      	tst	r4, r3
 8002674:	d106      	bne.n	8002684 <__aeabi_dsub+0x6e4>
 8002676:	2601      	movs	r6, #1
 8002678:	4663      	mov	r3, ip
 800267a:	0025      	movs	r5, r4
 800267c:	08d0      	lsrs	r0, r2, #3
 800267e:	0749      	lsls	r1, r1, #29
 8002680:	4308      	orrs	r0, r1
 8002682:	401e      	ands	r6, r3
 8002684:	0f47      	lsrs	r7, r0, #29
 8002686:	00c0      	lsls	r0, r0, #3
 8002688:	08c0      	lsrs	r0, r0, #3
 800268a:	077f      	lsls	r7, r7, #29
 800268c:	4307      	orrs	r7, r0
 800268e:	e583      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002690:	1883      	adds	r3, r0, r2
 8002692:	4293      	cmp	r3, r2
 8002694:	4192      	sbcs	r2, r2
 8002696:	445c      	add	r4, fp
 8002698:	4252      	negs	r2, r2
 800269a:	18a5      	adds	r5, r4, r2
 800269c:	022a      	lsls	r2, r5, #8
 800269e:	d500      	bpl.n	80026a2 <__aeabi_dsub+0x702>
 80026a0:	e724      	b.n	80024ec <__aeabi_dsub+0x54c>
 80026a2:	076f      	lsls	r7, r5, #29
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	431f      	orrs	r7, r3
 80026a8:	08ed      	lsrs	r5, r5, #3
 80026aa:	2301      	movs	r3, #1
 80026ac:	e6d0      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	000007ff 	.word	0x000007ff
 80026b4:	000007fe 	.word	0x000007fe
 80026b8:	ff7fffff 	.word	0xff7fffff
 80026bc:	465b      	mov	r3, fp
 80026be:	08d2      	lsrs	r2, r2, #3
 80026c0:	075f      	lsls	r7, r3, #29
 80026c2:	4666      	mov	r6, ip
 80026c4:	4317      	orrs	r7, r2
 80026c6:	08dd      	lsrs	r5, r3, #3
 80026c8:	e566      	b.n	8002198 <__aeabi_dsub+0x1f8>
 80026ca:	0025      	movs	r5, r4
 80026cc:	3b20      	subs	r3, #32
 80026ce:	40dd      	lsrs	r5, r3
 80026d0:	4663      	mov	r3, ip
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d005      	beq.n	80026e2 <__aeabi_dsub+0x742>
 80026d6:	2340      	movs	r3, #64	@ 0x40
 80026d8:	4661      	mov	r1, ip
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	409c      	lsls	r4, r3
 80026de:	4320      	orrs	r0, r4
 80026e0:	4680      	mov	r8, r0
 80026e2:	4647      	mov	r7, r8
 80026e4:	1e7b      	subs	r3, r7, #1
 80026e6:	419f      	sbcs	r7, r3
 80026e8:	432f      	orrs	r7, r5
 80026ea:	e5a0      	b.n	800222e <__aeabi_dsub+0x28e>
 80026ec:	2120      	movs	r1, #32
 80026ee:	2700      	movs	r7, #0
 80026f0:	1a09      	subs	r1, r1, r0
 80026f2:	e4d2      	b.n	800209a <__aeabi_dsub+0xfa>
 80026f4:	2f00      	cmp	r7, #0
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x75a>
 80026f8:	e713      	b.n	8002522 <__aeabi_dsub+0x582>
 80026fa:	465c      	mov	r4, fp
 80026fc:	0017      	movs	r7, r2
 80026fe:	2500      	movs	r5, #0
 8002700:	e5f6      	b.n	80022f0 <__aeabi_dsub+0x350>
 8002702:	08d7      	lsrs	r7, r2, #3
 8002704:	0749      	lsls	r1, r1, #29
 8002706:	2302      	movs	r3, #2
 8002708:	430f      	orrs	r7, r1
 800270a:	092d      	lsrs	r5, r5, #4
 800270c:	e6a0      	b.n	8002450 <__aeabi_dsub+0x4b0>
 800270e:	0007      	movs	r7, r0
 8002710:	e542      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002712:	465b      	mov	r3, fp
 8002714:	2601      	movs	r6, #1
 8002716:	075f      	lsls	r7, r3, #29
 8002718:	08dd      	lsrs	r5, r3, #3
 800271a:	4663      	mov	r3, ip
 800271c:	08d2      	lsrs	r2, r2, #3
 800271e:	4317      	orrs	r7, r2
 8002720:	401e      	ands	r6, r3
 8002722:	e539      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002724:	465b      	mov	r3, fp
 8002726:	08d2      	lsrs	r2, r2, #3
 8002728:	075f      	lsls	r7, r3, #29
 800272a:	4317      	orrs	r7, r2
 800272c:	08dd      	lsrs	r5, r3, #3
 800272e:	e533      	b.n	8002198 <__aeabi_dsub+0x1f8>
 8002730:	4a1e      	ldr	r2, [pc, #120]	@ (80027ac <__aeabi_dsub+0x80c>)
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	4022      	ands	r2, r4
 8002736:	0757      	lsls	r7, r2, #29
 8002738:	0252      	lsls	r2, r2, #9
 800273a:	2501      	movs	r5, #1
 800273c:	431f      	orrs	r7, r3
 800273e:	0b14      	lsrs	r4, r2, #12
 8002740:	e5c2      	b.n	80022c8 <__aeabi_dsub+0x328>
 8002742:	000e      	movs	r6, r1
 8002744:	2001      	movs	r0, #1
 8002746:	e65f      	b.n	8002408 <__aeabi_dsub+0x468>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <__aeabi_dsub+0x7c8>
 800274c:	464b      	mov	r3, r9
 800274e:	1b5b      	subs	r3, r3, r5
 8002750:	469c      	mov	ip, r3
 8002752:	2d00      	cmp	r5, #0
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x7b8>
 8002756:	e548      	b.n	80021ea <__aeabi_dsub+0x24a>
 8002758:	2701      	movs	r7, #1
 800275a:	2b38      	cmp	r3, #56	@ 0x38
 800275c:	dd00      	ble.n	8002760 <__aeabi_dsub+0x7c0>
 800275e:	e566      	b.n	800222e <__aeabi_dsub+0x28e>
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431c      	orrs	r4, r3
 8002766:	e550      	b.n	800220a <__aeabi_dsub+0x26a>
 8002768:	1c6b      	adds	r3, r5, #1
 800276a:	4d11      	ldr	r5, [pc, #68]	@ (80027b0 <__aeabi_dsub+0x810>)
 800276c:	422b      	tst	r3, r5
 800276e:	d000      	beq.n	8002772 <__aeabi_dsub+0x7d2>
 8002770:	e673      	b.n	800245a <__aeabi_dsub+0x4ba>
 8002772:	4659      	mov	r1, fp
 8002774:	0023      	movs	r3, r4
 8002776:	4311      	orrs	r1, r2
 8002778:	468a      	mov	sl, r1
 800277a:	4303      	orrs	r3, r0
 800277c:	e600      	b.n	8002380 <__aeabi_dsub+0x3e0>
 800277e:	0767      	lsls	r7, r4, #29
 8002780:	08c0      	lsrs	r0, r0, #3
 8002782:	2300      	movs	r3, #0
 8002784:	4307      	orrs	r7, r0
 8002786:	08e5      	lsrs	r5, r4, #3
 8002788:	e662      	b.n	8002450 <__aeabi_dsub+0x4b0>
 800278a:	0764      	lsls	r4, r4, #29
 800278c:	08ff      	lsrs	r7, r7, #3
 800278e:	4327      	orrs	r7, r4
 8002790:	0905      	lsrs	r5, r0, #4
 8002792:	e65d      	b.n	8002450 <__aeabi_dsub+0x4b0>
 8002794:	08d2      	lsrs	r2, r2, #3
 8002796:	0749      	lsls	r1, r1, #29
 8002798:	4311      	orrs	r1, r2
 800279a:	000f      	movs	r7, r1
 800279c:	2302      	movs	r3, #2
 800279e:	092d      	lsrs	r5, r5, #4
 80027a0:	e656      	b.n	8002450 <__aeabi_dsub+0x4b0>
 80027a2:	0007      	movs	r7, r0
 80027a4:	e5a4      	b.n	80022f0 <__aeabi_dsub+0x350>
 80027a6:	0038      	movs	r0, r7
 80027a8:	e48f      	b.n	80020ca <__aeabi_dsub+0x12a>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	ff7fffff 	.word	0xff7fffff
 80027b0:	000007fe 	.word	0x000007fe

080027b4 <__aeabi_dcmpun>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	46c6      	mov	lr, r8
 80027b8:	031e      	lsls	r6, r3, #12
 80027ba:	0b36      	lsrs	r6, r6, #12
 80027bc:	46b0      	mov	r8, r6
 80027be:	4e0d      	ldr	r6, [pc, #52]	@ (80027f4 <__aeabi_dcmpun+0x40>)
 80027c0:	030c      	lsls	r4, r1, #12
 80027c2:	004d      	lsls	r5, r1, #1
 80027c4:	005f      	lsls	r7, r3, #1
 80027c6:	b500      	push	{lr}
 80027c8:	0b24      	lsrs	r4, r4, #12
 80027ca:	0d6d      	lsrs	r5, r5, #21
 80027cc:	0d7f      	lsrs	r7, r7, #21
 80027ce:	42b5      	cmp	r5, r6
 80027d0:	d00b      	beq.n	80027ea <__aeabi_dcmpun+0x36>
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <__aeabi_dcmpun+0x40>)
 80027d4:	2000      	movs	r0, #0
 80027d6:	428f      	cmp	r7, r1
 80027d8:	d104      	bne.n	80027e4 <__aeabi_dcmpun+0x30>
 80027da:	4646      	mov	r6, r8
 80027dc:	4316      	orrs	r6, r2
 80027de:	0030      	movs	r0, r6
 80027e0:	1e43      	subs	r3, r0, #1
 80027e2:	4198      	sbcs	r0, r3
 80027e4:	bc80      	pop	{r7}
 80027e6:	46b8      	mov	r8, r7
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	4304      	orrs	r4, r0
 80027ec:	2001      	movs	r0, #1
 80027ee:	2c00      	cmp	r4, #0
 80027f0:	d1f8      	bne.n	80027e4 <__aeabi_dcmpun+0x30>
 80027f2:	e7ee      	b.n	80027d2 <__aeabi_dcmpun+0x1e>
 80027f4:	000007ff 	.word	0x000007ff

080027f8 <__aeabi_d2iz>:
 80027f8:	000b      	movs	r3, r1
 80027fa:	0002      	movs	r2, r0
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4d16      	ldr	r5, [pc, #88]	@ (8002858 <__aeabi_d2iz+0x60>)
 8002800:	030c      	lsls	r4, r1, #12
 8002802:	b082      	sub	sp, #8
 8002804:	0049      	lsls	r1, r1, #1
 8002806:	2000      	movs	r0, #0
 8002808:	9200      	str	r2, [sp, #0]
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	0b24      	lsrs	r4, r4, #12
 800280e:	0d49      	lsrs	r1, r1, #21
 8002810:	0fde      	lsrs	r6, r3, #31
 8002812:	42a9      	cmp	r1, r5
 8002814:	dd04      	ble.n	8002820 <__aeabi_d2iz+0x28>
 8002816:	4811      	ldr	r0, [pc, #68]	@ (800285c <__aeabi_d2iz+0x64>)
 8002818:	4281      	cmp	r1, r0
 800281a:	dd03      	ble.n	8002824 <__aeabi_d2iz+0x2c>
 800281c:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <__aeabi_d2iz+0x68>)
 800281e:	18f0      	adds	r0, r6, r3
 8002820:	b002      	add	sp, #8
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	2080      	movs	r0, #128	@ 0x80
 8002826:	0340      	lsls	r0, r0, #13
 8002828:	4320      	orrs	r0, r4
 800282a:	4c0e      	ldr	r4, [pc, #56]	@ (8002864 <__aeabi_d2iz+0x6c>)
 800282c:	1a64      	subs	r4, r4, r1
 800282e:	2c1f      	cmp	r4, #31
 8002830:	dd08      	ble.n	8002844 <__aeabi_d2iz+0x4c>
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <__aeabi_d2iz+0x70>)
 8002834:	1a5b      	subs	r3, r3, r1
 8002836:	40d8      	lsrs	r0, r3
 8002838:	0003      	movs	r3, r0
 800283a:	4258      	negs	r0, r3
 800283c:	2e00      	cmp	r6, #0
 800283e:	d1ef      	bne.n	8002820 <__aeabi_d2iz+0x28>
 8002840:	0018      	movs	r0, r3
 8002842:	e7ed      	b.n	8002820 <__aeabi_d2iz+0x28>
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <__aeabi_d2iz+0x74>)
 8002846:	9a00      	ldr	r2, [sp, #0]
 8002848:	469c      	mov	ip, r3
 800284a:	0003      	movs	r3, r0
 800284c:	4461      	add	r1, ip
 800284e:	408b      	lsls	r3, r1
 8002850:	40e2      	lsrs	r2, r4
 8002852:	4313      	orrs	r3, r2
 8002854:	e7f1      	b.n	800283a <__aeabi_d2iz+0x42>
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	000003fe 	.word	0x000003fe
 800285c:	0000041d 	.word	0x0000041d
 8002860:	7fffffff 	.word	0x7fffffff
 8002864:	00000433 	.word	0x00000433
 8002868:	00000413 	.word	0x00000413
 800286c:	fffffbed 	.word	0xfffffbed

08002870 <__aeabi_i2d>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	2800      	cmp	r0, #0
 8002874:	d016      	beq.n	80028a4 <__aeabi_i2d+0x34>
 8002876:	17c3      	asrs	r3, r0, #31
 8002878:	18c5      	adds	r5, r0, r3
 800287a:	405d      	eors	r5, r3
 800287c:	0fc4      	lsrs	r4, r0, #31
 800287e:	0028      	movs	r0, r5
 8002880:	f000 f890 	bl	80029a4 <__clzsi2>
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <__aeabi_i2d+0x58>)
 8002886:	1a1b      	subs	r3, r3, r0
 8002888:	055b      	lsls	r3, r3, #21
 800288a:	0d5b      	lsrs	r3, r3, #21
 800288c:	280a      	cmp	r0, #10
 800288e:	dc14      	bgt.n	80028ba <__aeabi_i2d+0x4a>
 8002890:	0002      	movs	r2, r0
 8002892:	002e      	movs	r6, r5
 8002894:	3215      	adds	r2, #21
 8002896:	4096      	lsls	r6, r2
 8002898:	220b      	movs	r2, #11
 800289a:	1a12      	subs	r2, r2, r0
 800289c:	40d5      	lsrs	r5, r2
 800289e:	032d      	lsls	r5, r5, #12
 80028a0:	0b2d      	lsrs	r5, r5, #12
 80028a2:	e003      	b.n	80028ac <__aeabi_i2d+0x3c>
 80028a4:	2400      	movs	r4, #0
 80028a6:	2300      	movs	r3, #0
 80028a8:	2500      	movs	r5, #0
 80028aa:	2600      	movs	r6, #0
 80028ac:	051b      	lsls	r3, r3, #20
 80028ae:	432b      	orrs	r3, r5
 80028b0:	07e4      	lsls	r4, r4, #31
 80028b2:	4323      	orrs	r3, r4
 80028b4:	0030      	movs	r0, r6
 80028b6:	0019      	movs	r1, r3
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	380b      	subs	r0, #11
 80028bc:	4085      	lsls	r5, r0
 80028be:	032d      	lsls	r5, r5, #12
 80028c0:	2600      	movs	r6, #0
 80028c2:	0b2d      	lsrs	r5, r5, #12
 80028c4:	e7f2      	b.n	80028ac <__aeabi_i2d+0x3c>
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	0000041e 	.word	0x0000041e

080028cc <__aeabi_ui2d>:
 80028cc:	b510      	push	{r4, lr}
 80028ce:	1e04      	subs	r4, r0, #0
 80028d0:	d010      	beq.n	80028f4 <__aeabi_ui2d+0x28>
 80028d2:	f000 f867 	bl	80029a4 <__clzsi2>
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <__aeabi_ui2d+0x44>)
 80028d8:	1a1b      	subs	r3, r3, r0
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	0d5b      	lsrs	r3, r3, #21
 80028de:	280a      	cmp	r0, #10
 80028e0:	dc0f      	bgt.n	8002902 <__aeabi_ui2d+0x36>
 80028e2:	220b      	movs	r2, #11
 80028e4:	0021      	movs	r1, r4
 80028e6:	1a12      	subs	r2, r2, r0
 80028e8:	40d1      	lsrs	r1, r2
 80028ea:	3015      	adds	r0, #21
 80028ec:	030a      	lsls	r2, r1, #12
 80028ee:	4084      	lsls	r4, r0
 80028f0:	0b12      	lsrs	r2, r2, #12
 80028f2:	e001      	b.n	80028f8 <__aeabi_ui2d+0x2c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2200      	movs	r2, #0
 80028f8:	051b      	lsls	r3, r3, #20
 80028fa:	4313      	orrs	r3, r2
 80028fc:	0020      	movs	r0, r4
 80028fe:	0019      	movs	r1, r3
 8002900:	bd10      	pop	{r4, pc}
 8002902:	0022      	movs	r2, r4
 8002904:	380b      	subs	r0, #11
 8002906:	4082      	lsls	r2, r0
 8002908:	0312      	lsls	r2, r2, #12
 800290a:	2400      	movs	r4, #0
 800290c:	0b12      	lsrs	r2, r2, #12
 800290e:	e7f3      	b.n	80028f8 <__aeabi_ui2d+0x2c>
 8002910:	0000041e 	.word	0x0000041e

08002914 <__aeabi_f2d>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	0242      	lsls	r2, r0, #9
 8002918:	0043      	lsls	r3, r0, #1
 800291a:	0fc4      	lsrs	r4, r0, #31
 800291c:	20fe      	movs	r0, #254	@ 0xfe
 800291e:	0e1b      	lsrs	r3, r3, #24
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	0a55      	lsrs	r5, r2, #9
 8002924:	4208      	tst	r0, r1
 8002926:	d00c      	beq.n	8002942 <__aeabi_f2d+0x2e>
 8002928:	21e0      	movs	r1, #224	@ 0xe0
 800292a:	0089      	lsls	r1, r1, #2
 800292c:	468c      	mov	ip, r1
 800292e:	076d      	lsls	r5, r5, #29
 8002930:	0b12      	lsrs	r2, r2, #12
 8002932:	4463      	add	r3, ip
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	4313      	orrs	r3, r2
 8002938:	07e4      	lsls	r4, r4, #31
 800293a:	4323      	orrs	r3, r4
 800293c:	0028      	movs	r0, r5
 800293e:	0019      	movs	r1, r3
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	2b00      	cmp	r3, #0
 8002944:	d114      	bne.n	8002970 <__aeabi_f2d+0x5c>
 8002946:	2d00      	cmp	r5, #0
 8002948:	d01b      	beq.n	8002982 <__aeabi_f2d+0x6e>
 800294a:	0028      	movs	r0, r5
 800294c:	f000 f82a 	bl	80029a4 <__clzsi2>
 8002950:	280a      	cmp	r0, #10
 8002952:	dc1c      	bgt.n	800298e <__aeabi_f2d+0x7a>
 8002954:	230b      	movs	r3, #11
 8002956:	002a      	movs	r2, r5
 8002958:	1a1b      	subs	r3, r3, r0
 800295a:	40da      	lsrs	r2, r3
 800295c:	0003      	movs	r3, r0
 800295e:	3315      	adds	r3, #21
 8002960:	409d      	lsls	r5, r3
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <__aeabi_f2d+0x88>)
 8002964:	0312      	lsls	r2, r2, #12
 8002966:	1a1b      	subs	r3, r3, r0
 8002968:	055b      	lsls	r3, r3, #21
 800296a:	0b12      	lsrs	r2, r2, #12
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	e7e1      	b.n	8002934 <__aeabi_f2d+0x20>
 8002970:	2d00      	cmp	r5, #0
 8002972:	d009      	beq.n	8002988 <__aeabi_f2d+0x74>
 8002974:	0b13      	lsrs	r3, r2, #12
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	0312      	lsls	r2, r2, #12
 800297a:	431a      	orrs	r2, r3
 800297c:	076d      	lsls	r5, r5, #29
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <__aeabi_f2d+0x8c>)
 8002980:	e7d8      	b.n	8002934 <__aeabi_f2d+0x20>
 8002982:	2300      	movs	r3, #0
 8002984:	2200      	movs	r2, #0
 8002986:	e7d5      	b.n	8002934 <__aeabi_f2d+0x20>
 8002988:	2200      	movs	r2, #0
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <__aeabi_f2d+0x8c>)
 800298c:	e7d2      	b.n	8002934 <__aeabi_f2d+0x20>
 800298e:	0003      	movs	r3, r0
 8002990:	002a      	movs	r2, r5
 8002992:	3b0b      	subs	r3, #11
 8002994:	409a      	lsls	r2, r3
 8002996:	2500      	movs	r5, #0
 8002998:	e7e3      	b.n	8002962 <__aeabi_f2d+0x4e>
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	00000389 	.word	0x00000389
 80029a0:	000007ff 	.word	0x000007ff

080029a4 <__clzsi2>:
 80029a4:	211c      	movs	r1, #28
 80029a6:	2301      	movs	r3, #1
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	4298      	cmp	r0, r3
 80029ac:	d301      	bcc.n	80029b2 <__clzsi2+0xe>
 80029ae:	0c00      	lsrs	r0, r0, #16
 80029b0:	3910      	subs	r1, #16
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	4298      	cmp	r0, r3
 80029b6:	d301      	bcc.n	80029bc <__clzsi2+0x18>
 80029b8:	0a00      	lsrs	r0, r0, #8
 80029ba:	3908      	subs	r1, #8
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	4298      	cmp	r0, r3
 80029c0:	d301      	bcc.n	80029c6 <__clzsi2+0x22>
 80029c2:	0900      	lsrs	r0, r0, #4
 80029c4:	3904      	subs	r1, #4
 80029c6:	a202      	add	r2, pc, #8	@ (adr r2, 80029d0 <__clzsi2+0x2c>)
 80029c8:	5c10      	ldrb	r0, [r2, r0]
 80029ca:	1840      	adds	r0, r0, r1
 80029cc:	4770      	bx	lr
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	02020304 	.word	0x02020304
 80029d4:	01010101 	.word	0x01010101
	...

080029e0 <__clzdi2>:
 80029e0:	b510      	push	{r4, lr}
 80029e2:	2900      	cmp	r1, #0
 80029e4:	d103      	bne.n	80029ee <__clzdi2+0xe>
 80029e6:	f7ff ffdd 	bl	80029a4 <__clzsi2>
 80029ea:	3020      	adds	r0, #32
 80029ec:	e002      	b.n	80029f4 <__clzdi2+0x14>
 80029ee:	0008      	movs	r0, r1
 80029f0:	f7ff ffd8 	bl	80029a4 <__clzsi2>
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)

080029f8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// UART stdio printf
int __io_putchar(int ch) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002a00:	2301      	movs	r3, #1
 8002a02:	425b      	negs	r3, r3
 8002a04:	1d39      	adds	r1, r7, #4
 8002a06:	4804      	ldr	r0, [pc, #16]	@ (8002a18 <__io_putchar+0x20>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f004 fe0d 	bl	8007628 <HAL_UART_Transmit>
  return ch;
 8002a0e:	687b      	ldr	r3, [r7, #4]
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000320 	.word	0x20000320

08002a1c <TI_ReadTemperature>:
        return 0;
    }
}


static int16_t TI_ReadTemperature(I2C_HandleTypeDef *hi2c) {
 8002a1c:	b5b0      	push	{r4, r5, r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	6078      	str	r0, [r7, #4]
    const uint8_t TEMP_SENSOR_ADDR = 0x9E;
 8002a24:	2117      	movs	r1, #23
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	229e      	movs	r2, #158	@ 0x9e
 8002a2a:	701a      	strb	r2, [r3, #0]
    const uint8_t CTRL_REG_ADDR    = 0x01;
 8002a2c:	2316      	movs	r3, #22
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
    const uint8_t TEMP_REG_ADDR    = 0x00;
 8002a34:	2015      	movs	r0, #21
 8002a36:	183b      	adds	r3, r7, r0
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
//    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
//    HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
//    HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);     //

    //HAL_I2C_Mem_Write(hi2c, TEMP_SENSOR_ADDR, CTRL_REG_ADDR, I2C_MEMADD_SIZE_8BIT, &controlcmd, 1, HAL_MAX_DELAY);
    uint8_t reg = TEMP_REG_ADDR;
 8002a3c:	2511      	movs	r5, #17
 8002a3e:	197b      	adds	r3, r7, r5
 8002a40:	183a      	adds	r2, r7, r0
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	701a      	strb	r2, [r3, #0]
    uint8_t temp_raw[2];

    //Read 2 bytes from the sensor temperature register address, store in temp_raw
    if (HAL_I2C_Master_Transmit(hi2c, TEMP_SENSOR_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK &&
 8002a46:	000c      	movs	r4, r1
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b299      	uxth	r1, r3
 8002a4e:	197a      	adds	r2, r7, r5
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	2301      	movs	r3, #1
 8002a54:	425b      	negs	r3, r3
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f001 f96b 	bl	8003d34 <HAL_I2C_Master_Transmit>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d124      	bne.n	8002aac <TI_ReadTemperature+0x90>
        HAL_I2C_Master_Receive(hi2c, TEMP_SENSOR_ADDR, temp_raw, 2, HAL_MAX_DELAY) == HAL_OK)
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b299      	uxth	r1, r3
 8002a68:	240c      	movs	r4, #12
 8002a6a:	193a      	adds	r2, r7, r4
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	425b      	negs	r3, r3
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2302      	movs	r3, #2
 8002a76:	f001 fa65 	bl	8003f44 <HAL_I2C_Master_Receive>
 8002a7a:	1e03      	subs	r3, r0, #0
    if (HAL_I2C_Master_Transmit(hi2c, TEMP_SENSOR_ADDR, &reg, 1, HAL_MAX_DELAY) == HAL_OK &&
 8002a7c:	d116      	bne.n	8002aac <TI_ReadTemperature+0x90>
    {
        int16_t temp = (int16_t)((temp_raw[0] << 8) | temp_raw[1]); //combine MSB with LSB
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b219      	sxth	r1, r3
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	2012      	movs	r0, #18
 8002a90:	183b      	adds	r3, r7, r0
 8002a92:	430a      	orrs	r2, r1
 8002a94:	801a      	strh	r2, [r3, #0]
        temp >>= 4; // Shift right to get 10-bit value
 8002a96:	0001      	movs	r1, r0
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	187a      	adds	r2, r7, r1
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	5e12      	ldrsh	r2, [r2, r0]
 8002aa0:	1112      	asrs	r2, r2, #4
 8002aa2:	801a      	strh	r2, [r3, #0]
        //printf("temp: 0x%ld\r\n", temp);
        //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); //Sensor Vss OFF
        return temp;
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	5e9b      	ldrsh	r3, [r3, r2]
 8002aaa:	e004      	b.n	8002ab6 <TI_ReadTemperature+0x9a>
    }
    else
    {
        printf("Failed to read temperature\r\n");
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <TI_ReadTemperature+0xa4>)
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f006 f908 	bl	8008cc4 <puts>
        return 0;
 8002ab4:	2300      	movs	r3, #0
    }
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b006      	add	sp, #24
 8002abc:	bdb0      	pop	{r4, r5, r7, pc}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	0800ad08 	.word	0x0800ad08

08002ac4 <I2C_Scan>:
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); //MEM Vss OFF

}


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    printf("Starting I2C scan...\r\n");
 8002acc:	4b25      	ldr	r3, [pc, #148]	@ (8002b64 <I2C_Scan+0xa0>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f006 f8f8 	bl	8008cc4 <puts>
    uint8_t device_found = 0;
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]

    for (uint16_t addr = 0x08; addr <= 0x77; addr++) {
 8002adc:	230c      	movs	r3, #12
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	801a      	strh	r2, [r3, #0]
 8002ae4:	e022      	b.n	8002b2c <I2C_Scan+0x68>
        // The HAL expects the 7-bit address shifted left by 1
        uint16_t devAddress = addr << 1;
 8002ae6:	210a      	movs	r1, #10
 8002ae8:	187a      	adds	r2, r7, r1
 8002aea:	240c      	movs	r4, #12
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	18db      	adds	r3, r3, r3
 8002af2:	8013      	strh	r3, [r2, #0]

        if (HAL_I2C_IsDeviceReady(hi2c, devAddress, 3, 10) == HAL_OK) {
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	8819      	ldrh	r1, [r3, #0]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	230a      	movs	r3, #10
 8002afc:	2203      	movs	r2, #3
 8002afe:	f001 fb29 	bl	8004154 <HAL_I2C_IsDeviceReady>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d10c      	bne.n	8002b20 <I2C_Scan+0x5c>
            printf("I2C device found at 0x%02X\r\n", addr);
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	881a      	ldrh	r2, [r3, #0]
 8002b0a:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <I2C_Scan+0xa4>)
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f006 f872 	bl	8008bf8 <iprintf>
            device_found++;
 8002b14:	210f      	movs	r1, #15
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	187b      	adds	r3, r7, r1
 8002b1c:	3201      	adds	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
    for (uint16_t addr = 0x08; addr <= 0x77; addr++) {
 8002b20:	210c      	movs	r1, #12
 8002b22:	187b      	adds	r3, r7, r1
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	3201      	adds	r2, #1
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	2b77      	cmp	r3, #119	@ 0x77
 8002b34:	d9d7      	bls.n	8002ae6 <I2C_Scan+0x22>
        }
    }

    if (device_found == 0) {
 8002b36:	230f      	movs	r3, #15
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <I2C_Scan+0x86>
        printf("No I2C devices found.\r\n");
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <I2C_Scan+0xa8>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f006 f8be 	bl	8008cc4 <puts>
    } else {
        printf("Scan complete. %d device(s) found.\r\n", device_found);
    }
}
 8002b48:	e007      	b.n	8002b5a <I2C_Scan+0x96>
        printf("Scan complete. %d device(s) found.\r\n", device_found);
 8002b4a:	230f      	movs	r3, #15
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	4b07      	ldr	r3, [pc, #28]	@ (8002b70 <I2C_Scan+0xac>)
 8002b52:	0011      	movs	r1, r2
 8002b54:	0018      	movs	r0, r3
 8002b56:	f006 f84f 	bl	8008bf8 <iprintf>
}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b005      	add	sp, #20
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	0800ad24 	.word	0x0800ad24
 8002b68:	0800ad3c 	.word	0x0800ad3c
 8002b6c:	0800ad5c 	.word	0x0800ad5c
 8002b70:	0800ad74 	.word	0x0800ad74

08002b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b7a:	f000 fd28 	bl	80035ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b7e:	f000 f84f 	bl	8002c20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_PWREx_EnableUltraLowPowerMode(); //lowers power slightly in standby mode
 8002b82:	f002 fd5b 	bl	800563c <HAL_PWREx_EnableUltraLowPowerMode>
  HAL_PWREx_EnableLowPowerRunMode(); //about halves active current draw
 8002b86:	f002 fd4b 	bl	8005620 <HAL_PWREx_EnableLowPowerRunMode>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b8a:	f000 f9d9 	bl	8002f40 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002b8e:	f000 f893 	bl	8002cb8 <MX_I2C2_Init>
  MX_RTC_Init();
 8002b92:	f000 f957 	bl	8002e44 <MX_RTC_Init>
  MX_I2C3_Init();
 8002b96:	f000 f8d7 	bl	8002d48 <MX_I2C3_Init>
  MX_LPTIM1_Init();
 8002b9a:	f000 f91d 	bl	8002dd8 <MX_LPTIM1_Init>
  MX_USART2_UART_Init();
 8002b9e:	f000 f981 	bl	8002ea4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //printf("Fresh startup.\r\n");
  I2C_Scan(&hi2c2);
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <main+0x9c>)
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff ff8d 	bl	8002ac4 <I2C_Scan>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);      // Deactivate wakeup timer before setting it again
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <main+0xa0>)
 8002bac:	0018      	movs	r0, r3
 8002bae:	f004 fcbb 	bl	8007528 <HAL_RTCEx_DeactivateWakeUpTimer>

  //printf("readtemp\r\n");
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //Sensor Vss ON
 8002bb2:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <main+0xa4>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2120      	movs	r1, #32
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fff7 	bl	8003bac <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8002bbe:	2014      	movs	r0, #20
 8002bc0:	f000 fd80 	bl	80036c4 <HAL_Delay>

  while(1)
  {
	  //float temp = (float)temperaturedata * 0.25f; // Convert to Celsius
	  int16_t temperaturedata = TI_ReadTemperature(&hi2c2); // Read temperature
 8002bc4:	1dbc      	adds	r4, r7, #6
 8002bc6:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <main+0x9c>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ff27 	bl	8002a1c <TI_ReadTemperature>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	8023      	strh	r3, [r4, #0]
	  float temp = (float)temperaturedata * 0.0625f; //dont know if works
 8002bd2:	1dbb      	adds	r3, r7, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	5e9b      	ldrsh	r3, [r3, r2]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7fd feab 	bl	8000934 <__aeabi_i2f>
 8002bde:	1c03      	adds	r3, r0, #0
 8002be0:	21f6      	movs	r1, #246	@ 0xf6
 8002be2:	0589      	lsls	r1, r1, #22
 8002be4:	1c18      	adds	r0, r3, #0
 8002be6:	f7fd fd4b 	bl	8000680 <__aeabi_fmul>
 8002bea:	1c03      	adds	r3, r0, #0
 8002bec:	603b      	str	r3, [r7, #0]
	  printf("%.2f\r\n", temp);
 8002bee:	6838      	ldr	r0, [r7, #0]
 8002bf0:	f7ff fe90 	bl	8002914 <__aeabi_f2d>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	000b      	movs	r3, r1
 8002bf8:	4908      	ldr	r1, [pc, #32]	@ (8002c1c <main+0xa8>)
 8002bfa:	0008      	movs	r0, r1
 8002bfc:	f005 fffc 	bl	8008bf8 <iprintf>
	  HAL_Delay(1000);
 8002c00:	23fa      	movs	r3, #250	@ 0xfa
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fd5d 	bl	80036c4 <HAL_Delay>
  {
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	e7da      	b.n	8002bc4 <main+0x50>
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	200001f0 	.word	0x200001f0
 8002c14:	200002f0 	.word	0x200002f0
 8002c18:	50000800 	.word	0x50000800
 8002c1c:	0800ad9c 	.word	0x0800ad9c

08002c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b099      	sub	sp, #100	@ 0x64
 8002c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c26:	2414      	movs	r4, #20
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	234c      	movs	r3, #76	@ 0x4c
 8002c2e:	001a      	movs	r2, r3
 8002c30:	2100      	movs	r1, #0
 8002c32:	f006 f93d 	bl	8008eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	0018      	movs	r0, r3
 8002c3a:	2310      	movs	r3, #16
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f006 f936 	bl	8008eb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f002 fc7d 	bl	8005548 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002c4e:	0021      	movs	r1, r4
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2218      	movs	r2, #24
 8002c54:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2201      	movs	r2, #1
 8002c5a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2201      	movs	r2, #1
 8002c60:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_3;
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2230      	movs	r2, #48	@ 0x30
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2200      	movs	r2, #0
 8002c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	0018      	movs	r0, r3
 8002c78:	f002 fcee 	bl	8005658 <HAL_RCC_OscConfig>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d001      	beq.n	8002c84 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002c80:	f000 f9c8 	bl	8003014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	2207      	movs	r2, #7
 8002c88:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f003 f903 	bl	8005eac <HAL_RCC_ClockConfig>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d001      	beq.n	8002cae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002caa:	f000 f9b3 	bl	8003014 <Error_Handler>
  }
}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b019      	add	sp, #100	@ 0x64
 8002cb4:	bd90      	pop	{r4, r7, pc}
	...

08002cb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002cbc:	4b20      	ldr	r3, [pc, #128]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cbe:	4a21      	ldr	r2, [pc, #132]	@ (8002d44 <MX_I2C2_Init+0x8c>)
 8002cc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000000;
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 ff77 	bl	8003be8 <HAL_I2C_Init>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002cfe:	f000 f989 	bl	8003014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002d04:	2100      	movs	r1, #0
 8002d06:	0018      	movs	r0, r3
 8002d08:	f001 fe16 	bl	8004938 <HAL_I2CEx_ConfigAnalogFilter>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002d10:	f000 f980 	bl	8003014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d14:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f001 fe59 	bl	80049d0 <HAL_I2CEx_ConfigDigitalFilter>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002d22:	f000 f977 	bl	8003014 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  if (HAL_I2CEx_ConfigFastModePlus(&hi2c2, I2C_FASTMODEPLUS_ENABLE) != HAL_OK)
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <MX_I2C2_Init+0x88>)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f001 fe9c 	bl	8004a68 <HAL_I2CEx_ConfigFastModePlus>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <MX_I2C2_Init+0x80>
  {
    Error_Handler();
 8002d34:	f000 f96e 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	200001f0 	.word	0x200001f0
 8002d44:	40005800 	.word	0x40005800

08002d48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002d4c:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d4e:	4a21      	ldr	r2, [pc, #132]	@ (8002dd4 <MX_I2C3_Init+0x8c>)
 8002d50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 8002d52:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d64:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002d6a:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 ff2f 	bl	8003be8 <HAL_I2C_Init>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002d8e:	f000 f941 	bl	8003014 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d92:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002d94:	2100      	movs	r1, #0
 8002d96:	0018      	movs	r0, r3
 8002d98:	f001 fdce 	bl	8004938 <HAL_I2CEx_ConfigAnalogFilter>
 8002d9c:	1e03      	subs	r3, r0, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002da0:	f000 f938 	bl	8003014 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002da4:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002da6:	2100      	movs	r1, #0
 8002da8:	0018      	movs	r0, r3
 8002daa:	f001 fe11 	bl	80049d0 <HAL_I2CEx_ConfigDigitalFilter>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002db2:	f000 f92f 	bl	8003014 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  if (HAL_I2CEx_ConfigFastModePlus(&hi2c3, I2C_FASTMODEPLUS_ENABLE) != HAL_OK)
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <MX_I2C3_Init+0x88>)
 8002db8:	2100      	movs	r1, #0
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f001 fe54 	bl	8004a68 <HAL_I2CEx_ConfigFastModePlus>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_I2C3_Init+0x80>
  {
    Error_Handler();
 8002dc4:	f000 f926 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	20000244 	.word	0x20000244
 8002dd4:	40008800 	.word	0x40008800

08002dd8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002ddc:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002dde:	4a17      	ldr	r2, [pc, #92]	@ (8002e3c <MX_LPTIM1_Init+0x64>)
 8002de0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002de8:	4b13      	ldr	r3, [pc, #76]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002dea:	22a0      	movs	r2, #160	@ 0xa0
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002df0:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002df2:	4a13      	ldr	r2, [pc, #76]	@ (8002e40 <MX_LPTIM1_Init+0x68>)
 8002df4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 20;
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002df8:	2214      	movs	r2, #20
 8002dfa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002e1a:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f001 fe73 	bl	8004b08 <HAL_LPTIM_Init>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <MX_LPTIM1_Init+0x52>
  {
    Error_Handler();
 8002e26:	f000 f8f5 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */
  HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
 8002e2a:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <MX_LPTIM1_Init+0x60>)
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f001 ffbd 	bl	8004dac <HAL_LPTIM_TimeOut_Stop_IT>
  /* USER CODE END LPTIM1_Init 2 */

}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000298 	.word	0x20000298
 8002e3c:	40007c00 	.word	0x40007c00
 8002e40:	0000ffff 	.word	0x0000ffff

08002e44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ea0 <MX_RTC_Init+0x5c>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e50:	227f      	movs	r2, #127	@ 0x7f
 8002e52:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e68:	2280      	movs	r2, #128	@ 0x80
 8002e6a:	05d2      	lsls	r2, r2, #23
 8002e6c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e76:	2280      	movs	r2, #128	@ 0x80
 8002e78:	0052      	lsls	r2, r2, #1
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e7c:	4b07      	ldr	r3, [pc, #28]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f004 fa5a 	bl	8007338 <HAL_RTC_Init>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d001      	beq.n	8002e8c <MX_RTC_Init+0x48>
  {
    Error_Handler();
 8002e88:	f000 f8c4 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <MX_RTC_Init+0x58>)
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f004 fb4a 	bl	8007528 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	200002f0 	.word	0x200002f0
 8002ea0:	40002800 	.word	0x40002800

08002ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002eaa:	4a24      	ldr	r2, [pc, #144]	@ (8002f3c <MX_USART2_UART_Init+0x98>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002eb0:	2296      	movs	r2, #150	@ 0x96
 8002eb2:	0192      	lsls	r2, r2, #6
 8002eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eda:	4b17      	ldr	r3, [pc, #92]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ee6:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f004 fb44 	bl	800757c <HAL_UART_Init>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002ef8:	f000 f88c 	bl	8003014 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002efc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002efe:	2100      	movs	r1, #0
 8002f00:	0018      	movs	r0, r3
 8002f02:	f005 f875 	bl	8007ff0 <HAL_UARTEx_SetTxFifoThreshold>
 8002f06:	1e03      	subs	r3, r0, #0
 8002f08:	d001      	beq.n	8002f0e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f0a:	f000 f883 	bl	8003014 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	0018      	movs	r0, r3
 8002f14:	f005 f8ac 	bl	8008070 <HAL_UARTEx_SetRxFifoThreshold>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002f1c:	f000 f87a 	bl	8003014 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <MX_USART2_UART_Init+0x94>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f005 f82a 	bl	8007f7c <HAL_UARTEx_DisableFifoMode>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002f2c:	f000 f872 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	20000320 	.word	0x20000320
 8002f3c:	40004400 	.word	0x40004400

08002f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	240c      	movs	r4, #12
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	2314      	movs	r3, #20
 8002f4e:	001a      	movs	r2, r3
 8002f50:	2100      	movs	r1, #0
 8002f52:	f005 ffad 	bl	8008eb0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	4b2c      	ldr	r3, [pc, #176]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f62:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6e:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f72:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f74:	2104      	movs	r1, #4
 8002f76:	430a      	orrs	r2, r1
 8002f78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f7a:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7e:	2204      	movs	r2, #4
 8002f80:	4013      	ands	r3, r2
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f92:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <MX_GPIO_Init+0xc8>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	2202      	movs	r2, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <MX_GPIO_Init+0xcc>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fe01 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002faa:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <MX_GPIO_Init+0xd0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	2102      	movs	r1, #2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fdfb 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	2220      	movs	r2, #32
 8002fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbc:	193b      	adds	r3, r7, r4
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800300c <MX_GPIO_Init+0xcc>)
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	f000 fc75 	bl	80038c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fda:	0021      	movs	r1, r4
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	4a06      	ldr	r2, [pc, #24]	@ (8003010 <MX_GPIO_Init+0xd0>)
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	0010      	movs	r0, r2
 8002ffc:	f000 fc62 	bl	80038c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003000:	46c0      	nop			@ (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b009      	add	sp, #36	@ 0x24
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	50000800 	.word	0x50000800
 8003010:	50000400 	.word	0x50000400

08003014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	e7fd      	b.n	800301c <Error_Handler+0x8>

08003020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	4b0f      	ldr	r3, [pc, #60]	@ (8003064 <HAL_MspInit+0x44>)
 8003028:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800302a:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <HAL_MspInit+0x44>)
 800302c:	2180      	movs	r1, #128	@ 0x80
 800302e:	0549      	lsls	r1, r1, #21
 8003030:	430a      	orrs	r2, r1
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_MspInit+0x44>)
 8003036:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	055b      	lsls	r3, r3, #21
 800303c:	4013      	ands	r3, r2
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_MspInit+0x44>)
 8003044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003046:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <HAL_MspInit+0x44>)
 8003048:	2101      	movs	r1, #1
 800304a:	430a      	orrs	r2, r1
 800304c:	661a      	str	r2, [r3, #96]	@ 0x60
 800304e:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_MspInit+0x44>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	2201      	movs	r2, #1
 8003054:	4013      	ands	r3, r2
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b09d      	sub	sp, #116	@ 0x74
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	245c      	movs	r4, #92	@ 0x5c
 8003072:	193b      	adds	r3, r7, r4
 8003074:	0018      	movs	r0, r3
 8003076:	2314      	movs	r3, #20
 8003078:	001a      	movs	r2, r3
 800307a:	2100      	movs	r1, #0
 800307c:	f005 ff18 	bl	8008eb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003080:	2318      	movs	r3, #24
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	0018      	movs	r0, r3
 8003086:	2344      	movs	r3, #68	@ 0x44
 8003088:	001a      	movs	r2, r3
 800308a:	2100      	movs	r1, #0
 800308c:	f005 ff10 	bl	8008eb0 <memset>
  if(hi2c->Instance==I2C2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3e      	ldr	r2, [pc, #248]	@ (8003190 <HAL_I2C_MspInit+0x128>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d131      	bne.n	80030fe <HAL_I2C_MspInit+0x96>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	4b3e      	ldr	r3, [pc, #248]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 800309c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800309e:	4b3d      	ldr	r3, [pc, #244]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 80030a0:	2101      	movs	r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80030a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA6     ------> I2C2_SDA
    PA7     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030b2:	0021      	movs	r1, r4
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	22c0      	movs	r2, #192	@ 0xc0
 80030b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2212      	movs	r2, #18
 80030be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C2;
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	2203      	movs	r2, #3
 80030d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d2:	187a      	adds	r2, r7, r1
 80030d4:	23a0      	movs	r3, #160	@ 0xa0
 80030d6:	05db      	lsls	r3, r3, #23
 80030d8:	0011      	movs	r1, r2
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 fbf2 	bl	80038c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 80030e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 80030e6:	2180      	movs	r1, #128	@ 0x80
 80030e8:	03c9      	lsls	r1, r1, #15
 80030ea:	430a      	orrs	r2, r1
 80030ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80030ee:	4b29      	ldr	r3, [pc, #164]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 80030f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	03db      	lsls	r3, r3, #15
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80030fc:	e043      	b.n	8003186 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a25      	ldr	r2, [pc, #148]	@ (8003198 <HAL_I2C_MspInit+0x130>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d13e      	bne.n	8003186 <HAL_I2C_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003108:	2118      	movs	r1, #24
 800310a:	187b      	adds	r3, r7, r1
 800310c:	2240      	movs	r2, #64	@ 0x40
 800310e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003116:	187b      	adds	r3, r7, r1
 8003118:	0018      	movs	r0, r3
 800311a:	f003 f8dd 	bl	80062d8 <HAL_RCCEx_PeriphCLKConfig>
 800311e:	1e03      	subs	r3, r0, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_MspInit+0xbe>
      Error_Handler();
 8003122:	f7ff ff77 	bl	8003014 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 8003128:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 800312c:	2102      	movs	r1, #2
 800312e:	430a      	orrs	r2, r1
 8003130:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003132:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800313e:	215c      	movs	r1, #92	@ 0x5c
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2218      	movs	r2, #24
 8003144:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003146:	187b      	adds	r3, r7, r1
 8003148:	2212      	movs	r2, #18
 800314a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	187b      	adds	r3, r7, r1
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	187b      	adds	r3, r7, r1
 8003154:	2200      	movs	r2, #0
 8003156:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003158:	187b      	adds	r3, r7, r1
 800315a:	2204      	movs	r2, #4
 800315c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	187b      	adds	r3, r7, r1
 8003160:	4a0e      	ldr	r2, [pc, #56]	@ (800319c <HAL_I2C_MspInit+0x134>)
 8003162:	0019      	movs	r1, r3
 8003164:	0010      	movs	r0, r2
 8003166:	f000 fbad 	bl	80038c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 800316c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800316e:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 8003170:	2180      	movs	r1, #128	@ 0x80
 8003172:	0409      	lsls	r1, r1, #16
 8003174:	430a      	orrs	r2, r1
 8003176:	659a      	str	r2, [r3, #88]	@ 0x58
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_I2C_MspInit+0x12c>)
 800317a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b01d      	add	sp, #116	@ 0x74
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	40005800 	.word	0x40005800
 8003194:	40021000 	.word	0x40021000
 8003198:	40008800 	.word	0x40008800
 800319c:	50000400 	.word	0x50000400

080031a0 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b095      	sub	sp, #84	@ 0x54
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a8:	240c      	movs	r4, #12
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	0018      	movs	r0, r3
 80031ae:	2344      	movs	r3, #68	@ 0x44
 80031b0:	001a      	movs	r2, r3
 80031b2:	2100      	movs	r1, #0
 80031b4:	f005 fe7c 	bl	8008eb0 <memset>
  if(hlptim->Instance==LPTIM1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <HAL_LPTIM_MspInit+0x74>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d123      	bne.n	800320a <HAL_LPTIM_MspInit+0x6a>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	2280      	movs	r2, #128	@ 0x80
 80031c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	02d2      	lsls	r2, r2, #11
 80031ce:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	f003 f880 	bl	80062d8 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d001      	beq.n	80031e0 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80031dc:	f7ff ff1a 	bl	8003014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80031e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <HAL_LPTIM_MspInit+0x78>)
 80031e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <HAL_LPTIM_MspInit+0x78>)
 80031e6:	2180      	movs	r1, #128	@ 0x80
 80031e8:	0609      	lsls	r1, r1, #24
 80031ea:	430a      	orrs	r2, r1
 80031ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <HAL_LPTIM_MspInit+0x78>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	0fdb      	lsrs	r3, r3, #31
 80031f4:	07db      	lsls	r3, r3, #31
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2011      	movs	r0, #17
 8003200:	f000 fb2e 	bl	8003860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003204:	2011      	movs	r0, #17
 8003206:	f000 fb40 	bl	800388a <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b015      	add	sp, #84	@ 0x54
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	40007c00 	.word	0x40007c00
 8003218:	40021000 	.word	0x40021000

0800321c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b095      	sub	sp, #84	@ 0x54
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003224:	240c      	movs	r4, #12
 8003226:	193b      	adds	r3, r7, r4
 8003228:	0018      	movs	r0, r3
 800322a:	2344      	movs	r3, #68	@ 0x44
 800322c:	001a      	movs	r2, r3
 800322e:	2100      	movs	r1, #0
 8003230:	f005 fe3e 	bl	8008eb0 <memset>
  if(hrtc->Instance==RTC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a16      	ldr	r2, [pc, #88]	@ (8003294 <HAL_RTC_MspInit+0x78>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d126      	bne.n	800328c <HAL_RTC_MspInit+0x70>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800323e:	193b      	adds	r3, r7, r4
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	0212      	lsls	r2, r2, #8
 8003244:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003246:	193b      	adds	r3, r7, r4
 8003248:	2280      	movs	r2, #128	@ 0x80
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800324e:	193b      	adds	r3, r7, r4
 8003250:	0018      	movs	r0, r3
 8003252:	f003 f841 	bl	80062d8 <HAL_RCCEx_PeriphCLKConfig>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800325a:	f7ff fedb 	bl	8003014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800325e:	4a0e      	ldr	r2, [pc, #56]	@ (8003298 <HAL_RTC_MspInit+0x7c>)
 8003260:	2390      	movs	r3, #144	@ 0x90
 8003262:	58d3      	ldr	r3, [r2, r3]
 8003264:	490c      	ldr	r1, [pc, #48]	@ (8003298 <HAL_RTC_MspInit+0x7c>)
 8003266:	2280      	movs	r2, #128	@ 0x80
 8003268:	0212      	lsls	r2, r2, #8
 800326a:	4313      	orrs	r3, r2
 800326c:	2290      	movs	r2, #144	@ 0x90
 800326e:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003270:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RTC_MspInit+0x7c>)
 8003272:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003274:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <HAL_RTC_MspInit+0x7c>)
 8003276:	2180      	movs	r1, #128	@ 0x80
 8003278:	00c9      	lsls	r1, r1, #3
 800327a:	430a      	orrs	r2, r1
 800327c:	659a      	str	r2, [r3, #88]	@ 0x58
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_RTC_MspInit+0x7c>)
 8003280:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4013      	ands	r3, r2
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800328c:	46c0      	nop			@ (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b015      	add	sp, #84	@ 0x54
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	40002800 	.word	0x40002800
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b09b      	sub	sp, #108	@ 0x6c
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	2354      	movs	r3, #84	@ 0x54
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	0018      	movs	r0, r3
 80032aa:	2314      	movs	r3, #20
 80032ac:	001a      	movs	r2, r3
 80032ae:	2100      	movs	r1, #0
 80032b0:	f005 fdfe 	bl	8008eb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032b4:	2410      	movs	r4, #16
 80032b6:	193b      	adds	r3, r7, r4
 80032b8:	0018      	movs	r0, r3
 80032ba:	2344      	movs	r3, #68	@ 0x44
 80032bc:	001a      	movs	r2, r3
 80032be:	2100      	movs	r1, #0
 80032c0:	f005 fdf6 	bl	8008eb0 <memset>
  if(huart->Instance==USART2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a22      	ldr	r2, [pc, #136]	@ (8003354 <HAL_UART_MspInit+0xb8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d13e      	bne.n	800334c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	2202      	movs	r2, #2
 80032d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	0018      	movs	r0, r3
 80032de:	f002 fffb 	bl	80062d8 <HAL_RCCEx_PeriphCLKConfig>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80032e6:	f7ff fe95 	bl	8003014 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80032ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <HAL_UART_MspInit+0xbc>)
 80032ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <HAL_UART_MspInit+0xbc>)
 80032f0:	2180      	movs	r1, #128	@ 0x80
 80032f2:	0289      	lsls	r1, r1, #10
 80032f4:	430a      	orrs	r2, r1
 80032f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80032f8:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <HAL_UART_MspInit+0xbc>)
 80032fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003306:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <HAL_UART_MspInit+0xbc>)
 8003308:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <HAL_UART_MspInit+0xbc>)
 800330c:	2101      	movs	r1, #1
 800330e:	430a      	orrs	r2, r1
 8003310:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003312:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <HAL_UART_MspInit+0xbc>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	2201      	movs	r2, #1
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800331e:	2154      	movs	r1, #84	@ 0x54
 8003320:	187b      	adds	r3, r7, r1
 8003322:	220c      	movs	r2, #12
 8003324:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	187b      	adds	r3, r7, r1
 8003328:	2202      	movs	r2, #2
 800332a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	187b      	adds	r3, r7, r1
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2200      	movs	r2, #0
 8003336:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003338:	187b      	adds	r3, r7, r1
 800333a:	2207      	movs	r2, #7
 800333c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	187a      	adds	r2, r7, r1
 8003340:	23a0      	movs	r3, #160	@ 0xa0
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f000 fabc 	bl	80038c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800334c:	46c0      	nop			@ (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b01b      	add	sp, #108	@ 0x6c
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	40004400 	.word	0x40004400
 8003358:	40021000 	.word	0x40021000

0800335c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	e7fd      	b.n	8003360 <NMI_Handler+0x4>

08003364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	e7fd      	b.n	8003368 <HardFault_Handler+0x4>

0800336c <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003370:	46c0      	nop			@ (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003384:	f000 f984 	bl	8003690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts (combined with EXTI 31).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003394:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003396:	0018      	movs	r0, r3
 8003398:	f001 fe12 	bl	8004fc0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	20000298 	.word	0x20000298

080033a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  return 1;
 80033ac:	2301      	movs	r3, #1
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_kill>:

int _kill(int pid, int sig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033be:	f005 fdd1 	bl	8008f64 <__errno>
 80033c2:	0003      	movs	r3, r0
 80033c4:	2216      	movs	r2, #22
 80033c6:	601a      	str	r2, [r3, #0]
  return -1;
 80033c8:	2301      	movs	r3, #1
 80033ca:	425b      	negs	r3, r3
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_exit>:

void _exit (int status)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033dc:	2301      	movs	r3, #1
 80033de:	425a      	negs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0011      	movs	r1, r2
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff ffe5 	bl	80033b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	e7fd      	b.n	80033ea <_exit+0x16>

080033ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e00a      	b.n	8003416 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003400:	e000      	b.n	8003404 <_read+0x16>
 8003402:	bf00      	nop
 8003404:	0001      	movs	r1, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	60ba      	str	r2, [r7, #8]
 800340c:	b2ca      	uxtb	r2, r1
 800340e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3301      	adds	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	429a      	cmp	r2, r3
 800341c:	dbf0      	blt.n	8003400 <_read+0x12>
  }

  return len;
 800341e:	687b      	ldr	r3, [r7, #4]
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b006      	add	sp, #24
 8003426:	bd80      	pop	{r7, pc}

08003428 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e009      	b.n	800344e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	60ba      	str	r2, [r7, #8]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff fad8 	bl	80029f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	dbf1      	blt.n	800343a <_write+0x12>
  }
  return len;
 8003456:	687b      	ldr	r3, [r7, #4]
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b006      	add	sp, #24
 800345e:	bd80      	pop	{r7, pc}

08003460 <_close>:

int _close(int file)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003468:	2301      	movs	r3, #1
 800346a:	425b      	negs	r3, r3
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2280      	movs	r2, #128	@ 0x80
 8003482:	0192      	lsls	r2, r2, #6
 8003484:	605a      	str	r2, [r3, #4]
  return 0;
 8003486:	2300      	movs	r3, #0
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b002      	add	sp, #8
 800348e:	bd80      	pop	{r7, pc}

08003490 <_isatty>:

int _isatty(int file)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003498:	2301      	movs	r3, #1
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b004      	add	sp, #16
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c0:	4a14      	ldr	r2, [pc, #80]	@ (8003514 <_sbrk+0x5c>)
 80034c2:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <_sbrk+0x60>)
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <_sbrk+0x64>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d4:	4b11      	ldr	r3, [pc, #68]	@ (800351c <_sbrk+0x64>)
 80034d6:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <_sbrk+0x68>)
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <_sbrk+0x64>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	18d3      	adds	r3, r2, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d207      	bcs.n	80034f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034e8:	f005 fd3c 	bl	8008f64 <__errno>
 80034ec:	0003      	movs	r3, r0
 80034ee:	220c      	movs	r2, #12
 80034f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	425b      	negs	r3, r3
 80034f6:	e009      	b.n	800350c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034f8:	4b08      	ldr	r3, [pc, #32]	@ (800351c <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034fe:	4b07      	ldr	r3, [pc, #28]	@ (800351c <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	18d2      	adds	r2, r2, r3
 8003506:	4b05      	ldr	r3, [pc, #20]	@ (800351c <_sbrk+0x64>)
 8003508:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b006      	add	sp, #24
 8003512:	bd80      	pop	{r7, pc}
 8003514:	2000a000 	.word	0x2000a000
 8003518:	00000400 	.word	0x00000400
 800351c:	200003b4 	.word	0x200003b4
 8003520:	20000508 	.word	0x20000508

08003524 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <SystemInit+0x50>)
 800352c:	2280      	movs	r2, #128	@ 0x80
 800352e:	0512      	lsls	r2, r2, #20
 8003530:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8003532:	4a11      	ldr	r2, [pc, #68]	@ (8003578 <SystemInit+0x54>)
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	58d3      	ldr	r3, [r2, r3]
 8003538:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800353a:	4b0f      	ldr	r3, [pc, #60]	@ (8003578 <SystemInit+0x54>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	2380      	movs	r3, #128	@ 0x80
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	4013      	ands	r3, r2
 8003548:	d010      	beq.n	800356c <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	22ff      	movs	r2, #255	@ 0xff
 800354e:	4013      	ands	r3, r2
 8003550:	2bcc      	cmp	r3, #204	@ 0xcc
 8003552:	d00b      	beq.n	800356c <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	22ff      	movs	r2, #255	@ 0xff
 8003558:	4013      	ands	r3, r2
 800355a:	2baa      	cmp	r3, #170	@ 0xaa
 800355c:	d006      	beq.n	800356c <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <SystemInit+0x54>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <SystemInit+0x54>)
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	02c9      	lsls	r1, r1, #11
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800356c:	46c0      	nop			@ (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}
 8003574:	e000ed00 	.word	0xe000ed00
 8003578:	40022000 	.word	0x40022000

0800357c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800357c:	480d      	ldr	r0, [pc, #52]	@ (80035b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800357e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003580:	f7ff ffd0 	bl	8003524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003584:	480c      	ldr	r0, [pc, #48]	@ (80035b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003586:	490d      	ldr	r1, [pc, #52]	@ (80035bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <LoopForever+0xe>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800358c:	e002      	b.n	8003594 <LoopCopyDataInit>

0800358e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003592:	3304      	adds	r3, #4

08003594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003598:	d3f9      	bcc.n	800358e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359a:	4a0a      	ldr	r2, [pc, #40]	@ (80035c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800359c:	4c0a      	ldr	r4, [pc, #40]	@ (80035c8 <LoopForever+0x16>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a0:	e001      	b.n	80035a6 <LoopFillZerobss>

080035a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a4:	3204      	adds	r2, #4

080035a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a8:	d3fb      	bcc.n	80035a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035aa:	f005 fce1 	bl	8008f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ae:	f7ff fae1 	bl	8002b74 <main>

080035b2 <LoopForever>:

LoopForever:
  b LoopForever
 80035b2:	e7fe      	b.n	80035b2 <LoopForever>
  ldr   r0, =_estack
 80035b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80035b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80035c0:	0800b25c 	.word	0x0800b25c
  ldr r2, =_sbss
 80035c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80035c8:	20000508 	.word	0x20000508

080035cc <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035cc:	e7fe      	b.n	80035cc <ADC_COMP1_2_IRQHandler>

080035ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035da:	2003      	movs	r0, #3
 80035dc:	f000 f80e 	bl	80035fc <HAL_InitTick>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d003      	beq.n	80035ec <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80035e4:	1dfb      	adds	r3, r7, #7
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e001      	b.n	80035f0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035ec:	f7ff fd18 	bl	8003020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035f0:	1dfb      	adds	r3, r7, #7
 80035f2:	781b      	ldrb	r3, [r3, #0]
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003604:	230f      	movs	r3, #15
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800360c:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <HAL_InitTick+0x88>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d02b      	beq.n	800366c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003614:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <HAL_InitTick+0x8c>)
 8003616:	681c      	ldr	r4, [r3, #0]
 8003618:	4b1a      	ldr	r3, [pc, #104]	@ (8003684 <HAL_InitTick+0x88>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0019      	movs	r1, r3
 800361e:	23fa      	movs	r3, #250	@ 0xfa
 8003620:	0098      	lsls	r0, r3, #2
 8003622:	f7fc fd8d 	bl	8000140 <__udivsi3>
 8003626:	0003      	movs	r3, r0
 8003628:	0019      	movs	r1, r3
 800362a:	0020      	movs	r0, r4
 800362c:	f7fc fd88 	bl	8000140 <__udivsi3>
 8003630:	0003      	movs	r3, r0
 8003632:	0018      	movs	r0, r3
 8003634:	f000 f939 	bl	80038aa <HAL_SYSTICK_Config>
 8003638:	1e03      	subs	r3, r0, #0
 800363a:	d112      	bne.n	8003662 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d80a      	bhi.n	8003658 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	2301      	movs	r3, #1
 8003646:	425b      	negs	r3, r3
 8003648:	2200      	movs	r2, #0
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f908 	bl	8003860 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <HAL_InitTick+0x90>)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e00d      	b.n	8003674 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003658:	230f      	movs	r3, #15
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e008      	b.n	8003674 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003662:	230f      	movs	r3, #15
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e003      	b.n	8003674 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800366c:	230f      	movs	r3, #15
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003674:	230f      	movs	r3, #15
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	781b      	ldrb	r3, [r3, #0]
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b005      	add	sp, #20
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000008 	.word	0x20000008
 8003688:	20000000 	.word	0x20000000
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003694:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <HAL_IncTick+0x18>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <HAL_IncTick+0x1c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	18d2      	adds	r2, r2, r3
 800369e:	4b02      	ldr	r3, [pc, #8]	@ (80036a8 <HAL_IncTick+0x18>)
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	200003b8 	.word	0x200003b8
 80036ac:	20000008 	.word	0x20000008

080036b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  return uwTick;
 80036b4:	4b02      	ldr	r3, [pc, #8]	@ (80036c0 <HAL_GetTick+0x10>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	200003b8 	.word	0x200003b8

080036c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036cc:	f7ff fff0 	bl	80036b0 <HAL_GetTick>
 80036d0:	0003      	movs	r3, r0
 80036d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	d004      	beq.n	80036e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <HAL_Delay+0x40>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036e8:	46c0      	nop			@ (mov r8, r8)
 80036ea:	f7ff ffe1 	bl	80036b0 <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d8f7      	bhi.n	80036ea <HAL_Delay+0x26>
  {
  }
}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000008 	.word	0x20000008

08003708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	0002      	movs	r2, r0
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b7f      	cmp	r3, #127	@ 0x7f
 800371a:	d809      	bhi.n	8003730 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371c:	1dfb      	adds	r3, r7, #7
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	001a      	movs	r2, r3
 8003722:	231f      	movs	r3, #31
 8003724:	401a      	ands	r2, r3
 8003726:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <__NVIC_EnableIRQ+0x30>)
 8003728:	2101      	movs	r1, #1
 800372a:	4091      	lsls	r1, r2
 800372c:	000a      	movs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}
 8003738:	e000e100 	.word	0xe000e100

0800373c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	0002      	movs	r2, r0
 8003744:	6039      	str	r1, [r7, #0]
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003750:	d828      	bhi.n	80037a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003752:	4a2f      	ldr	r2, [pc, #188]	@ (8003810 <__NVIC_SetPriority+0xd4>)
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b25b      	sxtb	r3, r3
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	33c0      	adds	r3, #192	@ 0xc0
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	589b      	ldr	r3, [r3, r2]
 8003762:	1dfa      	adds	r2, r7, #7
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	0011      	movs	r1, r2
 8003768:	2203      	movs	r2, #3
 800376a:	400a      	ands	r2, r1
 800376c:	00d2      	lsls	r2, r2, #3
 800376e:	21ff      	movs	r1, #255	@ 0xff
 8003770:	4091      	lsls	r1, r2
 8003772:	000a      	movs	r2, r1
 8003774:	43d2      	mvns	r2, r2
 8003776:	401a      	ands	r2, r3
 8003778:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	019b      	lsls	r3, r3, #6
 800377e:	22ff      	movs	r2, #255	@ 0xff
 8003780:	401a      	ands	r2, r3
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	0018      	movs	r0, r3
 8003788:	2303      	movs	r3, #3
 800378a:	4003      	ands	r3, r0
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003790:	481f      	ldr	r0, [pc, #124]	@ (8003810 <__NVIC_SetPriority+0xd4>)
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b25b      	sxtb	r3, r3
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	430a      	orrs	r2, r1
 800379c:	33c0      	adds	r3, #192	@ 0xc0
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037a2:	e031      	b.n	8003808 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003814 <__NVIC_SetPriority+0xd8>)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	0019      	movs	r1, r3
 80037ac:	230f      	movs	r3, #15
 80037ae:	400b      	ands	r3, r1
 80037b0:	3b08      	subs	r3, #8
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3306      	adds	r3, #6
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	18d3      	adds	r3, r2, r3
 80037ba:	3304      	adds	r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1dfa      	adds	r2, r7, #7
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	0011      	movs	r1, r2
 80037c4:	2203      	movs	r2, #3
 80037c6:	400a      	ands	r2, r1
 80037c8:	00d2      	lsls	r2, r2, #3
 80037ca:	21ff      	movs	r1, #255	@ 0xff
 80037cc:	4091      	lsls	r1, r2
 80037ce:	000a      	movs	r2, r1
 80037d0:	43d2      	mvns	r2, r2
 80037d2:	401a      	ands	r2, r3
 80037d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	019b      	lsls	r3, r3, #6
 80037da:	22ff      	movs	r2, #255	@ 0xff
 80037dc:	401a      	ands	r2, r3
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	0018      	movs	r0, r3
 80037e4:	2303      	movs	r3, #3
 80037e6:	4003      	ands	r3, r0
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ec:	4809      	ldr	r0, [pc, #36]	@ (8003814 <__NVIC_SetPriority+0xd8>)
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	001c      	movs	r4, r3
 80037f4:	230f      	movs	r3, #15
 80037f6:	4023      	ands	r3, r4
 80037f8:	3b08      	subs	r3, #8
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	430a      	orrs	r2, r1
 80037fe:	3306      	adds	r3, #6
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	18c3      	adds	r3, r0, r3
 8003804:	3304      	adds	r3, #4
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b003      	add	sp, #12
 800380e:	bd90      	pop	{r4, r7, pc}
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1e5a      	subs	r2, r3, #1
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	045b      	lsls	r3, r3, #17
 8003828:	429a      	cmp	r2, r3
 800382a:	d301      	bcc.n	8003830 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800382c:	2301      	movs	r3, #1
 800382e:	e010      	b.n	8003852 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <SysTick_Config+0x44>)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	3a01      	subs	r2, #1
 8003836:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003838:	2301      	movs	r3, #1
 800383a:	425b      	negs	r3, r3
 800383c:	2103      	movs	r1, #3
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff ff7c 	bl	800373c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003844:	4b05      	ldr	r3, [pc, #20]	@ (800385c <SysTick_Config+0x44>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384a:	4b04      	ldr	r3, [pc, #16]	@ (800385c <SysTick_Config+0x44>)
 800384c:	2207      	movs	r2, #7
 800384e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003850:	2300      	movs	r3, #0
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b002      	add	sp, #8
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	e000e010 	.word	0xe000e010

08003860 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	210f      	movs	r1, #15
 800386c:	187b      	adds	r3, r7, r1
 800386e:	1c02      	adds	r2, r0, #0
 8003870:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	187b      	adds	r3, r7, r1
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b25b      	sxtb	r3, r3
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff ff5d 	bl	800373c <__NVIC_SetPriority>
}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b004      	add	sp, #16
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	0002      	movs	r2, r0
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b25b      	sxtb	r3, r3
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ff33 	bl	8003708 <__NVIC_EnableIRQ>
}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b002      	add	sp, #8
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ffaf 	bl	8003818 <SysTick_Config>
 80038ba:	0003      	movs	r3, r0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d2:	e153      	b.n	8003b7c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4091      	lsls	r1, r2
 80038de:	000a      	movs	r2, r1
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d100      	bne.n	80038ec <HAL_GPIO_Init+0x28>
 80038ea:	e144      	b.n	8003b76 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2203      	movs	r2, #3
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d005      	beq.n	8003904 <HAL_GPIO_Init+0x40>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	4013      	ands	r3, r2
 8003900:	2b02      	cmp	r3, #2
 8003902:	d130      	bne.n	8003966 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	409a      	lsls	r2, r3
 8003912:	0013      	movs	r3, r2
 8003914:	43da      	mvns	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	409a      	lsls	r2, r3
 8003926:	0013      	movs	r3, r2
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800393a:	2201      	movs	r2, #1
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	43da      	mvns	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	2201      	movs	r2, #1
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
 8003958:	0013      	movs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2203      	movs	r2, #3
 800396c:	4013      	ands	r3, r2
 800396e:	2b03      	cmp	r3, #3
 8003970:	d017      	beq.n	80039a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	43da      	mvns	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	0013      	movs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d123      	bne.n	80039f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	0092      	lsls	r2, r2, #2
 80039b8:	58d3      	ldr	r3, [r2, r3]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2207      	movs	r2, #7
 80039c0:	4013      	ands	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	409a      	lsls	r2, r3
 80039c8:	0013      	movs	r3, r2
 80039ca:	43da      	mvns	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2107      	movs	r1, #7
 80039da:	400b      	ands	r3, r1
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	409a      	lsls	r2, r3
 80039e0:	0013      	movs	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	409a      	lsls	r2, r3
 8003a04:	0013      	movs	r3, r2
 8003a06:	43da      	mvns	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2203      	movs	r2, #3
 8003a14:	401a      	ands	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	23c0      	movs	r3, #192	@ 0xc0
 8003a30:	029b      	lsls	r3, r3, #10
 8003a32:	4013      	ands	r3, r2
 8003a34:	d100      	bne.n	8003a38 <HAL_GPIO_Init+0x174>
 8003a36:	e09e      	b.n	8003b76 <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a38:	4a56      	ldr	r2, [pc, #344]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3318      	adds	r3, #24
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	589b      	ldr	r3, [r3, r2]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	220f      	movs	r2, #15
 8003a50:	409a      	lsls	r2, r3
 8003a52:	0013      	movs	r3, r2
 8003a54:	43da      	mvns	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	23a0      	movs	r3, #160	@ 0xa0
 8003a60:	05db      	lsls	r3, r3, #23
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d01f      	beq.n	8003aa6 <HAL_GPIO_Init+0x1e2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4b      	ldr	r2, [pc, #300]	@ (8003b98 <HAL_GPIO_Init+0x2d4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d019      	beq.n	8003aa2 <HAL_GPIO_Init+0x1de>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_GPIO_Init+0x2d8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_GPIO_Init+0x1da>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a49      	ldr	r2, [pc, #292]	@ (8003ba0 <HAL_GPIO_Init+0x2dc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00d      	beq.n	8003a9a <HAL_GPIO_Init+0x1d6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a48      	ldr	r2, [pc, #288]	@ (8003ba4 <HAL_GPIO_Init+0x2e0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <HAL_GPIO_Init+0x1d2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <HAL_GPIO_Init+0x2e4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_GPIO_Init+0x1ce>
 8003a8e:	2305      	movs	r3, #5
 8003a90:	e00a      	b.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003a92:	2306      	movs	r3, #6
 8003a94:	e008      	b.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003a96:	2304      	movs	r3, #4
 8003a98:	e006      	b.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e004      	b.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e002      	b.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_GPIO_Init+0x1e4>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	2103      	movs	r1, #3
 8003aac:	400a      	ands	r2, r1
 8003aae:	00d2      	lsls	r2, r2, #3
 8003ab0:	4093      	lsls	r3, r2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ab8:	4936      	ldr	r1, [pc, #216]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	089b      	lsrs	r3, r3, #2
 8003abe:	3318      	adds	r3, #24
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac6:	4b33      	ldr	r3, [pc, #204]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	2380      	movs	r3, #128	@ 0x80
 8003adc:	035b      	lsls	r3, r3, #13
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003aea:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	43da      	mvns	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	039b      	lsls	r3, r3, #14
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b14:	4b1f      	ldr	r3, [pc, #124]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b1c:	2384      	movs	r3, #132	@ 0x84
 8003b1e:	58d3      	ldr	r3, [r2, r3]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	43da      	mvns	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	4013      	ands	r3, r2
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b40:	4914      	ldr	r1, [pc, #80]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b42:	2284      	movs	r2, #132	@ 0x84
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b48:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b4a:	2380      	movs	r3, #128	@ 0x80
 8003b4c:	58d3      	ldr	r3, [r2, r3]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	025b      	lsls	r3, r3, #9
 8003b62:	4013      	ands	r3, r2
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b6e:	4909      	ldr	r1, [pc, #36]	@ (8003b94 <HAL_GPIO_Init+0x2d0>)
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	40da      	lsrs	r2, r3
 8003b84:	1e13      	subs	r3, r2, #0
 8003b86:	d000      	beq.n	8003b8a <HAL_GPIO_Init+0x2c6>
 8003b88:	e6a4      	b.n	80038d4 <HAL_GPIO_Init+0x10>
  }
}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46c0      	nop			@ (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b006      	add	sp, #24
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021800 	.word	0x40021800
 8003b98:	50000400 	.word	0x50000400
 8003b9c:	50000800 	.word	0x50000800
 8003ba0:	50000c00 	.word	0x50000c00
 8003ba4:	50001000 	.word	0x50001000
 8003ba8:	50001400 	.word	0x50001400

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	0008      	movs	r0, r1
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	1cbb      	adds	r3, r7, #2
 8003bba:	1c02      	adds	r2, r0, #0
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	1c7b      	adds	r3, r7, #1
 8003bc0:	1c0a      	adds	r2, r1, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc4:	1c7b      	adds	r3, r7, #1
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bcc:	1cbb      	adds	r3, r7, #2
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd4:	e003      	b.n	8003bde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bd6:	1cbb      	adds	r3, r7, #2
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e08f      	b.n	8003d1a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2241      	movs	r2, #65	@ 0x41
 8003bfe:	5c9b      	ldrb	r3, [r3, r2]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2240      	movs	r2, #64	@ 0x40
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7ff fa29 	bl	8003068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2241      	movs	r2, #65	@ 0x41
 8003c1a:	2124      	movs	r1, #36	@ 0x24
 8003c1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	493b      	ldr	r1, [pc, #236]	@ (8003d24 <HAL_I2C_Init+0x13c>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4938      	ldr	r1, [pc, #224]	@ (8003d28 <HAL_I2C_Init+0x140>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d108      	bne.n	8003c66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2180      	movs	r1, #128	@ 0x80
 8003c5e:	0209      	lsls	r1, r1, #8
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	e007      	b.n	8003c76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2184      	movs	r1, #132	@ 0x84
 8003c70:	0209      	lsls	r1, r1, #8
 8003c72:	430a      	orrs	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d109      	bne.n	8003c92 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2180      	movs	r1, #128	@ 0x80
 8003c8a:	0109      	lsls	r1, r1, #4
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	e007      	b.n	8003ca2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4923      	ldr	r1, [pc, #140]	@ (8003d2c <HAL_I2C_Init+0x144>)
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4920      	ldr	r1, [pc, #128]	@ (8003d30 <HAL_I2C_Init+0x148>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	491a      	ldr	r1, [pc, #104]	@ (8003d28 <HAL_I2C_Init+0x140>)
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2241      	movs	r2, #65	@ 0x41
 8003d06:	2120      	movs	r1, #32
 8003d08:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2242      	movs	r2, #66	@ 0x42
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	f0ffffff 	.word	0xf0ffffff
 8003d28:	ffff7fff 	.word	0xffff7fff
 8003d2c:	fffff7ff 	.word	0xfffff7ff
 8003d30:	02008000 	.word	0x02008000

08003d34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b089      	sub	sp, #36	@ 0x24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	0008      	movs	r0, r1
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	0019      	movs	r1, r3
 8003d42:	230a      	movs	r3, #10
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	1c02      	adds	r2, r0, #0
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	1c0a      	adds	r2, r1, #0
 8003d50:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2241      	movs	r2, #65	@ 0x41
 8003d56:	5c9b      	ldrb	r3, [r3, r2]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d000      	beq.n	8003d60 <HAL_I2C_Master_Transmit+0x2c>
 8003d5e:	e0e7      	b.n	8003f30 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2240      	movs	r2, #64	@ 0x40
 8003d64:	5c9b      	ldrb	r3, [r3, r2]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_I2C_Master_Transmit+0x3a>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0e1      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1fe>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2240      	movs	r2, #64	@ 0x40
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d76:	f7ff fc9b 	bl	80036b0 <HAL_GetTick>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	0219      	lsls	r1, r3, #8
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2319      	movs	r3, #25
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f000 fb22 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cc      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2241      	movs	r2, #65	@ 0x41
 8003d9c:	2121      	movs	r1, #33	@ 0x21
 8003d9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2242      	movs	r2, #66	@ 0x42
 8003da4:	2110      	movs	r1, #16
 8003da6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2208      	movs	r2, #8
 8003db8:	18ba      	adds	r2, r7, r2
 8003dba:	8812      	ldrh	r2, [r2, #0]
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2bff      	cmp	r3, #255	@ 0xff
 8003dcc:	d911      	bls.n	8003df2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	22ff      	movs	r2, #255	@ 0xff
 8003dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	2380      	movs	r3, #128	@ 0x80
 8003ddc:	045c      	lsls	r4, r3, #17
 8003dde:	230a      	movs	r3, #10
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	8819      	ldrh	r1, [r3, #0]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	4b55      	ldr	r3, [pc, #340]	@ (8003f3c <HAL_I2C_Master_Transmit+0x208>)
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	0023      	movs	r3, r4
 8003dec:	f000 fd6a 	bl	80048c4 <I2C_TransferConfig>
 8003df0:	e075      	b.n	8003ede <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	2380      	movs	r3, #128	@ 0x80
 8003e04:	049c      	lsls	r4, r3, #18
 8003e06:	230a      	movs	r3, #10
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	8819      	ldrh	r1, [r3, #0]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <HAL_I2C_Master_Transmit+0x208>)
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	0023      	movs	r3, r4
 8003e14:	f000 fd56 	bl	80048c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e18:	e061      	b.n	8003ede <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f000 fb2f 	bl	8004484 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e081      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d03a      	beq.n	8003ede <HAL_I2C_Master_Transmit+0x1aa>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d136      	bne.n	8003ede <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	0013      	movs	r3, r2
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	f000 faa9 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e053      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2bff      	cmp	r3, #255	@ 0xff
 8003e92:	d911      	bls.n	8003eb8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	22ff      	movs	r2, #255	@ 0xff
 8003e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	045c      	lsls	r4, r3, #17
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	8819      	ldrh	r1, [r3, #0]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	f000 fd07 	bl	80048c4 <I2C_TransferConfig>
 8003eb6:	e012      	b.n	8003ede <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	049c      	lsls	r4, r3, #18
 8003ecc:	230a      	movs	r3, #10
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	8819      	ldrh	r1, [r3, #0]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	0023      	movs	r3, r4
 8003eda:	f000 fcf3 	bl	80048c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d198      	bne.n	8003e1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 fb0e 	bl	8004510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e01a      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2220      	movs	r2, #32
 8003f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	490c      	ldr	r1, [pc, #48]	@ (8003f40 <HAL_I2C_Master_Transmit+0x20c>)
 8003f10:	400a      	ands	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2241      	movs	r2, #65	@ 0x41
 8003f18:	2120      	movs	r1, #32
 8003f1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2242      	movs	r2, #66	@ 0x42
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2240      	movs	r2, #64	@ 0x40
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b007      	add	sp, #28
 8003f38:	bd90      	pop	{r4, r7, pc}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	80002000 	.word	0x80002000
 8003f40:	fe00e800 	.word	0xfe00e800

08003f44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b089      	sub	sp, #36	@ 0x24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	0008      	movs	r0, r1
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	0019      	movs	r1, r3
 8003f52:	230a      	movs	r3, #10
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	1c02      	adds	r2, r0, #0
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	1c0a      	adds	r2, r1, #0
 8003f60:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2241      	movs	r2, #65	@ 0x41
 8003f66:	5c9b      	ldrb	r3, [r3, r2]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d000      	beq.n	8003f70 <HAL_I2C_Master_Receive+0x2c>
 8003f6e:	e0e8      	b.n	8004142 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2240      	movs	r2, #64	@ 0x40
 8003f74:	5c9b      	ldrb	r3, [r3, r2]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2C_Master_Receive+0x3a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0e2      	b.n	8004144 <HAL_I2C_Master_Receive+0x200>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2240      	movs	r2, #64	@ 0x40
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f86:	f7ff fb93 	bl	80036b0 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	0219      	lsls	r1, r3, #8
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2319      	movs	r3, #25
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f000 fa1a 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0cd      	b.n	8004144 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2241      	movs	r2, #65	@ 0x41
 8003fac:	2122      	movs	r1, #34	@ 0x22
 8003fae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2242      	movs	r2, #66	@ 0x42
 8003fb4:	2110      	movs	r1, #16
 8003fb6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	18ba      	adds	r2, r7, r2
 8003fca:	8812      	ldrh	r2, [r2, #0]
 8003fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2bff      	cmp	r3, #255	@ 0xff
 8003fdc:	d911      	bls.n	8004002 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	22ff      	movs	r2, #255	@ 0xff
 8003fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	045c      	lsls	r4, r3, #17
 8003fee:	230a      	movs	r3, #10
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	8819      	ldrh	r1, [r3, #0]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	4b55      	ldr	r3, [pc, #340]	@ (800414c <HAL_I2C_Master_Receive+0x208>)
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	0023      	movs	r3, r4
 8003ffc:	f000 fc62 	bl	80048c4 <I2C_TransferConfig>
 8004000:	e076      	b.n	80040f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	b2da      	uxtb	r2, r3
 8004012:	2380      	movs	r3, #128	@ 0x80
 8004014:	049c      	lsls	r4, r3, #18
 8004016:	230a      	movs	r3, #10
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	8819      	ldrh	r1, [r3, #0]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	4b4b      	ldr	r3, [pc, #300]	@ (800414c <HAL_I2C_Master_Receive+0x208>)
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	0023      	movs	r3, r4
 8004024:	f000 fc4e 	bl	80048c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004028:	e062      	b.n	80040f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	0018      	movs	r0, r3
 8004032:	f000 fab1 	bl	8004598 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004036:	1e03      	subs	r3, r0, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e082      	b.n	8004144 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03a      	beq.n	80040f0 <HAL_I2C_Master_Receive+0x1ac>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d136      	bne.n	80040f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	0013      	movs	r3, r2
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	@ 0x80
 8004090:	f000 f9a0 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e053      	b.n	8004144 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2bff      	cmp	r3, #255	@ 0xff
 80040a4:	d911      	bls.n	80040ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	22ff      	movs	r2, #255	@ 0xff
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	2380      	movs	r3, #128	@ 0x80
 80040b4:	045c      	lsls	r4, r3, #17
 80040b6:	230a      	movs	r3, #10
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	8819      	ldrh	r1, [r3, #0]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	2300      	movs	r3, #0
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	0023      	movs	r3, r4
 80040c4:	f000 fbfe 	bl	80048c4 <I2C_TransferConfig>
 80040c8:	e012      	b.n	80040f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	049c      	lsls	r4, r3, #18
 80040de:	230a      	movs	r3, #10
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	8819      	ldrh	r1, [r3, #0]
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	0023      	movs	r3, r4
 80040ec:	f000 fbea 	bl	80048c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d197      	bne.n	800402a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 fa05 	bl	8004510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e01a      	b.n	8004144 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2220      	movs	r2, #32
 8004114:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	490b      	ldr	r1, [pc, #44]	@ (8004150 <HAL_I2C_Master_Receive+0x20c>)
 8004122:	400a      	ands	r2, r1
 8004124:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2241      	movs	r2, #65	@ 0x41
 800412a:	2120      	movs	r1, #32
 800412c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2242      	movs	r2, #66	@ 0x42
 8004132:	2100      	movs	r1, #0
 8004134:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2240      	movs	r2, #64	@ 0x40
 800413a:	2100      	movs	r1, #0
 800413c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b007      	add	sp, #28
 800414a:	bd90      	pop	{r4, r7, pc}
 800414c:	80002400 	.word	0x80002400
 8004150:	fe00e800 	.word	0xfe00e800

08004154 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	@ 0x28
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	230a      	movs	r3, #10
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	1c0a      	adds	r2, r1, #0
 8004166:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 800416c:	231f      	movs	r3, #31
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2241      	movs	r2, #65	@ 0x41
 8004178:	5c9b      	ldrb	r3, [r3, r2]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	d000      	beq.n	8004182 <HAL_I2C_IsDeviceReady+0x2e>
 8004180:	e0fd      	b.n	800437e <HAL_I2C_IsDeviceReady+0x22a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699a      	ldr	r2, [r3, #24]
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	401a      	ands	r2, r3
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	429a      	cmp	r2, r3
 8004194:	d101      	bne.n	800419a <HAL_I2C_IsDeviceReady+0x46>
    {
      return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	e0f2      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x22c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2240      	movs	r2, #64	@ 0x40
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_I2C_IsDeviceReady+0x54>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e0eb      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x22c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	@ 0x40
 80041ac:	2101      	movs	r1, #1
 80041ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2241      	movs	r2, #65	@ 0x41
 80041b4:	2124      	movs	r1, #36	@ 0x24
 80041b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_I2C_IsDeviceReady+0x82>
 80041c6:	230a      	movs	r3, #10
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	059b      	lsls	r3, r3, #22
 80041ce:	0d9b      	lsrs	r3, r3, #22
 80041d0:	4a6d      	ldr	r2, [pc, #436]	@ (8004388 <HAL_I2C_IsDeviceReady+0x234>)
 80041d2:	431a      	orrs	r2, r3
 80041d4:	e006      	b.n	80041e4 <HAL_I2C_IsDeviceReady+0x90>
 80041d6:	230a      	movs	r3, #10
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	059b      	lsls	r3, r3, #22
 80041de:	0d9b      	lsrs	r3, r3, #22
 80041e0:	4a6a      	ldr	r2, [pc, #424]	@ (800438c <HAL_I2C_IsDeviceReady+0x238>)
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041ea:	f7ff fa61 	bl	80036b0 <HAL_GetTick>
 80041ee:	0003      	movs	r3, r0
 80041f0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2220      	movs	r2, #32
 80041fa:	4013      	ands	r3, r2
 80041fc:	3b20      	subs	r3, #32
 80041fe:	425a      	negs	r2, r3
 8004200:	4153      	adcs	r3, r2
 8004202:	b2da      	uxtb	r2, r3
 8004204:	231e      	movs	r3, #30
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2210      	movs	r2, #16
 8004212:	4013      	ands	r3, r2
 8004214:	3b10      	subs	r3, #16
 8004216:	425a      	negs	r2, r3
 8004218:	4153      	adcs	r3, r2
 800421a:	b2da      	uxtb	r2, r3
 800421c:	231d      	movs	r3, #29
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004222:	e035      	b.n	8004290 <HAL_I2C_IsDeviceReady+0x13c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	d01a      	beq.n	8004260 <HAL_I2C_IsDeviceReady+0x10c>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7ff fa41 	bl	80036b0 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <HAL_I2C_IsDeviceReady+0xec>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10f      	bne.n	8004260 <HAL_I2C_IsDeviceReady+0x10c>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2241      	movs	r2, #65	@ 0x41
 8004244:	2120      	movs	r1, #32
 8004246:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	2220      	movs	r2, #32
 800424e:	431a      	orrs	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	@ 0x40
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e08f      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x22c>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2220      	movs	r2, #32
 8004268:	4013      	ands	r3, r2
 800426a:	3b20      	subs	r3, #32
 800426c:	425a      	negs	r2, r3
 800426e:	4153      	adcs	r3, r2
 8004270:	b2da      	uxtb	r2, r3
 8004272:	231e      	movs	r3, #30
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2210      	movs	r2, #16
 8004280:	4013      	ands	r3, r2
 8004282:	3b10      	subs	r3, #16
 8004284:	425a      	negs	r2, r3
 8004286:	4153      	adcs	r3, r2
 8004288:	b2da      	uxtb	r2, r3
 800428a:	231d      	movs	r3, #29
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004290:	231e      	movs	r3, #30
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_I2C_IsDeviceReady+0x150>
 800429a:	231d      	movs	r3, #29
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0bf      	beq.n	8004224 <HAL_I2C_IsDeviceReady+0xd0>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2210      	movs	r2, #16
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d029      	beq.n	8004306 <HAL_I2C_IsDeviceReady+0x1b2>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	0013      	movs	r3, r2
 80042bc:	2200      	movs	r2, #0
 80042be:	2120      	movs	r1, #32
 80042c0:	f000 f888 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 80042c4:	1e03      	subs	r3, r0, #0
 80042c6:	d010      	beq.n	80042ea <HAL_I2C_IsDeviceReady+0x196>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d107      	bne.n	80042e0 <HAL_I2C_IsDeviceReady+0x18c>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2220      	movs	r2, #32
 80042d6:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80042de:	e02a      	b.n	8004336 <HAL_I2C_IsDeviceReady+0x1e2>
          }
          else
          {
            status = HAL_ERROR;
 80042e0:	231f      	movs	r3, #31
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	e025      	b.n	8004336 <HAL_I2C_IsDeviceReady+0x1e2>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2220      	movs	r2, #32
 80042f0:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2241      	movs	r2, #65	@ 0x41
 80042f6:	2120      	movs	r1, #32
 80042f8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2240      	movs	r2, #64	@ 0x40
 80042fe:	2100      	movs	r1, #0
 8004300:	5499      	strb	r1, [r3, r2]

          return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e03c      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x22c>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2210      	movs	r2, #16
 800430c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	0013      	movs	r3, r2
 8004318:	2200      	movs	r2, #0
 800431a:	2120      	movs	r1, #32
 800431c:	f000 f85a 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d004      	beq.n	800432e <HAL_I2C_IsDeviceReady+0x1da>
        {
          status = HAL_ERROR;
 8004324:	231f      	movs	r3, #31
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e003      	b.n	8004336 <HAL_I2C_IsDeviceReady+0x1e2>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2220      	movs	r2, #32
 8004334:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3301      	adds	r3, #1
 800433a:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	d907      	bls.n	8004354 <HAL_I2C_IsDeviceReady+0x200>
 8004344:	221f      	movs	r2, #31
 8004346:	18bb      	adds	r3, r7, r2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d102      	bne.n	8004354 <HAL_I2C_IsDeviceReady+0x200>
      {
        status = HAL_OK;
 800434e:	18bb      	adds	r3, r7, r2
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
      }

    } while (I2C_Trials < Trials);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d900      	bls.n	800435e <HAL_I2C_IsDeviceReady+0x20a>
 800435c:	e72f      	b.n	80041be <HAL_I2C_IsDeviceReady+0x6a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2241      	movs	r2, #65	@ 0x41
 8004362:	2120      	movs	r1, #32
 8004364:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	2220      	movs	r2, #32
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2240      	movs	r2, #64	@ 0x40
 8004376:	2100      	movs	r1, #0
 8004378:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_I2C_IsDeviceReady+0x22c>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b008      	add	sp, #32
 8004386:	bd80      	pop	{r7, pc}
 8004388:	02002000 	.word	0x02002000
 800438c:	02002800 	.word	0x02002800

08004390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d103      	bne.n	80043ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d007      	beq.n	80043cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2101      	movs	r1, #1
 80043c8:	430a      	orrs	r2, r1
 80043ca:	619a      	str	r2, [r3, #24]
  }
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	1dfb      	adds	r3, r7, #7
 80043e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e4:	e03a      	b.n	800445c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	6839      	ldr	r1, [r7, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f000 f971 	bl	80046d4 <I2C_IsErrorOccurred>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d001      	beq.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e040      	b.n	800447c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	d02d      	beq.n	800445c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004400:	f7ff f956 	bl	80036b0 <HAL_GetTick>
 8004404:	0002      	movs	r2, r0
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d122      	bne.n	800445c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	425a      	negs	r2, r3
 8004426:	4153      	adcs	r3, r2
 8004428:	b2db      	uxtb	r3, r3
 800442a:	001a      	movs	r2, r3
 800442c:	1dfb      	adds	r3, r7, #7
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d113      	bne.n	800445c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004438:	2220      	movs	r2, #32
 800443a:	431a      	orrs	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2241      	movs	r2, #65	@ 0x41
 8004444:	2120      	movs	r1, #32
 8004446:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2242      	movs	r2, #66	@ 0x42
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e00f      	b.n	800447c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	425a      	negs	r2, r3
 800446c:	4153      	adcs	r3, r2
 800446e:	b2db      	uxtb	r3, r3
 8004470:	001a      	movs	r2, r3
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d0b5      	beq.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b004      	add	sp, #16
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004490:	e032      	b.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	0018      	movs	r0, r3
 800449a:	f000 f91b 	bl	80046d4 <I2C_IsErrorOccurred>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e030      	b.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3301      	adds	r3, #1
 80044aa:	d025      	beq.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7ff f900 	bl	80036b0 <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11a      	bne.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2202      	movs	r2, #2
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d013      	beq.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d4:	2220      	movs	r2, #32
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2241      	movs	r2, #65	@ 0x41
 80044e0:	2120      	movs	r1, #32
 80044e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2242      	movs	r2, #66	@ 0x42
 80044e8:	2100      	movs	r1, #0
 80044ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2240      	movs	r2, #64	@ 0x40
 80044f0:	2100      	movs	r1, #0
 80044f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e007      	b.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2202      	movs	r2, #2
 8004500:	4013      	ands	r3, r2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d1c5      	bne.n	8004492 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b004      	add	sp, #16
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800451c:	e02f      	b.n	800457e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f8d5 	bl	80046d4 <I2C_IsErrorOccurred>
 800452a:	1e03      	subs	r3, r0, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e02d      	b.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7ff f8bd 	bl	80036b0 <HAL_GetTick>
 8004536:	0002      	movs	r2, r0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d11a      	bne.n	800457e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2220      	movs	r2, #32
 8004550:	4013      	ands	r3, r2
 8004552:	2b20      	cmp	r3, #32
 8004554:	d013      	beq.n	800457e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	2220      	movs	r2, #32
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2241      	movs	r2, #65	@ 0x41
 8004566:	2120      	movs	r1, #32
 8004568:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2242      	movs	r2, #66	@ 0x42
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2240      	movs	r2, #64	@ 0x40
 8004576:	2100      	movs	r1, #0
 8004578:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e007      	b.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2220      	movs	r2, #32
 8004586:	4013      	ands	r3, r2
 8004588:	2b20      	cmp	r3, #32
 800458a:	d1c8      	bne.n	800451e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b004      	add	sp, #16
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	2317      	movs	r3, #23
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80045ac:	e07b      	b.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f000 f88d 	bl	80046d4 <I2C_IsErrorOccurred>
 80045ba:	1e03      	subs	r3, r0, #0
 80045bc:	d003      	beq.n	80045c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80045be:	2317      	movs	r3, #23
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2220      	movs	r2, #32
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d140      	bne.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80045d4:	2117      	movs	r1, #23
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d13b      	bne.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2204      	movs	r2, #4
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d106      	bne.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2210      	movs	r2, #16
 8004602:	4013      	ands	r3, r2
 8004604:	2b10      	cmp	r3, #16
 8004606:	d123      	bne.n	8004650 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2210      	movs	r2, #16
 800460e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2204      	movs	r2, #4
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2220      	movs	r2, #32
 800461c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4929      	ldr	r1, [pc, #164]	@ (80046d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800462a:	400a      	ands	r2, r1
 800462c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2241      	movs	r2, #65	@ 0x41
 8004632:	2120      	movs	r1, #32
 8004634:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2242      	movs	r2, #66	@ 0x42
 800463a:	2100      	movs	r1, #0
 800463c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2240      	movs	r2, #64	@ 0x40
 8004642:	2100      	movs	r1, #0
 8004644:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004646:	2317      	movs	r3, #23
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e002      	b.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004656:	f7ff f82b 	bl	80036b0 <HAL_GetTick>
 800465a:	0002      	movs	r2, r0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d11c      	bne.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800466c:	2017      	movs	r0, #23
 800466e:	183b      	adds	r3, r7, r0
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d117      	bne.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2204      	movs	r2, #4
 800467e:	4013      	ands	r3, r2
 8004680:	2b04      	cmp	r3, #4
 8004682:	d010      	beq.n	80046a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004688:	2220      	movs	r2, #32
 800468a:	431a      	orrs	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2241      	movs	r2, #65	@ 0x41
 8004694:	2120      	movs	r1, #32
 8004696:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2240      	movs	r2, #64	@ 0x40
 800469c:	2100      	movs	r1, #0
 800469e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80046a0:	183b      	adds	r3, r7, r0
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2204      	movs	r2, #4
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d005      	beq.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80046b4:	2317      	movs	r3, #23
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d100      	bne.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80046be:	e776      	b.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80046c0:	2317      	movs	r3, #23
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	781b      	ldrb	r3, [r3, #0]
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b006      	add	sp, #24
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	fe00e800 	.word	0xfe00e800

080046d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	@ 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e0:	2327      	movs	r3, #39	@ 0x27
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2210      	movs	r2, #16
 80046fc:	4013      	ands	r3, r2
 80046fe:	d100      	bne.n	8004702 <I2C_IsErrorOccurred+0x2e>
 8004700:	e079      	b.n	80047f6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2210      	movs	r2, #16
 8004708:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800470a:	e057      	b.n	80047bc <I2C_IsErrorOccurred+0xe8>
 800470c:	2227      	movs	r2, #39	@ 0x27
 800470e:	18bb      	adds	r3, r7, r2
 8004710:	18ba      	adds	r2, r7, r2
 8004712:	7812      	ldrb	r2, [r2, #0]
 8004714:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	d04f      	beq.n	80047bc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fe ffc8 	bl	80036b0 <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <I2C_IsErrorOccurred+0x5e>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d144      	bne.n	80047bc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	2380      	movs	r3, #128	@ 0x80
 800473a:	01db      	lsls	r3, r3, #7
 800473c:	4013      	ands	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004740:	2013      	movs	r0, #19
 8004742:	183b      	adds	r3, r7, r0
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	2142      	movs	r1, #66	@ 0x42
 8004748:	5c52      	ldrb	r2, [r2, r1]
 800474a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	401a      	ands	r2, r3
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	429a      	cmp	r2, r3
 800475e:	d126      	bne.n	80047ae <I2C_IsErrorOccurred+0xda>
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	2380      	movs	r3, #128	@ 0x80
 8004764:	01db      	lsls	r3, r3, #7
 8004766:	429a      	cmp	r2, r3
 8004768:	d021      	beq.n	80047ae <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800476a:	183b      	adds	r3, r7, r0
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b20      	cmp	r3, #32
 8004770:	d01d      	beq.n	80047ae <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2180      	movs	r1, #128	@ 0x80
 800477e:	01c9      	lsls	r1, r1, #7
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004784:	f7fe ff94 	bl	80036b0 <HAL_GetTick>
 8004788:	0003      	movs	r3, r0
 800478a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478c:	e00f      	b.n	80047ae <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800478e:	f7fe ff8f 	bl	80036b0 <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b19      	cmp	r3, #25
 800479a:	d908      	bls.n	80047ae <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	2220      	movs	r2, #32
 80047a0:	4313      	orrs	r3, r2
 80047a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047a4:	2327      	movs	r3, #39	@ 0x27
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]

              break;
 80047ac:	e006      	b.n	80047bc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2220      	movs	r2, #32
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d1e8      	bne.n	800478e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2220      	movs	r2, #32
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d004      	beq.n	80047d4 <I2C_IsErrorOccurred+0x100>
 80047ca:	2327      	movs	r3, #39	@ 0x27
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d09b      	beq.n	800470c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047d4:	2327      	movs	r3, #39	@ 0x27
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2220      	movs	r2, #32
 80047e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2204      	movs	r2, #4
 80047ea:	4313      	orrs	r3, r2
 80047ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047ee:	2327      	movs	r3, #39	@ 0x27
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d00c      	beq.n	8004822 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2201      	movs	r2, #1
 800480c:	4313      	orrs	r3, r2
 800480e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2280      	movs	r2, #128	@ 0x80
 8004816:	0052      	lsls	r2, r2, #1
 8004818:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800481a:	2327      	movs	r3, #39	@ 0x27
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4013      	ands	r3, r2
 800482a:	d00c      	beq.n	8004846 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2208      	movs	r2, #8
 8004830:	4313      	orrs	r3, r2
 8004832:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2280      	movs	r2, #128	@ 0x80
 800483a:	00d2      	lsls	r2, r2, #3
 800483c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800483e:	2327      	movs	r3, #39	@ 0x27
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	2380      	movs	r3, #128	@ 0x80
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4013      	ands	r3, r2
 800484e:	d00c      	beq.n	800486a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	2202      	movs	r2, #2
 8004854:	4313      	orrs	r3, r2
 8004856:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2280      	movs	r2, #128	@ 0x80
 800485e:	0092      	lsls	r2, r2, #2
 8004860:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004862:	2327      	movs	r3, #39	@ 0x27
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800486a:	2327      	movs	r3, #39	@ 0x27
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01d      	beq.n	80048b0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	0018      	movs	r0, r3
 8004878:	f7ff fd8a 	bl	8004390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	490e      	ldr	r1, [pc, #56]	@ (80048c0 <I2C_IsErrorOccurred+0x1ec>)
 8004888:	400a      	ands	r2, r1
 800488a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2241      	movs	r2, #65	@ 0x41
 800489c:	2120      	movs	r1, #32
 800489e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2242      	movs	r2, #66	@ 0x42
 80048a4:	2100      	movs	r1, #0
 80048a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2240      	movs	r2, #64	@ 0x40
 80048ac:	2100      	movs	r1, #0
 80048ae:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80048b0:	2327      	movs	r3, #39	@ 0x27
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b00a      	add	sp, #40	@ 0x28
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	fe00e800 	.word	0xfe00e800

080048c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	0008      	movs	r0, r1
 80048ce:	0011      	movs	r1, r2
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	240a      	movs	r4, #10
 80048d4:	193b      	adds	r3, r7, r4
 80048d6:	1c02      	adds	r2, r0, #0
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	2009      	movs	r0, #9
 80048dc:	183b      	adds	r3, r7, r0
 80048de:	1c0a      	adds	r2, r1, #0
 80048e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048e2:	193b      	adds	r3, r7, r4
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	059b      	lsls	r3, r3, #22
 80048e8:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ea:	183b      	adds	r3, r7, r0
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	0419      	lsls	r1, r3, #16
 80048f0:	23ff      	movs	r3, #255	@ 0xff
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048f6:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fe:	4313      	orrs	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800490e:	0d51      	lsrs	r1, r2, #21
 8004910:	2280      	movs	r2, #128	@ 0x80
 8004912:	00d2      	lsls	r2, r2, #3
 8004914:	400a      	ands	r2, r1
 8004916:	4907      	ldr	r1, [pc, #28]	@ (8004934 <I2C_TransferConfig+0x70>)
 8004918:	430a      	orrs	r2, r1
 800491a:	43d2      	mvns	r2, r2
 800491c:	401a      	ands	r2, r3
 800491e:	0011      	movs	r1, r2
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b007      	add	sp, #28
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	03ff63ff 	.word	0x03ff63ff

08004938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2241      	movs	r2, #65	@ 0x41
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	d138      	bne.n	80049c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2240      	movs	r2, #64	@ 0x40
 8004952:	5c9b      	ldrb	r3, [r3, r2]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004958:	2302      	movs	r3, #2
 800495a:	e032      	b.n	80049c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2240      	movs	r2, #64	@ 0x40
 8004960:	2101      	movs	r1, #1
 8004962:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2241      	movs	r2, #65	@ 0x41
 8004968:	2124      	movs	r1, #36	@ 0x24
 800496a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	438a      	bics	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4911      	ldr	r1, [pc, #68]	@ (80049cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004988:	400a      	ands	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2241      	movs	r2, #65	@ 0x41
 80049b0:	2120      	movs	r1, #32
 80049b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2240      	movs	r2, #64	@ 0x40
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
  }
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	ffffefff 	.word	0xffffefff

080049d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2241      	movs	r2, #65	@ 0x41
 80049de:	5c9b      	ldrb	r3, [r3, r2]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d139      	bne.n	8004a5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2240      	movs	r2, #64	@ 0x40
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e033      	b.n	8004a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2240      	movs	r2, #64	@ 0x40
 80049f8:	2101      	movs	r1, #1
 80049fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2241      	movs	r2, #65	@ 0x41
 8004a00:	2124      	movs	r1, #36	@ 0x24
 8004a02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a11      	ldr	r2, [pc, #68]	@ (8004a64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2241      	movs	r2, #65	@ 0x41
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2240      	movs	r2, #64	@ 0x40
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b004      	add	sp, #16
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	fffff0ff 	.word	0xfffff0ff

08004a68 <HAL_I2CEx_ConfigFastModePlus>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  FastModePlus New state of the Fast Mode Plus.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigFastModePlus(I2C_HandleTypeDef *hi2c, uint32_t FastModePlus)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_FASTMODEPLUS(FastModePlus));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2241      	movs	r2, #65	@ 0x41
 8004a76:	5c9b      	ldrb	r3, [r3, r2]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d13d      	bne.n	8004afa <HAL_I2CEx_ConfigFastModePlus+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	@ 0x40
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2CEx_ConfigFastModePlus+0x24>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e037      	b.n	8004afc <HAL_I2CEx_ConfigFastModePlus+0x94>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2240      	movs	r2, #64	@ 0x40
 8004a90:	2101      	movs	r1, #1
 8004a92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2241      	movs	r2, #65	@ 0x41
 8004a98:	2124      	movs	r1, #36	@ 0x24
 8004a9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    if (FastModePlus == I2C_FASTMODEPLUS_ENABLE)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_I2CEx_ConfigFastModePlus+0x5e>
    {
      /* Set I2Cx FMP bit */
      hi2c->Instance->CR1 |= (I2C_CR1_FMP);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2180      	movs	r1, #128	@ 0x80
 8004abe:	0449      	lsls	r1, r1, #17
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e007      	b.n	8004ad6 <HAL_I2CEx_ConfigFastModePlus+0x6e>
    }
    else
    {
      /* Reset I2Cx FMP bit */
      hi2c->Instance->CR1 &= ~(I2C_CR1_FMP);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	490c      	ldr	r1, [pc, #48]	@ (8004b04 <HAL_I2CEx_ConfigFastModePlus+0x9c>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
    }

    __HAL_I2C_ENABLE(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2241      	movs	r2, #65	@ 0x41
 8004aea:	2120      	movs	r1, #32
 8004aec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2240      	movs	r2, #64	@ 0x40
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_I2CEx_ConfigFastModePlus+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b002      	add	sp, #8
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	feffffff 	.word	0xfeffffff

08004b08 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e137      	b.n	8004d8a <HAL_LPTIM_Init+0x282>
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2252      	movs	r2, #82	@ 0x52
 8004b1e:	5c9b      	ldrb	r3, [r3, r2]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2251      	movs	r2, #81	@ 0x51
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7fe fb35 	bl	80031a0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2252      	movs	r2, #82	@ 0x52
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	0052      	lsls	r2, r2, #1
 8004b56:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	005a      	lsls	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 fcb4 	bl	80054d8 <LPTIM_WaitForFlag>
 8004b70:	0003      	movs	r3, r0
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d101      	bne.n	8004b7a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e107      	b.n	8004d8a <HAL_LPTIM_Init+0x282>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6a12      	ldr	r2, [r2, #32]
 8004b8a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2110      	movs	r1, #16
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 fca1 	bl	80054d8 <LPTIM_WaitForFlag>
 8004b96:	0003      	movs	r3, r0
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d101      	bne.n	8004ba0 <HAL_LPTIM_Init+0x98>
  {
    return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0f4      	b.n	8004d8a <HAL_LPTIM_Init+0x282>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a7b      	ldr	r2, [pc, #492]	@ (8004d94 <HAL_LPTIM_Init+0x28c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_LPTIM_Init+0xac>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a7a      	ldr	r2, [pc, #488]	@ (8004d98 <HAL_LPTIM_Init+0x290>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d101      	bne.n	8004bb8 <HAL_LPTIM_Init+0xb0>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_LPTIM_Init+0xb2>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d122      	bne.n	8004c04 <HAL_LPTIM_Init+0xfc>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d14e      	bne.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd0:	2380      	movs	r3, #128	@ 0x80
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d147      	bne.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	2202      	movs	r2, #2
 8004be0:	4013      	ands	r3, r2
 8004be2:	d141      	bne.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d13a      	bne.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	438a      	bics	r2, r1
 8004c00:	611a      	str	r2, [r3, #16]
 8004c02:	e031      	b.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a62      	ldr	r2, [pc, #392]	@ (8004d94 <HAL_LPTIM_Init+0x28c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_LPTIM_Init+0x11a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a62      	ldr	r2, [pc, #392]	@ (8004d9c <HAL_LPTIM_Init+0x294>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_LPTIM_Init+0x11a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8004d98 <HAL_LPTIM_Init+0x290>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d101      	bne.n	8004c26 <HAL_LPTIM_Init+0x11e>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_LPTIM_Init+0x120>
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d115      	bne.n	8004c58 <HAL_LPTIM_Init+0x150>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	2202      	movs	r2, #2
 8004c34:	4013      	ands	r3, r2
 8004c36:	d117      	bne.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3e:	2380      	movs	r3, #128	@ 0x80
 8004c40:	029b      	lsls	r3, r3, #10
 8004c42:	4013      	ands	r3, r2
 8004c44:	d110      	bne.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2101      	movs	r1, #1
 8004c52:	438a      	bics	r2, r1
 8004c54:	611a      	str	r2, [r3, #16]
 8004c56:	e007      	b.n	8004c68 <HAL_LPTIM_Init+0x160>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2101      	movs	r1, #1
 8004c64:	438a      	bics	r2, r1
 8004c66:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d005      	beq.n	8004c84 <HAL_LPTIM_Init+0x17c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d103      	bne.n	8004c8c <HAL_LPTIM_Init+0x184>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	221e      	movs	r2, #30
 8004c88:	4393      	bics	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	4a43      	ldr	r2, [pc, #268]	@ (8004da0 <HAL_LPTIM_Init+0x298>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <HAL_LPTIM_Init+0x196>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a42      	ldr	r2, [pc, #264]	@ (8004da4 <HAL_LPTIM_Init+0x29c>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a41      	ldr	r2, [pc, #260]	@ (8004da8 <HAL_LPTIM_Init+0x2a0>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004cae:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 8004cb4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004cba:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <HAL_LPTIM_Init+0x1d2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d005      	beq.n	8004cee <HAL_LPTIM_Init+0x1e6>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d107      	bne.n	8004cfe <HAL_LPTIM_Init+0x1f6>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	4a27      	ldr	r2, [pc, #156]	@ (8004da0 <HAL_LPTIM_Init+0x298>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00a      	beq.n	8004d1e <HAL_LPTIM_Init+0x216>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d10:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004d16:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
#if defined(LPTIM3)
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM3))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004d94 <HAL_LPTIM_Init+0x28c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_LPTIM_Init+0x232>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a18      	ldr	r2, [pc, #96]	@ (8004d98 <HAL_LPTIM_Init+0x290>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d108      	bne.n	8004d4c <HAL_LPTIM_Init+0x244>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d4a:	e009      	b.n	8004d60 <HAL_LPTIM_Init+0x258>
  }
  else
  {
    if (hlptim->Instance == LPTIM2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <HAL_LPTIM_Init+0x294>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d104      	bne.n	8004d60 <HAL_LPTIM_Init+0x258>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2253      	movs	r2, #83	@ 0x53
 8004d64:	2101      	movs	r1, #1
 8004d66:	5499      	strb	r1, [r3, r2]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2254      	movs	r2, #84	@ 0x54
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	5499      	strb	r1, [r3, r2]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2255      	movs	r2, #85	@ 0x55
 8004d74:	2101      	movs	r1, #1
 8004d76:	5499      	strb	r1, [r3, r2]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2256      	movs	r2, #86	@ 0x56
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	5499      	strb	r1, [r3, r2]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2252      	movs	r2, #82	@ 0x52
 8004d84:	2101      	movs	r1, #1
 8004d86:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b004      	add	sp, #16
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	40007c00 	.word	0x40007c00
 8004d98:	40009000 	.word	0x40009000
 8004d9c:	40009400 	.word	0x40009400
 8004da0:	0000ffff 	.word	0x0000ffff
 8004da4:	ffff1f3f 	.word	0xffff1f3f
 8004da8:	ff39f1fe 	.word	0xff39f1fe

08004dac <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2252      	movs	r2, #82	@ 0x52
 8004db8:	2102      	movs	r1, #2
 8004dba:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a7b      	ldr	r2, [pc, #492]	@ (8004fb0 <HAL_LPTIM_TimeOut_Stop_IT+0x204>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_LPTIM_TimeOut_Stop_IT+0x24>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a7a      	ldr	r2, [pc, #488]	@ (8004fb4 <HAL_LPTIM_TimeOut_Stop_IT+0x208>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d101      	bne.n	8004dd4 <HAL_LPTIM_TimeOut_Stop_IT+0x28>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <HAL_LPTIM_TimeOut_Stop_IT+0x2a>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d122      	bne.n	8004e20 <HAL_LPTIM_TimeOut_Stop_IT+0x74>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	2202      	movs	r2, #2
 8004de2:	4013      	ands	r3, r2
 8004de4:	d14e      	bne.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	4013      	ands	r3, r2
 8004df2:	d147      	bne.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d141      	bne.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d13a      	bne.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	438a      	bics	r2, r1
 8004e1c:	611a      	str	r2, [r3, #16]
 8004e1e:	e031      	b.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a62      	ldr	r2, [pc, #392]	@ (8004fb0 <HAL_LPTIM_TimeOut_Stop_IT+0x204>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_LPTIM_TimeOut_Stop_IT+0x92>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a62      	ldr	r2, [pc, #392]	@ (8004fb8 <HAL_LPTIM_TimeOut_Stop_IT+0x20c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_LPTIM_TimeOut_Stop_IT+0x92>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb4 <HAL_LPTIM_TimeOut_Stop_IT+0x208>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <HAL_LPTIM_TimeOut_Stop_IT+0x96>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_LPTIM_TimeOut_Stop_IT+0x98>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d115      	bne.n	8004e74 <HAL_LPTIM_TimeOut_Stop_IT+0xc8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	2202      	movs	r2, #2
 8004e50:	4013      	ands	r3, r2
 8004e52:	d117      	bne.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5a:	2380      	movs	r3, #128	@ 0x80
 8004e5c:	029b      	lsls	r3, r3, #10
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d110      	bne.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	438a      	bics	r2, r1
 8004e70:	611a      	str	r2, [r3, #16]
 8004e72:	e007      	b.n	8004e84 <HAL_LPTIM_TimeOut_Stop_IT+0xd8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2101      	movs	r1, #1
 8004e80:	438a      	bics	r2, r1
 8004e82:	611a      	str	r2, [r3, #16]

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	494b      	ldr	r1, [pc, #300]	@ (8004fbc <HAL_LPTIM_TimeOut_Stop_IT+0x210>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DIEROK);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2280      	movs	r2, #128	@ 0x80
 8004eaa:	0452      	lsls	r2, r2, #17
 8004eac:	605a      	str	r2, [r3, #4]

  /* Disable Compare match CH1 interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CC1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	438a      	bics	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]

  /* Wait for the completion of the write operation to the LPTIM_DIER register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_DIEROK) == HAL_TIMEOUT)
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	045a      	lsls	r2, r3, #17
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0011      	movs	r1, r2
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 fb06 	bl	80054d8 <LPTIM_WaitForFlag>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d101      	bne.n	8004ed6 <HAL_LPTIM_TimeOut_Stop_IT+0x12a>
  {
    return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e068      	b.n	8004fa8 <HAL_LPTIM_TimeOut_Stop_IT+0x1fc>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a35      	ldr	r2, [pc, #212]	@ (8004fb0 <HAL_LPTIM_TimeOut_Stop_IT+0x204>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_LPTIM_TimeOut_Stop_IT+0x13e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a33      	ldr	r2, [pc, #204]	@ (8004fb4 <HAL_LPTIM_TimeOut_Stop_IT+0x208>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_LPTIM_TimeOut_Stop_IT+0x142>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_LPTIM_TimeOut_Stop_IT+0x144>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d122      	bne.n	8004f3a <HAL_LPTIM_TimeOut_Stop_IT+0x18e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	2202      	movs	r2, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	d14e      	bne.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f06:	2380      	movs	r3, #128	@ 0x80
 8004f08:	029b      	lsls	r3, r3, #10
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d147      	bne.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f14:	2202      	movs	r2, #2
 8004f16:	4013      	ands	r3, r2
 8004f18:	d141      	bne.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f20:	2380      	movs	r3, #128	@ 0x80
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	4013      	ands	r3, r2
 8004f26:	d13a      	bne.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2101      	movs	r1, #1
 8004f34:	438a      	bics	r2, r1
 8004f36:	611a      	str	r2, [r3, #16]
 8004f38:	e031      	b.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb0 <HAL_LPTIM_TimeOut_Stop_IT+0x204>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d009      	beq.n	8004f58 <HAL_LPTIM_TimeOut_Stop_IT+0x1ac>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <HAL_LPTIM_TimeOut_Stop_IT+0x20c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_LPTIM_TimeOut_Stop_IT+0x1ac>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a18      	ldr	r2, [pc, #96]	@ (8004fb4 <HAL_LPTIM_TimeOut_Stop_IT+0x208>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_LPTIM_TimeOut_Stop_IT+0x1b0>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <HAL_LPTIM_TimeOut_Stop_IT+0x1b2>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d115      	bne.n	8004f8e <HAL_LPTIM_TimeOut_Stop_IT+0x1e2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	2202      	movs	r2, #2
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d117      	bne.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	029b      	lsls	r3, r3, #10
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d110      	bne.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2101      	movs	r1, #1
 8004f88:	438a      	bics	r2, r1
 8004f8a:	611a      	str	r2, [r3, #16]
 8004f8c:	e007      	b.n	8004f9e <HAL_LPTIM_TimeOut_Stop_IT+0x1f2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2101      	movs	r1, #1
 8004f9a:	438a      	bics	r2, r1
 8004f9c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2252      	movs	r2, #82	@ 0x52
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	0018      	movs	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b002      	add	sp, #8
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40007c00 	.word	0x40007c00
 8004fb4:	40009000 	.word	0x40009000
 8004fb8:	40009400 	.word	0x40009400
 8004fbc:	fff7ffff 	.word	0xfff7ffff

08004fc0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d121      	bne.n	800501a <HAL_LPTIM_IRQHandler+0x5a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d11a      	bne.n	800501a <HAL_LPTIM_IRQHandler+0x5a>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2238      	movs	r2, #56	@ 0x38
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	0018      	movs	r0, r3
 8005004:	f000 fa57 	bl	80054b6 <HAL_LPTIM_IC_CaptureCallback>
 8005008:	e003      	b.n	8005012 <HAL_LPTIM_IRQHandler+0x52>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0018      	movs	r0, r3
 800500e:	f000 fa0a 	bl	8005426 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2238      	movs	r2, #56	@ 0x38
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	401a      	ands	r2, r3
 8005026:	2380      	movs	r3, #128	@ 0x80
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	429a      	cmp	r2, r3
 800502c:	d126      	bne.n	800507c <HAL_LPTIM_IRQHandler+0xbc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	2380      	movs	r3, #128	@ 0x80
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	401a      	ands	r2, r3
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	429a      	cmp	r2, r3
 8005040:	d11c      	bne.n	800507c <HAL_LPTIM_IRQHandler+0xbc>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2280      	movs	r2, #128	@ 0x80
 8005048:	0092      	lsls	r2, r2, #2
 800504a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2238      	movs	r2, #56	@ 0x38
 8005050:	2102      	movs	r1, #2
 8005052:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	025b      	lsls	r3, r3, #9
 800505e:	4013      	ands	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_LPTIM_IRQHandler+0xac>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f000 fa26 	bl	80054b6 <HAL_LPTIM_IC_CaptureCallback>
 800506a:	e003      	b.n	8005074 <HAL_LPTIM_IRQHandler+0xb4>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 f9d9 	bl	8005426 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2238      	movs	r2, #56	@ 0x38
 8005078:	2100      	movs	r1, #0
 800507a:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	2380      	movs	r3, #128	@ 0x80
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	401a      	ands	r2, r3
 8005088:	2380      	movs	r3, #128	@ 0x80
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	429a      	cmp	r2, r3
 800508e:	d125      	bne.n	80050dc <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	401a      	ands	r2, r3
 800509c:	2380      	movs	r3, #128	@ 0x80
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d11b      	bne.n	80050dc <HAL_LPTIM_IRQHandler+0x11c>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2280      	movs	r2, #128	@ 0x80
 80050aa:	00d2      	lsls	r2, r2, #3
 80050ac:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2238      	movs	r2, #56	@ 0x38
 80050b2:	2104      	movs	r1, #4
 80050b4:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC3SEL) != 0x00U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050bc:	2201      	movs	r2, #1
 80050be:	4013      	ands	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_LPTIM_IRQHandler+0x10c>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f9f6 	bl	80054b6 <HAL_LPTIM_IC_CaptureCallback>
 80050ca:	e003      	b.n	80050d4 <HAL_LPTIM_IRQHandler+0x114>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 f9a9 	bl	8005426 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2238      	movs	r2, #56	@ 0x38
 80050d8:	2100      	movs	r1, #0
 80050da:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Capture Compare 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	2380      	movs	r3, #128	@ 0x80
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	401a      	ands	r2, r3
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d126      	bne.n	800513e <HAL_LPTIM_IRQHandler+0x17e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	401a      	ands	r2, r3
 80050fc:	2380      	movs	r3, #128	@ 0x80
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	429a      	cmp	r2, r3
 8005102:	d11c      	bne.n	800513e <HAL_LPTIM_IRQHandler+0x17e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2280      	movs	r2, #128	@ 0x80
 800510a:	0112      	lsls	r2, r2, #4
 800510c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2238      	movs	r2, #56	@ 0x38
 8005112:	2108      	movs	r1, #8
 8005114:	5499      	strb	r1, [r3, r2]

      /* Input capture event */
      if ((hlptim->Instance->CCMR2 & LPTIM_CCMR2_CC4SEL) != 0x00U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	025b      	lsls	r3, r3, #9
 8005120:	4013      	ands	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_LPTIM_IRQHandler+0x16e>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 f9c5 	bl	80054b6 <HAL_LPTIM_IC_CaptureCallback>
 800512c:	e003      	b.n	8005136 <HAL_LPTIM_IRQHandler+0x176>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 f978 	bl	8005426 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2238      	movs	r2, #56	@ 0x38
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	2380      	movs	r3, #128	@ 0x80
 8005146:	015b      	lsls	r3, r3, #5
 8005148:	401a      	ands	r2, r3
 800514a:	2380      	movs	r3, #128	@ 0x80
 800514c:	015b      	lsls	r3, r3, #5
 800514e:	429a      	cmp	r2, r3
 8005150:	d11a      	bne.n	8005188 <HAL_LPTIM_IRQHandler+0x1c8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	2380      	movs	r3, #128	@ 0x80
 800515a:	015b      	lsls	r3, r3, #5
 800515c:	401a      	ands	r2, r3
 800515e:	2380      	movs	r3, #128	@ 0x80
 8005160:	015b      	lsls	r3, r3, #5
 8005162:	429a      	cmp	r2, r3
 8005164:	d110      	bne.n	8005188 <HAL_LPTIM_IRQHandler+0x1c8>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2280      	movs	r2, #128	@ 0x80
 800516c:	0152      	lsls	r2, r2, #5
 800516e:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2238      	movs	r2, #56	@ 0x38
 8005174:	2101      	movs	r1, #1
 8005176:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	0018      	movs	r0, r3
 800517c:	f000 f9a3 	bl	80054c6 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2238      	movs	r2, #56	@ 0x38
 8005184:	2100      	movs	r1, #0
 8005186:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	@ 0x80
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	401a      	ands	r2, r3
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	019b      	lsls	r3, r3, #6
 8005198:	429a      	cmp	r2, r3
 800519a:	d11a      	bne.n	80051d2 <HAL_LPTIM_IRQHandler+0x212>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	2380      	movs	r3, #128	@ 0x80
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	401a      	ands	r2, r3
 80051a8:	2380      	movs	r3, #128	@ 0x80
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d110      	bne.n	80051d2 <HAL_LPTIM_IRQHandler+0x212>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2280      	movs	r2, #128	@ 0x80
 80051b6:	0192      	lsls	r2, r2, #6
 80051b8:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2238      	movs	r2, #56	@ 0x38
 80051be:	2102      	movs	r1, #2
 80051c0:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f000 f97e 	bl	80054c6 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2238      	movs	r2, #56	@ 0x38
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 3 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC3O) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	@ 0x80
 80051da:	01db      	lsls	r3, r3, #7
 80051dc:	401a      	ands	r2, r3
 80051de:	2380      	movs	r3, #128	@ 0x80
 80051e0:	01db      	lsls	r3, r3, #7
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d11a      	bne.n	800521c <HAL_LPTIM_IRQHandler+0x25c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC3O) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	2380      	movs	r3, #128	@ 0x80
 80051ee:	01db      	lsls	r3, r3, #7
 80051f0:	401a      	ands	r2, r3
 80051f2:	2380      	movs	r3, #128	@ 0x80
 80051f4:	01db      	lsls	r3, r3, #7
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d110      	bne.n	800521c <HAL_LPTIM_IRQHandler+0x25c>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC3O);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2280      	movs	r2, #128	@ 0x80
 8005200:	01d2      	lsls	r2, r2, #7
 8005202:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_3;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2238      	movs	r2, #56	@ 0x38
 8005208:	2104      	movs	r1, #4
 800520a:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	0018      	movs	r0, r3
 8005210:	f000 f959 	bl	80054c6 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2238      	movs	r2, #56	@ 0x38
 8005218:	2100      	movs	r1, #0
 800521a:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Over Capture 4 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC4O) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	2380      	movs	r3, #128	@ 0x80
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	401a      	ands	r2, r3
 8005228:	2380      	movs	r3, #128	@ 0x80
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	429a      	cmp	r2, r3
 800522e:	d11a      	bne.n	8005266 <HAL_LPTIM_IRQHandler+0x2a6>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC4O) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	2380      	movs	r3, #128	@ 0x80
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	401a      	ands	r2, r3
 800523c:	2380      	movs	r3, #128	@ 0x80
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	429a      	cmp	r2, r3
 8005242:	d110      	bne.n	8005266 <HAL_LPTIM_IRQHandler+0x2a6>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC4O);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2280      	movs	r2, #128	@ 0x80
 800524a:	0212      	lsls	r2, r2, #8
 800524c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_4;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2238      	movs	r2, #56	@ 0x38
 8005252:	2108      	movs	r1, #8
 8005254:	5499      	strb	r1, [r3, r2]

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 f934 	bl	80054c6 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2238      	movs	r2, #56	@ 0x38
 8005262:	2100      	movs	r1, #0
 8005264:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2202      	movs	r2, #2
 800526e:	4013      	ands	r3, r2
 8005270:	2b02      	cmp	r3, #2
 8005272:	d10e      	bne.n	8005292 <HAL_LPTIM_IRQHandler+0x2d2>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2202      	movs	r2, #2
 800527c:	4013      	ands	r3, r2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d107      	bne.n	8005292 <HAL_LPTIM_IRQHandler+0x2d2>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2202      	movs	r2, #2
 8005288:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f000 f8d2 	bl	8005436 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2204      	movs	r2, #4
 800529a:	4013      	ands	r3, r2
 800529c:	2b04      	cmp	r3, #4
 800529e:	d10e      	bne.n	80052be <HAL_LPTIM_IRQHandler+0x2fe>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2204      	movs	r2, #4
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d107      	bne.n	80052be <HAL_LPTIM_IRQHandler+0x2fe>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2204      	movs	r2, #4
 80052b4:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	0018      	movs	r0, r3
 80052ba:	f000 f8c4 	bl	8005446 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2208      	movs	r2, #8
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d112      	bne.n	80052f2 <HAL_LPTIM_IRQHandler+0x332>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2208      	movs	r2, #8
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d10b      	bne.n	80052f2 <HAL_LPTIM_IRQHandler+0x332>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2208      	movs	r2, #8
 80052e0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2238      	movs	r2, #56	@ 0x38
 80052e6:	2101      	movs	r1, #1
 80052e8:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 f8b2 	bl	8005456 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	031b      	lsls	r3, r3, #12
 80052fc:	401a      	ands	r2, r3
 80052fe:	2380      	movs	r3, #128	@ 0x80
 8005300:	031b      	lsls	r3, r3, #12
 8005302:	429a      	cmp	r2, r3
 8005304:	d116      	bne.n	8005334 <HAL_LPTIM_IRQHandler+0x374>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	2380      	movs	r3, #128	@ 0x80
 800530e:	031b      	lsls	r3, r3, #12
 8005310:	401a      	ands	r2, r3
 8005312:	2380      	movs	r3, #128	@ 0x80
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	429a      	cmp	r2, r3
 8005318:	d10c      	bne.n	8005334 <HAL_LPTIM_IRQHandler+0x374>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2280      	movs	r2, #128	@ 0x80
 8005320:	0312      	lsls	r2, r2, #12
 8005322:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2238      	movs	r2, #56	@ 0x38
 8005328:	2102      	movs	r1, #2
 800532a:	5499      	strb	r1, [r3, r2]
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	0018      	movs	r0, r3
 8005330:	f000 f891 	bl	8005456 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2210      	movs	r2, #16
 800533c:	4013      	ands	r3, r2
 800533e:	2b10      	cmp	r3, #16
 8005340:	d10e      	bne.n	8005360 <HAL_LPTIM_IRQHandler+0x3a0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2210      	movs	r2, #16
 800534a:	4013      	ands	r3, r2
 800534c:	2b10      	cmp	r3, #16
 800534e:	d107      	bne.n	8005360 <HAL_LPTIM_IRQHandler+0x3a0>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2210      	movs	r2, #16
 8005356:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	0018      	movs	r0, r3
 800535c:	f000 f883 	bl	8005466 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2220      	movs	r2, #32
 8005368:	4013      	ands	r3, r2
 800536a:	2b20      	cmp	r3, #32
 800536c:	d10e      	bne.n	800538c <HAL_LPTIM_IRQHandler+0x3cc>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2220      	movs	r2, #32
 8005376:	4013      	ands	r3, r2
 8005378:	2b20      	cmp	r3, #32
 800537a:	d107      	bne.n	800538c <HAL_LPTIM_IRQHandler+0x3cc>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2220      	movs	r2, #32
 8005382:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	0018      	movs	r0, r3
 8005388:	f000 f875 	bl	8005476 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2240      	movs	r2, #64	@ 0x40
 8005394:	4013      	ands	r3, r2
 8005396:	2b40      	cmp	r3, #64	@ 0x40
 8005398:	d10e      	bne.n	80053b8 <HAL_LPTIM_IRQHandler+0x3f8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2240      	movs	r2, #64	@ 0x40
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d107      	bne.n	80053b8 <HAL_LPTIM_IRQHandler+0x3f8>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2240      	movs	r2, #64	@ 0x40
 80053ae:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 f867 	bl	8005486 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2280      	movs	r2, #128	@ 0x80
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d10e      	bne.n	80053e4 <HAL_LPTIM_IRQHandler+0x424>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2280      	movs	r2, #128	@ 0x80
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b80      	cmp	r3, #128	@ 0x80
 80053d2:	d107      	bne.n	80053e4 <HAL_LPTIM_IRQHandler+0x424>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2280      	movs	r2, #128	@ 0x80
 80053da:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f859 	bl	8005496 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	401a      	ands	r2, r3
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d112      	bne.n	800541e <HAL_LPTIM_IRQHandler+0x45e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	2380      	movs	r3, #128	@ 0x80
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	401a      	ands	r2, r3
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	429a      	cmp	r2, r3
 800540a:	d108      	bne.n	800541e <HAL_LPTIM_IRQHandler+0x45e>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2280      	movs	r2, #128	@ 0x80
 8005412:	0052      	lsls	r2, r2, #1
 8005414:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	0018      	movs	r0, r3
 800541a:	f000 f844 	bl	80054a6 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b002      	add	sp, #8
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	46bd      	mov	sp, r7
 8005432:	b002      	add	sp, #8
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	46bd      	mov	sp, r7
 8005452:	b002      	add	sp, #8
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800545e:	46c0      	nop			@ (mov r8, r8)
 8005460:	46bd      	mov	sp, r7
 8005462:	b002      	add	sp, #8
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b002      	add	sp, #8
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	46bd      	mov	sp, r7
 8005482:	b002      	add	sp, #8
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b002      	add	sp, #8
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b002      	add	sp, #8
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b002      	add	sp, #8
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b002      	add	sp, #8
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b002      	add	sp, #8
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80054e2:	230f      	movs	r3, #15
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80054ea:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <LPTIM_WaitForFlag+0x68>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4915      	ldr	r1, [pc, #84]	@ (8005544 <LPTIM_WaitForFlag+0x6c>)
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7fa fe25 	bl	8000140 <__udivsi3>
 80054f6:	0003      	movs	r3, r0
 80054f8:	001a      	movs	r2, r3
 80054fa:	0013      	movs	r3, r2
 80054fc:	015b      	lsls	r3, r3, #5
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	189b      	adds	r3, r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	3b01      	subs	r3, #1
 800550c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8005514:	230f      	movs	r3, #15
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	2203      	movs	r2, #3
 800551a:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	4013      	ands	r3, r2
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d002      	beq.n	8005532 <LPTIM_WaitForFlag+0x5a>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ea      	bne.n	8005508 <LPTIM_WaitForFlag+0x30>

  return result;
 8005532:	230f      	movs	r3, #15
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	781b      	ldrb	r3, [r3, #0]
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000000 	.word	0x20000000
 8005544:	00004e20 	.word	0x00004e20

08005548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	2380      	movs	r3, #128	@ 0x80
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	429a      	cmp	r2, r3
 8005558:	d137      	bne.n	80055ca <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800555a:	4b27      	ldr	r3, [pc, #156]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	23c0      	movs	r3, #192	@ 0xc0
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	401a      	ands	r2, r3
 8005564:	2380      	movs	r3, #128	@ 0x80
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	429a      	cmp	r2, r3
 800556a:	d040      	beq.n	80055ee <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800556c:	4b22      	ldr	r3, [pc, #136]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005572:	401a      	ands	r2, r3
 8005574:	4b20      	ldr	r3, [pc, #128]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005576:	2180      	movs	r1, #128	@ 0x80
 8005578:	0089      	lsls	r1, r1, #2
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800557e:	4b20      	ldr	r3, [pc, #128]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2232      	movs	r2, #50	@ 0x32
 8005584:	4353      	muls	r3, r2
 8005586:	491f      	ldr	r1, [pc, #124]	@ (8005604 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8005588:	0018      	movs	r0, r3
 800558a:	f7fa fdd9 	bl	8000140 <__udivsi3>
 800558e:	0003      	movs	r3, r0
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005594:	e002      	b.n	800559c <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3b01      	subs	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800559c:	4b16      	ldr	r3, [pc, #88]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	401a      	ands	r2, r3
 80055a6:	2380      	movs	r3, #128	@ 0x80
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d102      	bne.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x6c>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f0      	bne.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055b4:	4b10      	ldr	r3, [pc, #64]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	2380      	movs	r3, #128	@ 0x80
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	401a      	ands	r2, r3
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d113      	bne.n	80055ee <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e012      	b.n	80055f0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80055ca:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	23c0      	movs	r3, #192	@ 0xc0
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	401a      	ands	r2, r3
 80055d4:	2380      	movs	r3, #128	@ 0x80
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	429a      	cmp	r2, r3
 80055da:	d008      	beq.n	80055ee <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055dc:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a06      	ldr	r2, [pc, #24]	@ (80055fc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80055e2:	401a      	ands	r2, r3
 80055e4:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80055e6:	2180      	movs	r1, #128	@ 0x80
 80055e8:	00c9      	lsls	r1, r1, #3
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b004      	add	sp, #16
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40007000 	.word	0x40007000
 80055fc:	fffff9ff 	.word	0xfffff9ff
 8005600:	20000000 	.word	0x20000000
 8005604:	000f4240 	.word	0x000f4240

08005608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800560c:	4b03      	ldr	r3, [pc, #12]	@ (800561c <HAL_PWREx_GetVoltageRange+0x14>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	23c0      	movs	r3, #192	@ 0xc0
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4013      	ands	r3, r2
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40007000 	.word	0x40007000

08005620 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005624:	4b04      	ldr	r3, [pc, #16]	@ (8005638 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b03      	ldr	r3, [pc, #12]	@ (8005638 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800562a:	2180      	movs	r1, #128	@ 0x80
 800562c:	01c9      	lsls	r1, r1, #7
 800562e:	430a      	orrs	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
}
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40007000 	.word	0x40007000

0800563c <HAL_PWREx_EnableUltraLowPowerMode>:
  * @brief Enable Ultra Low Power BORL, BORH and PVD for STOP2 and Standby modes.
  * @note  All the other modes are not affected by this bit.
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPowerMode(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_ENULP);
 8005640:	4b04      	ldr	r3, [pc, #16]	@ (8005654 <HAL_PWREx_EnableUltraLowPowerMode+0x18>)
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b03      	ldr	r3, [pc, #12]	@ (8005654 <HAL_PWREx_EnableUltraLowPowerMode+0x18>)
 8005646:	2180      	movs	r1, #128	@ 0x80
 8005648:	0089      	lsls	r1, r1, #2
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]
}
 800564e:	46c0      	nop			@ (mov r8, r8)
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40007000 	.word	0x40007000

08005658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005658:	b5b0      	push	{r4, r5, r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005660:	4bc9      	ldr	r3, [pc, #804]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2238      	movs	r2, #56	@ 0x38
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800566a:	4bc7      	ldr	r3, [pc, #796]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2203      	movs	r2, #3
 8005670:	4013      	ands	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2210      	movs	r2, #16
 800567a:	4013      	ands	r3, r2
 800567c:	d100      	bne.n	8005680 <HAL_RCC_OscConfig+0x28>
 800567e:	e0ef      	b.n	8005860 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <HAL_RCC_OscConfig+0x3e>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b18      	cmp	r3, #24
 800568a:	d000      	beq.n	800568e <HAL_RCC_OscConfig+0x36>
 800568c:	e093      	b.n	80057b6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d000      	beq.n	8005696 <HAL_RCC_OscConfig+0x3e>
 8005694:	e08f      	b.n	80057b6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005696:	4bbc      	ldr	r3, [pc, #752]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2202      	movs	r2, #2
 800569c:	4013      	ands	r3, r2
 800569e:	d006      	beq.n	80056ae <HAL_RCC_OscConfig+0x56>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f000 fbf2 	bl	8005e92 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056b2:	4bb5      	ldr	r3, [pc, #724]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2108      	movs	r1, #8
 80056b8:	400b      	ands	r3, r1
 80056ba:	d004      	beq.n	80056c6 <HAL_RCC_OscConfig+0x6e>
 80056bc:	4bb2      	ldr	r3, [pc, #712]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	21f0      	movs	r1, #240	@ 0xf0
 80056c2:	400b      	ands	r3, r1
 80056c4:	e005      	b.n	80056d2 <HAL_RCC_OscConfig+0x7a>
 80056c6:	49b0      	ldr	r1, [pc, #704]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80056c8:	2394      	movs	r3, #148	@ 0x94
 80056ca:	58cb      	ldr	r3, [r1, r3]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	21f0      	movs	r1, #240	@ 0xf0
 80056d0:	400b      	ands	r3, r1
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d225      	bcs.n	8005722 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	0018      	movs	r0, r3
 80056dc:	f000 fd90 	bl	8006200 <RCC_SetFlashLatencyFromMSIRange>
 80056e0:	1e03      	subs	r3, r0, #0
 80056e2:	d002      	beq.n	80056ea <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f000 fbd4 	bl	8005e92 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056ea:	4ba7      	ldr	r3, [pc, #668]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4ba6      	ldr	r3, [pc, #664]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80056f0:	2108      	movs	r1, #8
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	4ba4      	ldr	r3, [pc, #656]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	22f0      	movs	r2, #240	@ 0xf0
 80056fc:	4393      	bics	r3, r2
 80056fe:	0019      	movs	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005704:	4ba0      	ldr	r3, [pc, #640]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800570a:	4b9f      	ldr	r3, [pc, #636]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4a9f      	ldr	r2, [pc, #636]	@ (800598c <HAL_RCC_OscConfig+0x334>)
 8005710:	4013      	ands	r3, r2
 8005712:	0019      	movs	r1, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	021a      	lsls	r2, r3, #8
 800571a:	4b9b      	ldr	r3, [pc, #620]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	e027      	b.n	8005772 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005722:	4b99      	ldr	r3, [pc, #612]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b98      	ldr	r3, [pc, #608]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005728:	2108      	movs	r1, #8
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	4b96      	ldr	r3, [pc, #600]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	22f0      	movs	r2, #240	@ 0xf0
 8005734:	4393      	bics	r3, r2
 8005736:	0019      	movs	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800573c:	4b92      	ldr	r3, [pc, #584]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005742:	4b91      	ldr	r3, [pc, #580]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4a91      	ldr	r2, [pc, #580]	@ (800598c <HAL_RCC_OscConfig+0x334>)
 8005748:	4013      	ands	r3, r2
 800574a:	0019      	movs	r1, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	021a      	lsls	r2, r3, #8
 8005752:	4b8d      	ldr	r3, [pc, #564]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	0018      	movs	r0, r3
 8005764:	f000 fd4c 	bl	8006200 <RCC_SetFlashLatencyFromMSIRange>
 8005768:	1e03      	subs	r3, r0, #0
 800576a:	d002      	beq.n	8005772 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f000 fb90 	bl	8005e92 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005772:	f000 fc87 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8005776:	0001      	movs	r1, r0
 8005778:	4b83      	ldr	r3, [pc, #524]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800577a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	220f      	movs	r2, #15
 8005780:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8005782:	4a83      	ldr	r2, [pc, #524]	@ (8005990 <HAL_RCC_OscConfig+0x338>)
 8005784:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005786:	001a      	movs	r2, r3
 8005788:	231f      	movs	r3, #31
 800578a:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800578c:	000a      	movs	r2, r1
 800578e:	40da      	lsrs	r2, r3
 8005790:	4b80      	ldr	r3, [pc, #512]	@ (8005994 <HAL_RCC_OscConfig+0x33c>)
 8005792:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005794:	4b80      	ldr	r3, [pc, #512]	@ (8005998 <HAL_RCC_OscConfig+0x340>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	250f      	movs	r5, #15
 800579a:	197c      	adds	r4, r7, r5
 800579c:	0018      	movs	r0, r3
 800579e:	f7fd ff2d 	bl	80035fc <HAL_InitTick>
 80057a2:	0003      	movs	r3, r0
 80057a4:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 80057a6:	197b      	adds	r3, r7, r5
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d057      	beq.n	800585e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80057ae:	197b      	adds	r3, r7, r5
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f000 fb6e 	bl	8005e92 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d035      	beq.n	800582a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057be:	4b72      	ldr	r3, [pc, #456]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b71      	ldr	r3, [pc, #452]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80057c4:	2101      	movs	r1, #1
 80057c6:	430a      	orrs	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057ca:	f7fd ff71 	bl	80036b0 <HAL_GetTick>
 80057ce:	0003      	movs	r3, r0
 80057d0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057d2:	e009      	b.n	80057e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80057d4:	f7fd ff6c 	bl	80036b0 <HAL_GetTick>
 80057d8:	0002      	movs	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d902      	bls.n	80057e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	f000 fb55 	bl	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057e8:	4b67      	ldr	r3, [pc, #412]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2202      	movs	r2, #2
 80057ee:	4013      	ands	r3, r2
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057f2:	4b65      	ldr	r3, [pc, #404]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b64      	ldr	r3, [pc, #400]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80057f8:	2108      	movs	r1, #8
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	4b62      	ldr	r3, [pc, #392]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	22f0      	movs	r2, #240	@ 0xf0
 8005804:	4393      	bics	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800580c:	4b5e      	ldr	r3, [pc, #376]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800580e:	430a      	orrs	r2, r1
 8005810:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005812:	4b5d      	ldr	r3, [pc, #372]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4a5d      	ldr	r2, [pc, #372]	@ (800598c <HAL_RCC_OscConfig+0x334>)
 8005818:	4013      	ands	r3, r2
 800581a:	0019      	movs	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	021a      	lsls	r2, r3, #8
 8005822:	4b59      	ldr	r3, [pc, #356]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	e01a      	b.n	8005860 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800582a:	4b57      	ldr	r3, [pc, #348]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b56      	ldr	r3, [pc, #344]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005830:	2101      	movs	r1, #1
 8005832:	438a      	bics	r2, r1
 8005834:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005836:	f7fd ff3b 	bl	80036b0 <HAL_GetTick>
 800583a:	0003      	movs	r3, r0
 800583c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8005840:	f7fd ff36 	bl	80036b0 <HAL_GetTick>
 8005844:	0002      	movs	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e31f      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005852:	4b4d      	ldr	r3, [pc, #308]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2202      	movs	r2, #2
 8005858:	4013      	ands	r3, r2
 800585a:	d1f1      	bne.n	8005840 <HAL_RCC_OscConfig+0x1e8>
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800585e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2201      	movs	r2, #1
 8005866:	4013      	ands	r3, r2
 8005868:	d100      	bne.n	800586c <HAL_RCC_OscConfig+0x214>
 800586a:	e065      	b.n	8005938 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b10      	cmp	r3, #16
 8005870:	d005      	beq.n	800587e <HAL_RCC_OscConfig+0x226>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	2b18      	cmp	r3, #24
 8005876:	d10e      	bne.n	8005896 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d10b      	bne.n	8005896 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800587e:	4b42      	ldr	r3, [pc, #264]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	2380      	movs	r3, #128	@ 0x80
 8005884:	029b      	lsls	r3, r3, #10
 8005886:	4013      	ands	r3, r2
 8005888:	d055      	beq.n	8005936 <HAL_RCC_OscConfig+0x2de>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d151      	bne.n	8005936 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e2fd      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	2380      	movs	r3, #128	@ 0x80
 800589c:	025b      	lsls	r3, r3, #9
 800589e:	429a      	cmp	r2, r3
 80058a0:	d107      	bne.n	80058b2 <HAL_RCC_OscConfig+0x25a>
 80058a2:	4b39      	ldr	r3, [pc, #228]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b38      	ldr	r3, [pc, #224]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80058a8:	2180      	movs	r1, #128	@ 0x80
 80058aa:	0249      	lsls	r1, r1, #9
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e013      	b.n	80058da <HAL_RCC_OscConfig+0x282>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	23a0      	movs	r3, #160	@ 0xa0
 80058b8:	02db      	lsls	r3, r3, #11
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_OscConfig+0x276>
 80058be:	4b32      	ldr	r3, [pc, #200]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b31      	ldr	r3, [pc, #196]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80058c4:	21a0      	movs	r1, #160	@ 0xa0
 80058c6:	02c9      	lsls	r1, r1, #11
 80058c8:	430a      	orrs	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e005      	b.n	80058da <HAL_RCC_OscConfig+0x282>
 80058ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 80058d4:	4931      	ldr	r1, [pc, #196]	@ (800599c <HAL_RCC_OscConfig+0x344>)
 80058d6:	400a      	ands	r2, r1
 80058d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d014      	beq.n	800590c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e2:	f7fd fee5 	bl	80036b0 <HAL_GetTick>
 80058e6:	0003      	movs	r3, r0
 80058e8:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80058ec:	f7fd fee0 	bl	80036b0 <HAL_GetTick>
 80058f0:	0002      	movs	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	@ 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e2c9      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058fe:	4b22      	ldr	r3, [pc, #136]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	2380      	movs	r3, #128	@ 0x80
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	4013      	ands	r3, r2
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x294>
 800590a:	e015      	b.n	8005938 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fd fed0 	bl	80036b0 <HAL_GetTick>
 8005910:	0003      	movs	r3, r0
 8005912:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005916:	f7fd fecb 	bl	80036b0 <HAL_GetTick>
 800591a:	0002      	movs	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b64      	cmp	r3, #100	@ 0x64
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e2b4      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005928:	4b17      	ldr	r3, [pc, #92]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	4013      	ands	r3, r2
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x2be>
 8005934:	e000      	b.n	8005938 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005936:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2202      	movs	r2, #2
 800593e:	4013      	ands	r3, r2
 8005940:	d100      	bne.n	8005944 <HAL_RCC_OscConfig+0x2ec>
 8005942:	e074      	b.n	8005a2e <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b08      	cmp	r3, #8
 8005948:	d005      	beq.n	8005956 <HAL_RCC_OscConfig+0x2fe>
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b18      	cmp	r3, #24
 800594e:	d129      	bne.n	80059a4 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d126      	bne.n	80059a4 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005956:	4b0c      	ldr	r3, [pc, #48]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	2380      	movs	r3, #128	@ 0x80
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4013      	ands	r3, r2
 8005960:	d005      	beq.n	800596e <HAL_RCC_OscConfig+0x316>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e291      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596e:	4b06      	ldr	r3, [pc, #24]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4a0b      	ldr	r2, [pc, #44]	@ (80059a0 <HAL_RCC_OscConfig+0x348>)
 8005974:	4013      	ands	r3, r2
 8005976:	0019      	movs	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	061a      	lsls	r2, r3, #24
 800597e:	4b02      	ldr	r3, [pc, #8]	@ (8005988 <HAL_RCC_OscConfig+0x330>)
 8005980:	430a      	orrs	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005984:	e053      	b.n	8005a2e <HAL_RCC_OscConfig+0x3d6>
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	40021000 	.word	0x40021000
 800598c:	ffff00ff 	.word	0xffff00ff
 8005990:	0800ade4 	.word	0x0800ade4
 8005994:	20000000 	.word	0x20000000
 8005998:	20000004 	.word	0x20000004
 800599c:	fffaffff 	.word	0xfffaffff
 80059a0:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d026      	beq.n	80059fa <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ac:	4bc7      	ldr	r3, [pc, #796]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4bc6      	ldr	r3, [pc, #792]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 80059b2:	2180      	movs	r1, #128	@ 0x80
 80059b4:	0049      	lsls	r1, r1, #1
 80059b6:	430a      	orrs	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ba:	f7fd fe79 	bl	80036b0 <HAL_GetTick>
 80059be:	0003      	movs	r3, r0
 80059c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80059c4:	f7fd fe74 	bl	80036b0 <HAL_GetTick>
 80059c8:	0002      	movs	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e25d      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059d6:	4bbd      	ldr	r3, [pc, #756]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	2380      	movs	r3, #128	@ 0x80
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4013      	ands	r3, r2
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e2:	4bba      	ldr	r3, [pc, #744]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	4aba      	ldr	r2, [pc, #744]	@ (8005cd0 <HAL_RCC_OscConfig+0x678>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	0019      	movs	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	061a      	lsls	r2, r3, #24
 80059f2:	4bb6      	ldr	r3, [pc, #728]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
 80059f8:	e019      	b.n	8005a2e <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fa:	4bb4      	ldr	r3, [pc, #720]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4bb3      	ldr	r3, [pc, #716]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a00:	49b4      	ldr	r1, [pc, #720]	@ (8005cd4 <HAL_RCC_OscConfig+0x67c>)
 8005a02:	400a      	ands	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a06:	f7fd fe53 	bl	80036b0 <HAL_GetTick>
 8005a0a:	0003      	movs	r3, r0
 8005a0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005a10:	f7fd fe4e 	bl	80036b0 <HAL_GetTick>
 8005a14:	0002      	movs	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e237      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a22:	4baa      	ldr	r3, [pc, #680]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	2380      	movs	r3, #128	@ 0x80
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2208      	movs	r2, #8
 8005a34:	4013      	ands	r3, r2
 8005a36:	d051      	beq.n	8005adc <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d031      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d108      	bne.n	8005a5a <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8005a48:	4aa0      	ldr	r2, [pc, #640]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a4a:	2394      	movs	r3, #148	@ 0x94
 8005a4c:	58d3      	ldr	r3, [r2, r3]
 8005a4e:	499f      	ldr	r1, [pc, #636]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a50:	2204      	movs	r2, #4
 8005a52:	4393      	bics	r3, r2
 8005a54:	2294      	movs	r2, #148	@ 0x94
 8005a56:	508b      	str	r3, [r1, r2]
 8005a58:	e007      	b.n	8005a6a <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8005a5a:	4a9c      	ldr	r2, [pc, #624]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a5c:	2394      	movs	r3, #148	@ 0x94
 8005a5e:	58d3      	ldr	r3, [r2, r3]
 8005a60:	499a      	ldr	r1, [pc, #616]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a62:	2204      	movs	r2, #4
 8005a64:	4313      	orrs	r3, r2
 8005a66:	2294      	movs	r2, #148	@ 0x94
 8005a68:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a6a:	4a98      	ldr	r2, [pc, #608]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a6c:	2394      	movs	r3, #148	@ 0x94
 8005a6e:	58d3      	ldr	r3, [r2, r3]
 8005a70:	4996      	ldr	r1, [pc, #600]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	2294      	movs	r2, #148	@ 0x94
 8005a78:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fd fe19 	bl	80036b0 <HAL_GetTick>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a84:	f7fd fe14 	bl	80036b0 <HAL_GetTick>
 8005a88:	0002      	movs	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b11      	cmp	r3, #17
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1fd      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a96:	4a8d      	ldr	r2, [pc, #564]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005a98:	2394      	movs	r3, #148	@ 0x94
 8005a9a:	58d3      	ldr	r3, [r2, r3]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x42c>
 8005aa2:	e01b      	b.n	8005adc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aa4:	4a89      	ldr	r2, [pc, #548]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005aa6:	2394      	movs	r3, #148	@ 0x94
 8005aa8:	58d3      	ldr	r3, [r2, r3]
 8005aaa:	4988      	ldr	r1, [pc, #544]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	4393      	bics	r3, r2
 8005ab0:	2294      	movs	r2, #148	@ 0x94
 8005ab2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fd fdfc 	bl	80036b0 <HAL_GetTick>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005abe:	f7fd fdf7 	bl	80036b0 <HAL_GetTick>
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b11      	cmp	r3, #17
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e1e0      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ad0:	4a7e      	ldr	r2, [pc, #504]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005ad2:	2394      	movs	r3, #148	@ 0x94
 8005ad4:	58d3      	ldr	r3, [r2, r3]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d1f0      	bne.n	8005abe <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d100      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x490>
 8005ae6:	e10d      	b.n	8005d04 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ae8:	201f      	movs	r0, #31
 8005aea:	183b      	adds	r3, r7, r0
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8005af0:	4b76      	ldr	r3, [pc, #472]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005af2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	055b      	lsls	r3, r3, #21
 8005af8:	4013      	ands	r3, r2
 8005afa:	d110      	bne.n	8005b1e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005afc:	4b73      	ldr	r3, [pc, #460]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005afe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b00:	4b72      	ldr	r3, [pc, #456]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b02:	2180      	movs	r1, #128	@ 0x80
 8005b04:	0549      	lsls	r1, r1, #21
 8005b06:	430a      	orrs	r2, r1
 8005b08:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b0a:	4b70      	ldr	r3, [pc, #448]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005b0e:	2380      	movs	r3, #128	@ 0x80
 8005b10:	055b      	lsls	r3, r3, #21
 8005b12:	4013      	ands	r3, r2
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b18:	183b      	adds	r3, r7, r0
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b1e:	4b6e      	ldr	r3, [pc, #440]	@ (8005cd8 <HAL_RCC_OscConfig+0x680>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	2380      	movs	r3, #128	@ 0x80
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4013      	ands	r3, r2
 8005b28:	d11a      	bne.n	8005b60 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8005cd8 <HAL_RCC_OscConfig+0x680>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005cd8 <HAL_RCC_OscConfig+0x680>)
 8005b30:	2180      	movs	r1, #128	@ 0x80
 8005b32:	0049      	lsls	r1, r1, #1
 8005b34:	430a      	orrs	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b38:	f7fd fdba 	bl	80036b0 <HAL_GetTick>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b42:	f7fd fdb5 	bl	80036b0 <HAL_GetTick>
 8005b46:	0002      	movs	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e19e      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b54:	4b60      	ldr	r3, [pc, #384]	@ (8005cd8 <HAL_RCC_OscConfig+0x680>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	@ 0x80
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2201      	movs	r2, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	d01e      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2204      	movs	r2, #4
 8005b70:	4013      	ands	r3, r2
 8005b72:	d010      	beq.n	8005b96 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b74:	4a55      	ldr	r2, [pc, #340]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b76:	2390      	movs	r3, #144	@ 0x90
 8005b78:	58d3      	ldr	r3, [r2, r3]
 8005b7a:	4954      	ldr	r1, [pc, #336]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	2290      	movs	r2, #144	@ 0x90
 8005b82:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b84:	4a51      	ldr	r2, [pc, #324]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b86:	2390      	movs	r3, #144	@ 0x90
 8005b88:	58d3      	ldr	r3, [r2, r3]
 8005b8a:	4950      	ldr	r1, [pc, #320]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	2290      	movs	r2, #144	@ 0x90
 8005b92:	508b      	str	r3, [r1, r2]
 8005b94:	e018      	b.n	8005bc8 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b96:	4a4d      	ldr	r2, [pc, #308]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b98:	2390      	movs	r3, #144	@ 0x90
 8005b9a:	58d3      	ldr	r3, [r2, r3]
 8005b9c:	494b      	ldr	r1, [pc, #300]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	2290      	movs	r2, #144	@ 0x90
 8005ba4:	508b      	str	r3, [r1, r2]
 8005ba6:	e00f      	b.n	8005bc8 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ba8:	4a48      	ldr	r2, [pc, #288]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005baa:	2390      	movs	r3, #144	@ 0x90
 8005bac:	58d3      	ldr	r3, [r2, r3]
 8005bae:	4947      	ldr	r1, [pc, #284]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	4393      	bics	r3, r2
 8005bb4:	2290      	movs	r2, #144	@ 0x90
 8005bb6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005bb8:	4a44      	ldr	r2, [pc, #272]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005bba:	2390      	movs	r3, #144	@ 0x90
 8005bbc:	58d3      	ldr	r3, [r2, r3]
 8005bbe:	4943      	ldr	r1, [pc, #268]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	4393      	bics	r3, r2
 8005bc4:	2290      	movs	r2, #144	@ 0x90
 8005bc6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d04f      	beq.n	8005c70 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fd fd6e 	bl	80036b0 <HAL_GetTick>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd8:	e009      	b.n	8005bee <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bda:	f7fd fd69 	bl	80036b0 <HAL_GetTick>
 8005bde:	0002      	movs	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	4a3d      	ldr	r2, [pc, #244]	@ (8005cdc <HAL_RCC_OscConfig+0x684>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e151      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bee:	4a37      	ldr	r2, [pc, #220]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005bf0:	2390      	movs	r3, #144	@ 0x90
 8005bf2:	58d3      	ldr	r3, [r2, r3]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d0ef      	beq.n	8005bda <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2280      	movs	r2, #128	@ 0x80
 8005c00:	4013      	ands	r3, r2
 8005c02:	d01a      	beq.n	8005c3a <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c04:	4a31      	ldr	r2, [pc, #196]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c06:	2390      	movs	r3, #144	@ 0x90
 8005c08:	58d3      	ldr	r3, [r2, r3]
 8005c0a:	4930      	ldr	r1, [pc, #192]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c0c:	2280      	movs	r2, #128	@ 0x80
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	2290      	movs	r2, #144	@ 0x90
 8005c12:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c14:	e009      	b.n	8005c2a <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fd fd4b 	bl	80036b0 <HAL_GetTick>
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	4a2e      	ldr	r2, [pc, #184]	@ (8005cdc <HAL_RCC_OscConfig+0x684>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e133      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c2a:	4a28      	ldr	r2, [pc, #160]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c2c:	2390      	movs	r3, #144	@ 0x90
 8005c2e:	58d2      	ldr	r2, [r2, r3]
 8005c30:	2380      	movs	r3, #128	@ 0x80
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	4013      	ands	r3, r2
 8005c36:	d0ee      	beq.n	8005c16 <HAL_RCC_OscConfig+0x5be>
 8005c38:	e059      	b.n	8005cee <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c3a:	4a24      	ldr	r2, [pc, #144]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c3c:	2390      	movs	r3, #144	@ 0x90
 8005c3e:	58d3      	ldr	r3, [r2, r3]
 8005c40:	4922      	ldr	r1, [pc, #136]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c42:	2280      	movs	r2, #128	@ 0x80
 8005c44:	4393      	bics	r3, r2
 8005c46:	2290      	movs	r2, #144	@ 0x90
 8005c48:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c4a:	e009      	b.n	8005c60 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7fd fd30 	bl	80036b0 <HAL_GetTick>
 8005c50:	0002      	movs	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	4a21      	ldr	r2, [pc, #132]	@ (8005cdc <HAL_RCC_OscConfig+0x684>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e118      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c60:	4a1a      	ldr	r2, [pc, #104]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c62:	2390      	movs	r3, #144	@ 0x90
 8005c64:	58d2      	ldr	r2, [r2, r3]
 8005c66:	2380      	movs	r3, #128	@ 0x80
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d1ee      	bne.n	8005c4c <HAL_RCC_OscConfig+0x5f4>
 8005c6e:	e03e      	b.n	8005cee <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c70:	f7fd fd1e 	bl	80036b0 <HAL_GetTick>
 8005c74:	0003      	movs	r3, r0
 8005c76:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c78:	e009      	b.n	8005c8e <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7a:	f7fd fd19 	bl	80036b0 <HAL_GetTick>
 8005c7e:	0002      	movs	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	4a15      	ldr	r2, [pc, #84]	@ (8005cdc <HAL_RCC_OscConfig+0x684>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e101      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c90:	2390      	movs	r3, #144	@ 0x90
 8005c92:	58d3      	ldr	r3, [r2, r3]
 8005c94:	2202      	movs	r2, #2
 8005c96:	4013      	ands	r3, r2
 8005c98:	d1ef      	bne.n	8005c7a <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005c9c:	2390      	movs	r3, #144	@ 0x90
 8005c9e:	58d3      	ldr	r3, [r2, r3]
 8005ca0:	2280      	movs	r2, #128	@ 0x80
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d023      	beq.n	8005cee <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ca6:	4a09      	ldr	r2, [pc, #36]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005ca8:	2390      	movs	r3, #144	@ 0x90
 8005caa:	58d3      	ldr	r3, [r2, r3]
 8005cac:	4907      	ldr	r1, [pc, #28]	@ (8005ccc <HAL_RCC_OscConfig+0x674>)
 8005cae:	2280      	movs	r2, #128	@ 0x80
 8005cb0:	4393      	bics	r3, r2
 8005cb2:	2290      	movs	r2, #144	@ 0x90
 8005cb4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005cb6:	e013      	b.n	8005ce0 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fd fcfa 	bl	80036b0 <HAL_GetTick>
 8005cbc:	0002      	movs	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	4a06      	ldr	r2, [pc, #24]	@ (8005cdc <HAL_RCC_OscConfig+0x684>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d90b      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0e2      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	80ffffff 	.word	0x80ffffff
 8005cd4:	fffffeff 	.word	0xfffffeff
 8005cd8:	40007000 	.word	0x40007000
 8005cdc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005ce2:	2390      	movs	r3, #144	@ 0x90
 8005ce4:	58d2      	ldr	r2, [r2, r3]
 8005ce6:	2380      	movs	r3, #128	@ 0x80
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	4013      	ands	r3, r2
 8005cec:	d1e4      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cee:	231f      	movs	r3, #31
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d105      	bne.n	8005d04 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf8:	4b68      	ldr	r3, [pc, #416]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005cfa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005cfc:	4b67      	ldr	r3, [pc, #412]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005cfe:	4968      	ldr	r1, [pc, #416]	@ (8005ea0 <HAL_RCC_OscConfig+0x848>)
 8005d00:	400a      	ands	r2, r1
 8005d02:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d03c      	beq.n	8005d88 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01c      	beq.n	8005d50 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d16:	4a61      	ldr	r2, [pc, #388]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005d18:	2398      	movs	r3, #152	@ 0x98
 8005d1a:	58d3      	ldr	r3, [r2, r3]
 8005d1c:	495f      	ldr	r1, [pc, #380]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4313      	orrs	r3, r2
 8005d22:	2298      	movs	r2, #152	@ 0x98
 8005d24:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d26:	f7fd fcc3 	bl	80036b0 <HAL_GetTick>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d30:	f7fd fcbe 	bl	80036b0 <HAL_GetTick>
 8005d34:	0002      	movs	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e0a7      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d42:	4a56      	ldr	r2, [pc, #344]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005d44:	2398      	movs	r3, #152	@ 0x98
 8005d46:	58d3      	ldr	r3, [r2, r3]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x6d8>
 8005d4e:	e01b      	b.n	8005d88 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d50:	4a52      	ldr	r2, [pc, #328]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005d52:	2398      	movs	r3, #152	@ 0x98
 8005d54:	58d3      	ldr	r3, [r2, r3]
 8005d56:	4951      	ldr	r1, [pc, #324]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	2298      	movs	r2, #152	@ 0x98
 8005d5e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d60:	f7fd fca6 	bl	80036b0 <HAL_GetTick>
 8005d64:	0003      	movs	r3, r0
 8005d66:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d6a:	f7fd fca1 	bl	80036b0 <HAL_GetTick>
 8005d6e:	0002      	movs	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e08a      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8005d7c:	4a47      	ldr	r2, [pc, #284]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005d7e:	2398      	movs	r3, #152	@ 0x98
 8005d80:	58d3      	ldr	r3, [r2, r3]
 8005d82:	2202      	movs	r2, #2
 8005d84:	4013      	ands	r3, r2
 8005d86:	d1f0      	bne.n	8005d6a <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d100      	bne.n	8005d92 <HAL_RCC_OscConfig+0x73a>
 8005d90:	e07e      	b.n	8005e90 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d92:	4b42      	ldr	r3, [pc, #264]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2238      	movs	r2, #56	@ 0x38
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b18      	cmp	r3, #24
 8005d9c:	d100      	bne.n	8005da0 <HAL_RCC_OscConfig+0x748>
 8005d9e:	e075      	b.n	8005e8c <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d156      	bne.n	8005e56 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da8:	4b3c      	ldr	r3, [pc, #240]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b3b      	ldr	r3, [pc, #236]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005dae:	493d      	ldr	r1, [pc, #244]	@ (8005ea4 <HAL_RCC_OscConfig+0x84c>)
 8005db0:	400a      	ands	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fd fc7c 	bl	80036b0 <HAL_GetTick>
 8005db8:	0003      	movs	r3, r0
 8005dba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dbe:	f7fd fc77 	bl	80036b0 <HAL_GetTick>
 8005dc2:	0002      	movs	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e060      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd0:	4b32      	ldr	r3, [pc, #200]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2380      	movs	r3, #128	@ 0x80
 8005dd6:	049b      	lsls	r3, r3, #18
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4a31      	ldr	r2, [pc, #196]	@ (8005ea8 <HAL_RCC_OscConfig+0x850>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	0019      	movs	r1, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	4b24      	ldr	r3, [pc, #144]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8005e10:	4b22      	ldr	r3, [pc, #136]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	4b21      	ldr	r3, [pc, #132]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e16:	2180      	movs	r1, #128	@ 0x80
 8005e18:	0549      	lsls	r1, r1, #21
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b1e      	ldr	r3, [pc, #120]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e24:	2180      	movs	r1, #128	@ 0x80
 8005e26:	0449      	lsls	r1, r1, #17
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fd fc40 	bl	80036b0 <HAL_GetTick>
 8005e30:	0003      	movs	r3, r0
 8005e32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e36:	f7fd fc3b 	bl	80036b0 <HAL_GetTick>
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e024      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e48:	4b14      	ldr	r3, [pc, #80]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	2380      	movs	r3, #128	@ 0x80
 8005e4e:	049b      	lsls	r3, r3, #18
 8005e50:	4013      	ands	r3, r2
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x7de>
 8005e54:	e01c      	b.n	8005e90 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b11      	ldr	r3, [pc, #68]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b10      	ldr	r3, [pc, #64]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e5c:	4911      	ldr	r1, [pc, #68]	@ (8005ea4 <HAL_RCC_OscConfig+0x84c>)
 8005e5e:	400a      	ands	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fd fc25 	bl	80036b0 <HAL_GetTick>
 8005e66:	0003      	movs	r3, r0
 8005e68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6c:	f7fd fc20 	bl	80036b0 <HAL_GetTick>
 8005e70:	0002      	movs	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e009      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e7e:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <HAL_RCC_OscConfig+0x844>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	2380      	movs	r3, #128	@ 0x80
 8005e84:	049b      	lsls	r3, r3, #18
 8005e86:	4013      	ands	r3, r2
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x814>
 8005e8a:	e001      	b.n	8005e90 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b008      	add	sp, #32
 8005e98:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	efffffff 	.word	0xefffffff
 8005ea4:	feffffff 	.word	0xfeffffff
 8005ea8:	11c1808c 	.word	0x11c1808c

08005eac <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eac:	b5b0      	push	{r4, r5, r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2207      	movs	r2, #7
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d911      	bls.n	8005ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec4:	4b68      	ldr	r3, [pc, #416]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2207      	movs	r2, #7
 8005eca:	4393      	bics	r3, r2
 8005ecc:	0019      	movs	r1, r3
 8005ece:	4b66      	ldr	r3, [pc, #408]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed6:	4b64      	ldr	r3, [pc, #400]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2207      	movs	r2, #7
 8005edc:	4013      	ands	r3, r2
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d001      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0bb      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2201      	movs	r2, #1
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d100      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x48>
 8005ef2:	e064      	b.n	8005fbe <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005efc:	4b5b      	ldr	r3, [pc, #364]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	049b      	lsls	r3, r3, #18
 8005f04:	4013      	ands	r3, r2
 8005f06:	d138      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a9      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f14:	4b55      	ldr	r3, [pc, #340]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	029b      	lsls	r3, r3, #10
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d12c      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e09d      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2202      	movs	r2, #2
 8005f32:	4013      	ands	r3, r2
 8005f34:	d121      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e092      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d107      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f42:	4b4a      	ldr	r3, [pc, #296]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	2380      	movs	r3, #128	@ 0x80
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d115      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e086      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f5a:	4a44      	ldr	r2, [pc, #272]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005f5c:	2394      	movs	r3, #148	@ 0x94
 8005f5e:	58d3      	ldr	r3, [r2, r3]
 8005f60:	2202      	movs	r2, #2
 8005f62:	4013      	ands	r3, r2
 8005f64:	d109      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e07a      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6a:	4a40      	ldr	r2, [pc, #256]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005f6c:	2390      	movs	r3, #144	@ 0x90
 8005f6e:	58d3      	ldr	r3, [r2, r3]
 8005f70:	2202      	movs	r2, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d101      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e072      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2207      	movs	r2, #7
 8005f80:	4393      	bics	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	4b38      	ldr	r3, [pc, #224]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f8e:	f7fd fb8f 	bl	80036b0 <HAL_GetTick>
 8005f92:	0003      	movs	r3, r0
 8005f94:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	e009      	b.n	8005fac <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f98:	f7fd fb8a 	bl	80036b0 <HAL_GetTick>
 8005f9c:	0002      	movs	r2, r0
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	4a33      	ldr	r2, [pc, #204]	@ (8006070 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e059      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fac:	4b2f      	ldr	r3, [pc, #188]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2238      	movs	r2, #56	@ 0x38
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d1ec      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d009      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc8:	4b28      	ldr	r3, [pc, #160]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	4a29      	ldr	r2, [pc, #164]	@ (8006074 <HAL_RCC_ClockConfig+0x1c8>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	0019      	movs	r1, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	4b25      	ldr	r3, [pc, #148]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b22      	ldr	r3, [pc, #136]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d211      	bcs.n	800600e <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b1f      	ldr	r3, [pc, #124]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2207      	movs	r2, #7
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	0019      	movs	r1, r3
 8005ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8006068 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2207      	movs	r2, #7
 8006002:	4013      	ands	r3, r2
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d001      	beq.n	800600e <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e028      	b.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2204      	movs	r2, #4
 8006014:	4013      	ands	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006018:	4b14      	ldr	r3, [pc, #80]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4a16      	ldr	r2, [pc, #88]	@ (8006078 <HAL_RCC_ClockConfig+0x1cc>)
 800601e:	4013      	ands	r3, r2
 8006020:	0019      	movs	r1, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	4b11      	ldr	r3, [pc, #68]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800602c:	f000 f82a 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006030:	0001      	movs	r1, r0
 8006032:	4b0e      	ldr	r3, [pc, #56]	@ (800606c <HAL_RCC_ClockConfig+0x1c0>)
 8006034:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	220f      	movs	r2, #15
 800603a:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800603c:	4a0f      	ldr	r2, [pc, #60]	@ (800607c <HAL_RCC_ClockConfig+0x1d0>)
 800603e:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006040:	001a      	movs	r2, r3
 8006042:	231f      	movs	r3, #31
 8006044:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006046:	000a      	movs	r2, r1
 8006048:	40da      	lsrs	r2, r3
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <HAL_RCC_ClockConfig+0x1d4>)
 800604c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800604e:	250b      	movs	r5, #11
 8006050:	197c      	adds	r4, r7, r5
 8006052:	2003      	movs	r0, #3
 8006054:	f7fd fad2 	bl	80035fc <HAL_InitTick>
 8006058:	0003      	movs	r3, r0
 800605a:	7023      	strb	r3, [r4, #0]

  return halstatus;
 800605c:	197b      	adds	r3, r7, r5
 800605e:	781b      	ldrb	r3, [r3, #0]
}
 8006060:	0018      	movs	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	b004      	add	sp, #16
 8006066:	bdb0      	pop	{r4, r5, r7, pc}
 8006068:	40022000 	.word	0x40022000
 800606c:	40021000 	.word	0x40021000
 8006070:	00001388 	.word	0x00001388
 8006074:	fffff0ff 	.word	0xfffff0ff
 8006078:	ffff8fff 	.word	0xffff8fff
 800607c:	0800ade4 	.word	0x0800ade4
 8006080:	20000000 	.word	0x20000000

08006084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	@ 0x28
 8006088:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006092:	4b46      	ldr	r3, [pc, #280]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2238      	movs	r2, #56	@ 0x38
 8006098:	4013      	ands	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800609c:	4b43      	ldr	r3, [pc, #268]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2203      	movs	r2, #3
 80060a2:	4013      	ands	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_RCC_GetSysClockFreq+0x34>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b18      	cmp	r3, #24
 80060b0:	d125      	bne.n	80060fe <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d122      	bne.n	80060fe <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060b8:	4b3c      	ldr	r3, [pc, #240]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2208      	movs	r2, #8
 80060be:	4013      	ands	r3, r2
 80060c0:	d107      	bne.n	80060d2 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80060c2:	4a3a      	ldr	r2, [pc, #232]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 80060c4:	2394      	movs	r3, #148	@ 0x94
 80060c6:	58d3      	ldr	r3, [r2, r3]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	220f      	movs	r2, #15
 80060cc:	4013      	ands	r3, r2
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d0:	e005      	b.n	80060de <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060d2:	4b36      	ldr	r3, [pc, #216]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	091b      	lsrs	r3, r3, #4
 80060d8:	220f      	movs	r2, #15
 80060da:	4013      	ands	r3, r2
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	2b0b      	cmp	r3, #11
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80060e8:	4b31      	ldr	r3, [pc, #196]	@ (80061b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80060ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ec:	0092      	lsls	r2, r2, #2
 80060ee:	58d3      	ldr	r3, [r2, r3]
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11b      	bne.n	8006130 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060fc:	e018      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b08      	cmp	r3, #8
 8006102:	d102      	bne.n	800610a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006104:	4b2b      	ldr	r3, [pc, #172]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x130>)
 8006106:	623b      	str	r3, [r7, #32]
 8006108:	e012      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b10      	cmp	r3, #16
 800610e:	d102      	bne.n	8006116 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006110:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <HAL_RCC_GetSysClockFreq+0x134>)
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	e00c      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b20      	cmp	r3, #32
 800611a:	d103      	bne.n	8006124 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800611c:	23fa      	movs	r3, #250	@ 0xfa
 800611e:	01db      	lsls	r3, r3, #7
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	e005      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b28      	cmp	r3, #40	@ 0x28
 8006128:	d102      	bne.n	8006130 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800612a:	2380      	movs	r3, #128	@ 0x80
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b18      	cmp	r3, #24
 8006134:	d135      	bne.n	80061a2 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006136:	4b1d      	ldr	r3, [pc, #116]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2203      	movs	r2, #3
 800613c:	4013      	ands	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006140:	4b1a      	ldr	r3, [pc, #104]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	2207      	movs	r2, #7
 8006148:	4013      	ands	r3, r2
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d003      	beq.n	800615c <HAL_RCC_GetSysClockFreq+0xd8>
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d003      	beq.n	8006162 <HAL_RCC_GetSysClockFreq+0xde>
 800615a:	e005      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 800615c:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x130>)
 800615e:	61fb      	str	r3, [r7, #28]
        break;
 8006160:	e005      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8006162:	4b15      	ldr	r3, [pc, #84]	@ (80061b8 <HAL_RCC_GetSysClockFreq+0x134>)
 8006164:	61fb      	str	r3, [r7, #28]
        break;
 8006166:	e002      	b.n	800616e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	61fb      	str	r3, [r7, #28]
        break;
 800616c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800616e:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	227f      	movs	r2, #127	@ 0x7f
 8006176:	4013      	ands	r3, r2
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	4353      	muls	r3, r2
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	0018      	movs	r0, r3
 8006180:	f7f9 ffde 	bl	8000140 <__udivsi3>
 8006184:	0003      	movs	r3, r0
 8006186:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006188:	4b08      	ldr	r3, [pc, #32]	@ (80061ac <HAL_RCC_GetSysClockFreq+0x128>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	0f5b      	lsrs	r3, r3, #29
 800618e:	2207      	movs	r2, #7
 8006190:	4013      	ands	r3, r2
 8006192:	3301      	adds	r3, #1
 8006194:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	68b8      	ldr	r0, [r7, #8]
 800619a:	f7f9 ffd1 	bl	8000140 <__udivsi3>
 800619e:	0003      	movs	r3, r0
 80061a0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80061a2:	6a3b      	ldr	r3, [r7, #32]
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b00a      	add	sp, #40	@ 0x28
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40021000 	.word	0x40021000
 80061b0:	0800adfc 	.word	0x0800adfc
 80061b4:	00f42400 	.word	0x00f42400
 80061b8:	003d0900 	.word	0x003d0900

080061bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061c0:	4b02      	ldr	r3, [pc, #8]	@ (80061cc <HAL_RCC_GetHCLKFreq+0x10>)
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	0018      	movs	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	20000000 	.word	0x20000000

080061d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 80061d4:	f7ff fff2 	bl	80061bc <HAL_RCC_GetHCLKFreq>
 80061d8:	0001      	movs	r1, r0
 80061da:	4b07      	ldr	r3, [pc, #28]	@ (80061f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	0b1b      	lsrs	r3, r3, #12
 80061e0:	2207      	movs	r2, #7
 80061e2:	4013      	ands	r3, r2
 80061e4:	4a05      	ldr	r2, [pc, #20]	@ (80061fc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80061e6:	5cd3      	ldrb	r3, [r2, r3]
 80061e8:	001a      	movs	r2, r3
 80061ea:	231f      	movs	r3, #31
 80061ec:	4013      	ands	r3, r2
 80061ee:	40d9      	lsrs	r1, r3
 80061f0:	000b      	movs	r3, r1
}
 80061f2:	0018      	movs	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	0800adf4 	.word	0x0800adf4

08006200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800620c:	4b2f      	ldr	r3, [pc, #188]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800620e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006210:	2380      	movs	r3, #128	@ 0x80
 8006212:	055b      	lsls	r3, r3, #21
 8006214:	4013      	ands	r3, r2
 8006216:	d004      	beq.n	8006222 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006218:	f7ff f9f6 	bl	8005608 <HAL_PWREx_GetVoltageRange>
 800621c:	0003      	movs	r3, r0
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e017      	b.n	8006252 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006222:	4b2a      	ldr	r3, [pc, #168]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006224:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006226:	4b29      	ldr	r3, [pc, #164]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006228:	2180      	movs	r1, #128	@ 0x80
 800622a:	0549      	lsls	r1, r1, #21
 800622c:	430a      	orrs	r2, r1
 800622e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006230:	4b26      	ldr	r3, [pc, #152]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006232:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006234:	2380      	movs	r3, #128	@ 0x80
 8006236:	055b      	lsls	r3, r3, #21
 8006238:	4013      	ands	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800623e:	f7ff f9e3 	bl	8005608 <HAL_PWREx_GetVoltageRange>
 8006242:	0003      	movs	r3, r0
 8006244:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006246:	4b21      	ldr	r3, [pc, #132]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8006248:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800624a:	4b20      	ldr	r3, [pc, #128]	@ (80062cc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800624c:	4920      	ldr	r1, [pc, #128]	@ (80062d0 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800624e:	400a      	ands	r2, r1
 8006250:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	429a      	cmp	r2, r3
 800625a:	d111      	bne.n	8006280 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b80      	cmp	r3, #128	@ 0x80
 8006260:	d91c      	bls.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2bb0      	cmp	r3, #176	@ 0xb0
 8006266:	d902      	bls.n	800626e <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006268:	2302      	movs	r3, #2
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	e016      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b90      	cmp	r3, #144	@ 0x90
 8006272:	d902      	bls.n	800627a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006274:	2301      	movs	r3, #1
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	e010      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	e00d      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b7f      	cmp	r3, #127	@ 0x7f
 8006284:	d902      	bls.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8006286:	2302      	movs	r3, #2
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e007      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b70      	cmp	r3, #112	@ 0x70
 8006290:	d102      	bne.n	8006298 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006292:	2301      	movs	r3, #1
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	e001      	b.n	800629c <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800629c:	4b0d      	ldr	r3, [pc, #52]	@ (80062d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2207      	movs	r2, #7
 80062a2:	4393      	bics	r3, r2
 80062a4:	0019      	movs	r1, r3
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80062ae:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2207      	movs	r2, #7
 80062b4:	4013      	ands	r3, r2
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	0018      	movs	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b006      	add	sp, #24
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			@ (mov r8, r8)
 80062cc:	40021000 	.word	0x40021000
 80062d0:	efffffff 	.word	0xefffffff
 80062d4:	40022000 	.word	0x40022000

080062d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062e0:	2313      	movs	r3, #19
 80062e2:	18fb      	adds	r3, r7, r3
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062e8:	2312      	movs	r3, #18
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	2380      	movs	r3, #128	@ 0x80
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	4013      	ands	r3, r2
 80062fa:	d100      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80062fc:	e0b7      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062fe:	2011      	movs	r0, #17
 8006300:	183b      	adds	r3, r7, r0
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006306:	4b4c      	ldr	r3, [pc, #304]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006308:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800630a:	2380      	movs	r3, #128	@ 0x80
 800630c:	055b      	lsls	r3, r3, #21
 800630e:	4013      	ands	r3, r2
 8006310:	d110      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006312:	4b49      	ldr	r3, [pc, #292]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006314:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006316:	4b48      	ldr	r3, [pc, #288]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006318:	2180      	movs	r1, #128	@ 0x80
 800631a:	0549      	lsls	r1, r1, #21
 800631c:	430a      	orrs	r2, r1
 800631e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006320:	4b45      	ldr	r3, [pc, #276]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006324:	2380      	movs	r3, #128	@ 0x80
 8006326:	055b      	lsls	r3, r3, #21
 8006328:	4013      	ands	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800632e:	183b      	adds	r3, r7, r0
 8006330:	2201      	movs	r2, #1
 8006332:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006334:	4b41      	ldr	r3, [pc, #260]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b40      	ldr	r3, [pc, #256]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800633a:	2180      	movs	r1, #128	@ 0x80
 800633c:	0049      	lsls	r1, r1, #1
 800633e:	430a      	orrs	r2, r1
 8006340:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006342:	f7fd f9b5 	bl	80036b0 <HAL_GetTick>
 8006346:	0003      	movs	r3, r0
 8006348:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800634a:	e00b      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800634c:	f7fd f9b0 	bl	80036b0 <HAL_GetTick>
 8006350:	0002      	movs	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d904      	bls.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800635a:	2313      	movs	r3, #19
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	2203      	movs	r2, #3
 8006360:	701a      	strb	r2, [r3, #0]
        break;
 8006362:	e005      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006364:	4b35      	ldr	r3, [pc, #212]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	2380      	movs	r3, #128	@ 0x80
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	4013      	ands	r3, r2
 800636e:	d0ed      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006370:	2313      	movs	r3, #19
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d168      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800637a:	4a2f      	ldr	r2, [pc, #188]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800637c:	2390      	movs	r3, #144	@ 0x90
 800637e:	58d2      	ldr	r2, [r2, r3]
 8006380:	23c0      	movs	r3, #192	@ 0xc0
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4013      	ands	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01f      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	429a      	cmp	r2, r3
 8006396:	d01a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006398:	4a27      	ldr	r2, [pc, #156]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639a:	2390      	movs	r3, #144	@ 0x90
 800639c:	58d3      	ldr	r3, [r2, r3]
 800639e:	4a28      	ldr	r2, [pc, #160]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063a4:	4a24      	ldr	r2, [pc, #144]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063a6:	2390      	movs	r3, #144	@ 0x90
 80063a8:	58d3      	ldr	r3, [r2, r3]
 80063aa:	4923      	ldr	r1, [pc, #140]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ac:	2280      	movs	r2, #128	@ 0x80
 80063ae:	0252      	lsls	r2, r2, #9
 80063b0:	4313      	orrs	r3, r2
 80063b2:	2290      	movs	r2, #144	@ 0x90
 80063b4:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063b6:	4a20      	ldr	r2, [pc, #128]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063b8:	2390      	movs	r3, #144	@ 0x90
 80063ba:	58d3      	ldr	r3, [r2, r3]
 80063bc:	491e      	ldr	r1, [pc, #120]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063be:	4a21      	ldr	r2, [pc, #132]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	2290      	movs	r2, #144	@ 0x90
 80063c4:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063c6:	491c      	ldr	r1, [pc, #112]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063c8:	2290      	movs	r2, #144	@ 0x90
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2201      	movs	r2, #1
 80063d2:	4013      	ands	r3, r2
 80063d4:	d017      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d6:	f7fd f96b 	bl	80036b0 <HAL_GetTick>
 80063da:	0003      	movs	r3, r0
 80063dc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063de:	e00c      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e0:	f7fd f966 	bl	80036b0 <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	4a17      	ldr	r2, [pc, #92]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d904      	bls.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80063f0:	2313      	movs	r3, #19
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	2203      	movs	r2, #3
 80063f6:	701a      	strb	r2, [r3, #0]
            break;
 80063f8:	e005      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063fc:	2390      	movs	r3, #144	@ 0x90
 80063fe:	58d3      	ldr	r3, [r2, r3]
 8006400:	2202      	movs	r2, #2
 8006402:	4013      	ands	r3, r2
 8006404:	d0ec      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8006406:	2313      	movs	r3, #19
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006410:	4a09      	ldr	r2, [pc, #36]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006412:	2390      	movs	r3, #144	@ 0x90
 8006414:	58d3      	ldr	r3, [r2, r3]
 8006416:	4a0a      	ldr	r2, [pc, #40]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006418:	401a      	ands	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	4906      	ldr	r1, [pc, #24]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006420:	4313      	orrs	r3, r2
 8006422:	2290      	movs	r2, #144	@ 0x90
 8006424:	508b      	str	r3, [r1, r2]
 8006426:	e017      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006428:	2312      	movs	r3, #18
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	2213      	movs	r2, #19
 800642e:	18ba      	adds	r2, r7, r2
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e010      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006436:	46c0      	nop			@ (mov r8, r8)
 8006438:	40021000 	.word	0x40021000
 800643c:	40007000 	.word	0x40007000
 8006440:	fffffcff 	.word	0xfffffcff
 8006444:	fffeffff 	.word	0xfffeffff
 8006448:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644c:	2312      	movs	r3, #18
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	2213      	movs	r2, #19
 8006452:	18ba      	adds	r2, r7, r2
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006458:	2311      	movs	r3, #17
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4ba4      	ldr	r3, [pc, #656]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006464:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006466:	4ba3      	ldr	r3, [pc, #652]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006468:	49a3      	ldr	r1, [pc, #652]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800646a:	400a      	ands	r2, r1
 800646c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2201      	movs	r2, #1
 8006474:	4013      	ands	r3, r2
 8006476:	d00b      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006478:	4a9e      	ldr	r2, [pc, #632]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800647a:	2388      	movs	r3, #136	@ 0x88
 800647c:	58d3      	ldr	r3, [r2, r3]
 800647e:	2203      	movs	r2, #3
 8006480:	4393      	bics	r3, r2
 8006482:	001a      	movs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	499a      	ldr	r1, [pc, #616]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800648a:	4313      	orrs	r3, r2
 800648c:	2288      	movs	r2, #136	@ 0x88
 800648e:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2202      	movs	r2, #2
 8006496:	4013      	ands	r3, r2
 8006498:	d00b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800649a:	4a96      	ldr	r2, [pc, #600]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800649c:	2388      	movs	r3, #136	@ 0x88
 800649e:	58d3      	ldr	r3, [r2, r3]
 80064a0:	220c      	movs	r2, #12
 80064a2:	4393      	bics	r3, r2
 80064a4:	001a      	movs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4992      	ldr	r1, [pc, #584]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	2288      	movs	r2, #136	@ 0x88
 80064b0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2210      	movs	r2, #16
 80064b8:	4013      	ands	r3, r2
 80064ba:	d00a      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064bc:	4a8d      	ldr	r2, [pc, #564]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80064be:	2388      	movs	r3, #136	@ 0x88
 80064c0:	58d3      	ldr	r3, [r2, r3]
 80064c2:	4a8e      	ldr	r2, [pc, #568]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80064c4:	401a      	ands	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	498a      	ldr	r1, [pc, #552]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	2288      	movs	r2, #136	@ 0x88
 80064d0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2208      	movs	r2, #8
 80064d8:	4013      	ands	r3, r2
 80064da:	d00a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80064dc:	4a85      	ldr	r2, [pc, #532]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80064de:	2388      	movs	r3, #136	@ 0x88
 80064e0:	58d3      	ldr	r3, [r2, r3]
 80064e2:	4a87      	ldr	r2, [pc, #540]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80064e4:	401a      	ands	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	4982      	ldr	r1, [pc, #520]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	2288      	movs	r2, #136	@ 0x88
 80064f0:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2204      	movs	r2, #4
 80064f8:	4013      	ands	r3, r2
 80064fa:	d00b      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 80064fc:	4a7d      	ldr	r2, [pc, #500]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80064fe:	2388      	movs	r3, #136	@ 0x88
 8006500:	58d3      	ldr	r3, [r2, r3]
 8006502:	22c0      	movs	r2, #192	@ 0xc0
 8006504:	4393      	bics	r3, r2
 8006506:	001a      	movs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4979      	ldr	r1, [pc, #484]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	2288      	movs	r2, #136	@ 0x88
 8006512:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2220      	movs	r2, #32
 800651a:	4013      	ands	r3, r2
 800651c:	d00a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800651e:	4a75      	ldr	r2, [pc, #468]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006520:	2388      	movs	r3, #136	@ 0x88
 8006522:	58d3      	ldr	r3, [r2, r3]
 8006524:	4a77      	ldr	r2, [pc, #476]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006526:	401a      	ands	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	4971      	ldr	r1, [pc, #452]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	2288      	movs	r2, #136	@ 0x88
 8006532:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2240      	movs	r2, #64	@ 0x40
 800653a:	4013      	ands	r3, r2
 800653c:	d00a      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800653e:	4a6d      	ldr	r2, [pc, #436]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006540:	2388      	movs	r3, #136	@ 0x88
 8006542:	58d3      	ldr	r3, [r2, r3]
 8006544:	4a70      	ldr	r2, [pc, #448]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8006546:	401a      	ands	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	4969      	ldr	r1, [pc, #420]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800654e:	4313      	orrs	r3, r2
 8006550:	2288      	movs	r2, #136	@ 0x88
 8006552:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2280      	movs	r2, #128	@ 0x80
 800655a:	4013      	ands	r3, r2
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800655e:	4a65      	ldr	r2, [pc, #404]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006560:	2388      	movs	r3, #136	@ 0x88
 8006562:	58d3      	ldr	r3, [r2, r3]
 8006564:	4a69      	ldr	r2, [pc, #420]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8006566:	401a      	ands	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	4961      	ldr	r1, [pc, #388]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800656e:	4313      	orrs	r3, r2
 8006570:	2288      	movs	r2, #136	@ 0x88
 8006572:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	4013      	ands	r3, r2
 800657e:	d00a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006580:	4a5c      	ldr	r2, [pc, #368]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006582:	2388      	movs	r3, #136	@ 0x88
 8006584:	58d3      	ldr	r3, [r2, r3]
 8006586:	4a62      	ldr	r2, [pc, #392]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006588:	401a      	ands	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	4959      	ldr	r1, [pc, #356]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006590:	4313      	orrs	r3, r2
 8006592:	2288      	movs	r2, #136	@ 0x88
 8006594:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	2380      	movs	r3, #128	@ 0x80
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4013      	ands	r3, r2
 80065a0:	d00a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80065a2:	4a54      	ldr	r2, [pc, #336]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80065a4:	2388      	movs	r3, #136	@ 0x88
 80065a6:	58d3      	ldr	r3, [r2, r3]
 80065a8:	4a5a      	ldr	r2, [pc, #360]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80065aa:	401a      	ands	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	4950      	ldr	r1, [pc, #320]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	2288      	movs	r2, #136	@ 0x88
 80065b6:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	2380      	movs	r3, #128	@ 0x80
 80065be:	01db      	lsls	r3, r3, #7
 80065c0:	4013      	ands	r3, r2
 80065c2:	d017      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065c8:	2380      	movs	r3, #128	@ 0x80
 80065ca:	055b      	lsls	r3, r3, #21
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d106      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80065d0:	4b48      	ldr	r3, [pc, #288]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	4b47      	ldr	r3, [pc, #284]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80065d6:	2180      	movs	r1, #128	@ 0x80
 80065d8:	0249      	lsls	r1, r1, #9
 80065da:	430a      	orrs	r2, r1
 80065dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065de:	4a45      	ldr	r2, [pc, #276]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80065e0:	2388      	movs	r3, #136	@ 0x88
 80065e2:	58d3      	ldr	r3, [r2, r3]
 80065e4:	4a4c      	ldr	r2, [pc, #304]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80065e6:	401a      	ands	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ec:	4941      	ldr	r1, [pc, #260]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	2288      	movs	r2, #136	@ 0x88
 80065f2:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	2380      	movs	r3, #128	@ 0x80
 80065fa:	015b      	lsls	r3, r3, #5
 80065fc:	4013      	ands	r3, r2
 80065fe:	d017      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006604:	2380      	movs	r3, #128	@ 0x80
 8006606:	051b      	lsls	r3, r3, #20
 8006608:	429a      	cmp	r2, r3
 800660a:	d106      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800660c:	4b39      	ldr	r3, [pc, #228]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	4b38      	ldr	r3, [pc, #224]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006612:	2180      	movs	r1, #128	@ 0x80
 8006614:	0449      	lsls	r1, r1, #17
 8006616:	430a      	orrs	r2, r1
 8006618:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800661a:	4a36      	ldr	r2, [pc, #216]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800661c:	2388      	movs	r3, #136	@ 0x88
 800661e:	58d3      	ldr	r3, [r2, r3]
 8006620:	4a3e      	ldr	r2, [pc, #248]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006622:	401a      	ands	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006628:	4932      	ldr	r1, [pc, #200]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800662a:	4313      	orrs	r3, r2
 800662c:	2288      	movs	r2, #136	@ 0x88
 800662e:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	019b      	lsls	r3, r3, #6
 8006638:	4013      	ands	r3, r2
 800663a:	d017      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	051b      	lsls	r3, r3, #20
 8006644:	429a      	cmp	r2, r3
 8006646:	d106      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8006648:	4b2a      	ldr	r3, [pc, #168]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	4b29      	ldr	r3, [pc, #164]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800664e:	2180      	movs	r1, #128	@ 0x80
 8006650:	0449      	lsls	r1, r1, #17
 8006652:	430a      	orrs	r2, r1
 8006654:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006656:	4a27      	ldr	r2, [pc, #156]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006658:	2388      	movs	r3, #136	@ 0x88
 800665a:	58d3      	ldr	r3, [r2, r3]
 800665c:	4a2f      	ldr	r2, [pc, #188]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800665e:	401a      	ands	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	4923      	ldr	r1, [pc, #140]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006666:	4313      	orrs	r3, r2
 8006668:	2288      	movs	r2, #136	@ 0x88
 800666a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	4013      	ands	r3, r2
 8006676:	d017      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	045b      	lsls	r3, r3, #17
 8006680:	429a      	cmp	r2, r3
 8006682:	d106      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8006684:	4b1b      	ldr	r3, [pc, #108]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	4b1a      	ldr	r3, [pc, #104]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800668a:	2180      	movs	r1, #128	@ 0x80
 800668c:	0449      	lsls	r1, r1, #17
 800668e:	430a      	orrs	r2, r1
 8006690:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006692:	4a18      	ldr	r2, [pc, #96]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006694:	2388      	movs	r3, #136	@ 0x88
 8006696:	58d3      	ldr	r3, [r2, r3]
 8006698:	4a21      	ldr	r2, [pc, #132]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800669a:	401a      	ands	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	4914      	ldr	r1, [pc, #80]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	2288      	movs	r2, #136	@ 0x88
 80066a6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	2380      	movs	r3, #128	@ 0x80
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	4013      	ands	r3, r2
 80066b2:	d017      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066b8:	2380      	movs	r3, #128	@ 0x80
 80066ba:	049b      	lsls	r3, r3, #18
 80066bc:	429a      	cmp	r2, r3
 80066be:	d106      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80066c0:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80066c6:	2180      	movs	r1, #128	@ 0x80
 80066c8:	0449      	lsls	r1, r1, #17
 80066ca:	430a      	orrs	r2, r1
 80066cc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80066ce:	4a09      	ldr	r2, [pc, #36]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80066d0:	2388      	movs	r3, #136	@ 0x88
 80066d2:	58d3      	ldr	r3, [r2, r3]
 80066d4:	4a12      	ldr	r2, [pc, #72]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80066d6:	401a      	ands	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066dc:	4905      	ldr	r1, [pc, #20]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	2288      	movs	r2, #136	@ 0x88
 80066e2:	508b      	str	r3, [r1, r2]

  }

  return status;
 80066e4:	2312      	movs	r3, #18
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	781b      	ldrb	r3, [r3, #0]
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b006      	add	sp, #24
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	40021000 	.word	0x40021000
 80066f8:	efffffff 	.word	0xefffffff
 80066fc:	fffff3ff 	.word	0xfffff3ff
 8006700:	fffffcff 	.word	0xfffffcff
 8006704:	ffffcfff 	.word	0xffffcfff
 8006708:	fffcffff 	.word	0xfffcffff
 800670c:	fff3ffff 	.word	0xfff3ffff
 8006710:	ffcfffff 	.word	0xffcfffff
 8006714:	ff3fffff 	.word	0xff3fffff
 8006718:	cfffffff 	.word	0xcfffffff
 800671c:	f3ffffff 	.word	0xf3ffffff
 8006720:	feffffff 	.word	0xfeffffff

08006724 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b089      	sub	sp, #36	@ 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	429a      	cmp	r2, r3
 8006738:	d154      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800673a:	4ad5      	ldr	r2, [pc, #852]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800673c:	2390      	movs	r3, #144	@ 0x90
 800673e:	58d2      	ldr	r2, [r2, r3]
 8006740:	23c0      	movs	r3, #192	@ 0xc0
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4013      	ands	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	23c0      	movs	r3, #192	@ 0xc0
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	429a      	cmp	r2, r3
 8006750:	d039      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	23c0      	movs	r3, #192	@ 0xc0
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	429a      	cmp	r2, r3
 800675a:	d901      	bls.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800675c:	f000 fd1a 	bl	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	2380      	movs	r3, #128	@ 0x80
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	429a      	cmp	r2, r3
 8006768:	d006      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	429a      	cmp	r2, r3
 8006772:	d00f      	beq.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8006774:	f000 fd0e 	bl	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006778:	4ac5      	ldr	r2, [pc, #788]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800677a:	2390      	movs	r3, #144	@ 0x90
 800677c:	58d3      	ldr	r3, [r2, r3]
 800677e:	2202      	movs	r2, #2
 8006780:	4013      	ands	r3, r2
 8006782:	2b02      	cmp	r3, #2
 8006784:	d001      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8006786:	f000 fd07 	bl	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 800678a:	2380      	movs	r3, #128	@ 0x80
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	61fb      	str	r3, [r7, #28]
        break;
 8006790:	f000 fd02 	bl	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006794:	4abe      	ldr	r2, [pc, #760]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006796:	2394      	movs	r3, #148	@ 0x94
 8006798:	58d3      	ldr	r3, [r2, r3]
 800679a:	2202      	movs	r2, #2
 800679c:	4013      	ands	r3, r2
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d001      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 80067a2:	f000 fcfb 	bl	800719c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80067a6:	4aba      	ldr	r2, [pc, #744]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80067a8:	2394      	movs	r3, #148	@ 0x94
 80067aa:	58d3      	ldr	r3, [r2, r3]
 80067ac:	2204      	movs	r2, #4
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d103      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 80067b4:	23fa      	movs	r3, #250	@ 0xfa
 80067b6:	61fb      	str	r3, [r7, #28]
        break;
 80067b8:	f000 fcf0 	bl	800719c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 80067bc:	23fa      	movs	r3, #250	@ 0xfa
 80067be:	01db      	lsls	r3, r3, #7
 80067c0:	61fb      	str	r3, [r7, #28]
        break;
 80067c2:	f000 fceb 	bl	800719c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067c6:	4bb2      	ldr	r3, [pc, #712]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	2380      	movs	r3, #128	@ 0x80
 80067cc:	029b      	lsls	r3, r3, #10
 80067ce:	401a      	ands	r2, r3
 80067d0:	2380      	movs	r3, #128	@ 0x80
 80067d2:	029b      	lsls	r3, r3, #10
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d001      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80067d8:	f000 fce2 	bl	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 80067dc:	4bad      	ldr	r3, [pc, #692]	@ (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80067de:	61fb      	str	r3, [r7, #28]
        break;
 80067e0:	f000 fcde 	bl	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	2380      	movs	r3, #128	@ 0x80
 80067e8:	029b      	lsls	r3, r3, #10
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d100      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80067ee:	e11a      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	2380      	movs	r3, #128	@ 0x80
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d901      	bls.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80067fa:	f000 fcd3 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	2380      	movs	r3, #128	@ 0x80
 8006802:	025b      	lsls	r3, r3, #9
 8006804:	429a      	cmp	r2, r3
 8006806:	d100      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006808:	e10d      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	2380      	movs	r3, #128	@ 0x80
 800680e:	025b      	lsls	r3, r3, #9
 8006810:	429a      	cmp	r2, r3
 8006812:	d901      	bls.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006814:	f000 fcc6 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	2380      	movs	r3, #128	@ 0x80
 800681c:	01db      	lsls	r3, r3, #7
 800681e:	429a      	cmp	r2, r3
 8006820:	d100      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006822:	e1eb      	b.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	2380      	movs	r3, #128	@ 0x80
 8006828:	01db      	lsls	r3, r3, #7
 800682a:	429a      	cmp	r2, r3
 800682c:	d901      	bls.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800682e:	f000 fcb9 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	019b      	lsls	r3, r3, #6
 8006838:	429a      	cmp	r2, r3
 800683a:	d101      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800683c:	f000 fc50 	bl	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	2380      	movs	r3, #128	@ 0x80
 8006844:	019b      	lsls	r3, r3, #6
 8006846:	429a      	cmp	r2, r3
 8006848:	d901      	bls.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800684a:	f000 fcab 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	2380      	movs	r3, #128	@ 0x80
 8006852:	015b      	lsls	r3, r3, #5
 8006854:	429a      	cmp	r2, r3
 8006856:	d101      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006858:	f000 fbe2 	bl	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	2380      	movs	r3, #128	@ 0x80
 8006860:	015b      	lsls	r3, r3, #5
 8006862:	429a      	cmp	r2, r3
 8006864:	d901      	bls.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006866:	f000 fc9d 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	429a      	cmp	r2, r3
 8006872:	d101      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006874:	f000 fba9 	bl	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	2380      	movs	r3, #128	@ 0x80
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	429a      	cmp	r2, r3
 8006880:	d901      	bls.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006882:	f000 fc8f 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	429a      	cmp	r2, r3
 800688e:	d101      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006890:	f000 fb70 	bl	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	2380      	movs	r3, #128	@ 0x80
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	429a      	cmp	r2, r3
 800689c:	d901      	bls.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800689e:	f000 fc81 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	2380      	movs	r3, #128	@ 0x80
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d100      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80068ac:	e305      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	2380      	movs	r3, #128	@ 0x80
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d901      	bls.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80068b8:	f000 fc74 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	2380      	movs	r3, #128	@ 0x80
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d100      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80068c6:	e29b      	b.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	2380      	movs	r3, #128	@ 0x80
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d901      	bls.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80068d2:	f000 fc67 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b80      	cmp	r3, #128	@ 0x80
 80068da:	d100      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80068dc:	e22f      	b.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b80      	cmp	r3, #128	@ 0x80
 80068e2:	d901      	bls.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80068e4:	f000 fc5e 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d80f      	bhi.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 80068f4:	f000 fc56 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d901      	bls.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 80068fe:	f000 fc51 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	009a      	lsls	r2, r3, #2
 8006906:	4b64      	ldr	r3, [pc, #400]	@ (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8006908:	18d3      	adds	r3, r2, r3
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	469f      	mov	pc, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b40      	cmp	r3, #64	@ 0x40
 8006912:	d100      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8006914:	e1df      	b.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8006916:	f000 fc45 	bl	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800691a:	4a5d      	ldr	r2, [pc, #372]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800691c:	2388      	movs	r3, #136	@ 0x88
 800691e:	58d3      	ldr	r3, [r2, r3]
 8006920:	2203      	movs	r2, #3
 8006922:	4013      	ands	r3, r2
 8006924:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d025      	beq.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d82d      	bhi.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d013      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d827      	bhi.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d005      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800694a:	e020      	b.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800694c:	f7ff fc40 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006950:	0003      	movs	r3, r0
 8006952:	61fb      	str	r3, [r7, #28]
            break;
 8006954:	e022      	b.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8006956:	f7ff fb95 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 800695a:	0003      	movs	r3, r0
 800695c:	61fb      	str	r3, [r7, #28]
            break;
 800695e:	e01d      	b.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006960:	4b4b      	ldr	r3, [pc, #300]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	2380      	movs	r3, #128	@ 0x80
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	401a      	ands	r2, r3
 800696a:	2380      	movs	r3, #128	@ 0x80
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	429a      	cmp	r2, r3
 8006970:	d110      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 8006972:	4b4a      	ldr	r3, [pc, #296]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8006974:	61fb      	str	r3, [r7, #28]
            break;
 8006976:	e00d      	b.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006978:	4a45      	ldr	r2, [pc, #276]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800697a:	2390      	movs	r3, #144	@ 0x90
 800697c:	58d3      	ldr	r3, [r2, r3]
 800697e:	2202      	movs	r2, #2
 8006980:	4013      	ands	r3, r2
 8006982:	2b02      	cmp	r3, #2
 8006984:	d109      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8006986:	2380      	movs	r3, #128	@ 0x80
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	61fb      	str	r3, [r7, #28]
            break;
 800698c:	e005      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 800698e:	46c0      	nop			@ (mov r8, r8)
 8006990:	f000 fc09 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006994:	46c0      	nop			@ (mov r8, r8)
 8006996:	f000 fc06 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800699a:	46c0      	nop			@ (mov r8, r8)
        break;
 800699c:	f000 fc03 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80069a0:	4a3b      	ldr	r2, [pc, #236]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80069a2:	2388      	movs	r3, #136	@ 0x88
 80069a4:	58d3      	ldr	r3, [r2, r3]
 80069a6:	220c      	movs	r2, #12
 80069a8:	4013      	ands	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b0c      	cmp	r3, #12
 80069b0:	d025      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	d82d      	bhi.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d013      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d827      	bhi.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d005      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80069d0:	e020      	b.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 80069d2:	f7ff fbfd 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 80069d6:	0003      	movs	r3, r0
 80069d8:	61fb      	str	r3, [r7, #28]
            break;
 80069da:	e022      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 80069dc:	f7ff fb52 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 80069e0:	0003      	movs	r3, r0
 80069e2:	61fb      	str	r3, [r7, #28]
            break;
 80069e4:	e01d      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	2380      	movs	r3, #128	@ 0x80
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	401a      	ands	r2, r3
 80069f0:	2380      	movs	r3, #128	@ 0x80
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d110      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 80069f8:	4b28      	ldr	r3, [pc, #160]	@ (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80069fa:	61fb      	str	r3, [r7, #28]
            break;
 80069fc:	e00d      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069fe:	4a24      	ldr	r2, [pc, #144]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006a00:	2390      	movs	r3, #144	@ 0x90
 8006a02:	58d3      	ldr	r3, [r2, r3]
 8006a04:	2202      	movs	r2, #2
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d109      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8006a0c:	2380      	movs	r3, #128	@ 0x80
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	61fb      	str	r3, [r7, #28]
            break;
 8006a12:	e005      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8006a14:	46c0      	nop			@ (mov r8, r8)
 8006a16:	f000 fbc6 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	f000 fbc3 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006a20:	46c0      	nop			@ (mov r8, r8)
        break;
 8006a22:	f000 fbc0 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006a26:	f7ff fbd3 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	61fb      	str	r3, [r7, #28]
        break;
 8006a2e:	f000 fbba 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006a32:	4a17      	ldr	r2, [pc, #92]	@ (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8006a34:	2388      	movs	r3, #136	@ 0x88
 8006a36:	58d2      	ldr	r2, [r2, r3]
 8006a38:	23c0      	movs	r3, #192	@ 0xc0
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	23c0      	movs	r3, #192	@ 0xc0
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d036      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	23c0      	movs	r3, #192	@ 0xc0
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d83c      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	2380      	movs	r3, #128	@ 0x80
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d020      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	2380      	movs	r3, #128	@ 0x80
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d832      	bhi.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	2380      	movs	r3, #128	@ 0x80
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d005      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 8006a78:	e029      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006a7a:	f7ff fba9 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006a7e:	0003      	movs	r3, r0
 8006a80:	61fb      	str	r3, [r7, #28]
            break;
 8006a82:	e02b      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8006a84:	f7ff fafe 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	61fb      	str	r3, [r7, #28]
            break;
 8006a8c:	e026      	b.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	40021000 	.word	0x40021000
 8006a94:	0001e848 	.word	0x0001e848
 8006a98:	0800ae2c 	.word	0x0800ae2c
 8006a9c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006aa0:	4bbb      	ldr	r3, [pc, #748]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	2380      	movs	r3, #128	@ 0x80
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	401a      	ands	r2, r3
 8006aaa:	2380      	movs	r3, #128	@ 0x80
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d110      	bne.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 8006ab2:	4bb8      	ldr	r3, [pc, #736]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8006ab4:	61fb      	str	r3, [r7, #28]
            break;
 8006ab6:	e00d      	b.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ab8:	4ab5      	ldr	r2, [pc, #724]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006aba:	2390      	movs	r3, #144	@ 0x90
 8006abc:	58d3      	ldr	r3, [r2, r3]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d109      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8006ac6:	2380      	movs	r3, #128	@ 0x80
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	61fb      	str	r3, [r7, #28]
            break;
 8006acc:	e005      	b.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	f000 fb69 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006ad4:	46c0      	nop			@ (mov r8, r8)
 8006ad6:	f000 fb66 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006ada:	46c0      	nop			@ (mov r8, r8)
        break;
 8006adc:	f000 fb63 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8006ae0:	4aab      	ldr	r2, [pc, #684]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006ae2:	2388      	movs	r3, #136	@ 0x88
 8006ae4:	58d2      	ldr	r2, [r2, r3]
 8006ae6:	23c0      	movs	r3, #192	@ 0xc0
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4013      	ands	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	23c0      	movs	r3, #192	@ 0xc0
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d02d      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	23c0      	movs	r3, #192	@ 0xc0
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d833      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d017      	beq.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	2380      	movs	r3, #128	@ 0x80
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d829      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	2380      	movs	r3, #128	@ 0x80
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d005      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8006b26:	e020      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006b28:	f7ff fb52 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	61fb      	str	r3, [r7, #28]
            break;
 8006b30:	e022      	b.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8006b32:	f7ff faa7 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006b36:	0003      	movs	r3, r0
 8006b38:	61fb      	str	r3, [r7, #28]
            break;
 8006b3a:	e01d      	b.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b3c:	4b94      	ldr	r3, [pc, #592]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	2380      	movs	r3, #128	@ 0x80
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	401a      	ands	r2, r3
 8006b46:	2380      	movs	r3, #128	@ 0x80
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d110      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 8006b4e:	4b91      	ldr	r3, [pc, #580]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8006b50:	61fb      	str	r3, [r7, #28]
            break;
 8006b52:	e00d      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b54:	4a8e      	ldr	r2, [pc, #568]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006b56:	2390      	movs	r3, #144	@ 0x90
 8006b58:	58d3      	ldr	r3, [r2, r3]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d109      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8006b62:	2380      	movs	r3, #128	@ 0x80
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	61fb      	str	r3, [r7, #28]
            break;
 8006b68:	e005      	b.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 8006b6a:	46c0      	nop			@ (mov r8, r8)
 8006b6c:	f000 fb1b 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006b70:	46c0      	nop			@ (mov r8, r8)
 8006b72:	f000 fb18 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006b76:	46c0      	nop			@ (mov r8, r8)
        break;
 8006b78:	f000 fb15 	bl	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 8006b7c:	4a84      	ldr	r2, [pc, #528]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006b7e:	2388      	movs	r3, #136	@ 0x88
 8006b80:	58d3      	ldr	r3, [r2, r3]
 8006b82:	22c0      	movs	r2, #192	@ 0xc0
 8006b84:	4013      	ands	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b8c:	d025      	beq.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b92:	d82d      	bhi.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2b80      	cmp	r3, #128	@ 0x80
 8006b98:	d013      	beq.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b80      	cmp	r3, #128	@ 0x80
 8006b9e:	d827      	bhi.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	d005      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8006bac:	e020      	b.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006bae:	f7ff fb0f 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006bb2:	0003      	movs	r3, r0
 8006bb4:	61fb      	str	r3, [r7, #28]
            break;
 8006bb6:	e020      	b.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8006bb8:	f7ff fa64 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	61fb      	str	r3, [r7, #28]
            break;
 8006bc0:	e01b      	b.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bc2:	4b73      	ldr	r3, [pc, #460]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	2380      	movs	r3, #128	@ 0x80
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	401a      	ands	r2, r3
 8006bcc:	2380      	movs	r3, #128	@ 0x80
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8006bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8006bd6:	61fb      	str	r3, [r7, #28]
            break;
 8006bd8:	e00c      	b.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bda:	4a6d      	ldr	r2, [pc, #436]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006bdc:	2390      	movs	r3, #144	@ 0x90
 8006bde:	58d3      	ldr	r3, [r2, r3]
 8006be0:	2202      	movs	r2, #2
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d107      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8006be8:	2380      	movs	r3, #128	@ 0x80
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	61fb      	str	r3, [r7, #28]
            break;
 8006bee:	e003      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8006bf0:	46c0      	nop			@ (mov r8, r8)
 8006bf2:	e2d8      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006bf4:	46c0      	nop			@ (mov r8, r8)
 8006bf6:	e2d6      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006bf8:	46c0      	nop			@ (mov r8, r8)
        break;
 8006bfa:	e2d4      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006bfc:	4a64      	ldr	r2, [pc, #400]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006bfe:	2388      	movs	r3, #136	@ 0x88
 8006c00:	58d2      	ldr	r2, [r2, r3]
 8006c02:	23c0      	movs	r3, #192	@ 0xc0
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	4013      	ands	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	2380      	movs	r3, #128	@ 0x80
 8006c0e:	059b      	lsls	r3, r3, #22
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d012      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	2380      	movs	r3, #128	@ 0x80
 8006c18:	059b      	lsls	r3, r3, #22
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d825      	bhi.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	2380      	movs	r3, #128	@ 0x80
 8006c28:	055b      	lsls	r3, r3, #21
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d014      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 8006c2e:	e01c      	b.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8006c30:	f7ff fa28 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006c34:	0003      	movs	r3, r0
 8006c36:	61fb      	str	r3, [r7, #28]
            break;
 8006c38:	e018      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c3a:	4b55      	ldr	r3, [pc, #340]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	2380      	movs	r3, #128	@ 0x80
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	401a      	ands	r2, r3
 8006c44:	2380      	movs	r3, #128	@ 0x80
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d102      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 8006c4c:	4b51      	ldr	r3, [pc, #324]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8006c4e:	61fb      	str	r3, [r7, #28]
            break;
 8006c50:	e00c      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
            break;
 8006c56:	e009      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8006c58:	2408      	movs	r4, #8
 8006c5a:	193b      	adds	r3, r7, r4
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f000 faad 	bl	80071bc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8006c62:	193b      	adds	r3, r7, r4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	61fb      	str	r3, [r7, #28]
            break;
 8006c68:	e000      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 8006c6a:	46c0      	nop			@ (mov r8, r8)
        break;
 8006c6c:	e29b      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c6e:	4a48      	ldr	r2, [pc, #288]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006c70:	2388      	movs	r3, #136	@ 0x88
 8006c72:	58d2      	ldr	r2, [r2, r3]
 8006c74:	23c0      	movs	r3, #192	@ 0xc0
 8006c76:	019b      	lsls	r3, r3, #6
 8006c78:	4013      	ands	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	2380      	movs	r3, #128	@ 0x80
 8006c80:	019b      	lsls	r3, r3, #6
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d017      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	2380      	movs	r3, #128	@ 0x80
 8006c8a:	019b      	lsls	r3, r3, #6
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d81e      	bhi.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	2380      	movs	r3, #128	@ 0x80
 8006c9a:	015b      	lsls	r3, r3, #5
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d005      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 8006ca0:	e015      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006ca2:	f7ff fa95 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006ca6:	0003      	movs	r3, r0
 8006ca8:	61fb      	str	r3, [r7, #28]
            break;
 8006caa:	e013      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8006cac:	f7ff f9ea 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	61fb      	str	r3, [r7, #28]
            break;
 8006cb4:	e00e      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cb6:	4b36      	ldr	r3, [pc, #216]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	2380      	movs	r3, #128	@ 0x80
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	2380      	movs	r3, #128	@ 0x80
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d104      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8006cc8:	4b32      	ldr	r3, [pc, #200]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8006cca:	61fb      	str	r3, [r7, #28]
            break;
 8006ccc:	e001      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 8006cce:	46c0      	nop			@ (mov r8, r8)
 8006cd0:	e269      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006cd2:	46c0      	nop			@ (mov r8, r8)
        break;
 8006cd4:	e267      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006cd6:	4a2e      	ldr	r2, [pc, #184]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006cd8:	2388      	movs	r3, #136	@ 0x88
 8006cda:	58d2      	ldr	r2, [r2, r3]
 8006cdc:	23c0      	movs	r3, #192	@ 0xc0
 8006cde:	029b      	lsls	r3, r3, #10
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	2380      	movs	r3, #128	@ 0x80
 8006ce8:	029b      	lsls	r3, r3, #10
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d017      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	2380      	movs	r3, #128	@ 0x80
 8006cf2:	029b      	lsls	r3, r3, #10
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d81e      	bhi.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	2380      	movs	r3, #128	@ 0x80
 8006d02:	025b      	lsls	r3, r3, #9
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d005      	beq.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8006d08:	e015      	b.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006d0a:	f7ff fa61 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	61fb      	str	r3, [r7, #28]
            break;
 8006d12:	e013      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8006d14:	f7ff f9b6 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	61fb      	str	r3, [r7, #28]
            break;
 8006d1c:	e00e      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	2380      	movs	r3, #128	@ 0x80
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	401a      	ands	r2, r3
 8006d28:	2380      	movs	r3, #128	@ 0x80
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d104      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8006d30:	4b18      	ldr	r3, [pc, #96]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8006d32:	61fb      	str	r3, [r7, #28]
            break;
 8006d34:	e001      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	e235      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006d3a:	46c0      	nop			@ (mov r8, r8)
        break;
 8006d3c:	e233      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006d3e:	4a14      	ldr	r2, [pc, #80]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8006d40:	2388      	movs	r3, #136	@ 0x88
 8006d42:	58d2      	ldr	r2, [r2, r3]
 8006d44:	23c0      	movs	r3, #192	@ 0xc0
 8006d46:	031b      	lsls	r3, r3, #12
 8006d48:	4013      	ands	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	23c0      	movs	r3, #192	@ 0xc0
 8006d50:	031b      	lsls	r3, r3, #12
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d041      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	23c0      	movs	r3, #192	@ 0xc0
 8006d5a:	031b      	lsls	r3, r3, #12
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d847      	bhi.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	2380      	movs	r3, #128	@ 0x80
 8006d64:	031b      	lsls	r3, r3, #12
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d02b      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	2380      	movs	r3, #128	@ 0x80
 8006d6e:	031b      	lsls	r3, r3, #12
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d83d      	bhi.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	2380      	movs	r3, #128	@ 0x80
 8006d7e:	02db      	lsls	r3, r3, #11
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d009      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8006d84:	e034      	b.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006d86:	f7ff fa23 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	61fb      	str	r3, [r7, #28]
            break;
 8006d8e:	e036      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006d90:	40021000 	.word	0x40021000
 8006d94:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006d98:	4abd      	ldr	r2, [pc, #756]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006d9a:	2394      	movs	r3, #148	@ 0x94
 8006d9c:	58d3      	ldr	r3, [r2, r3]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d126      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006da6:	4aba      	ldr	r2, [pc, #744]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006da8:	2394      	movs	r3, #148	@ 0x94
 8006daa:	58d3      	ldr	r3, [r2, r3]
 8006dac:	2204      	movs	r2, #4
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d102      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8006db4:	23fa      	movs	r3, #250	@ 0xfa
 8006db6:	61fb      	str	r3, [r7, #28]
            break;
 8006db8:	e01c      	b.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8006dba:	23fa      	movs	r3, #250	@ 0xfa
 8006dbc:	01db      	lsls	r3, r3, #7
 8006dbe:	61fb      	str	r3, [r7, #28]
            break;
 8006dc0:	e018      	b.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dc2:	4bb3      	ldr	r3, [pc, #716]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	2380      	movs	r3, #128	@ 0x80
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	401a      	ands	r2, r3
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d111      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8006dd4:	4baf      	ldr	r3, [pc, #700]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8006dd6:	61fb      	str	r3, [r7, #28]
            break;
 8006dd8:	e00e      	b.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006dda:	4aad      	ldr	r2, [pc, #692]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006ddc:	2390      	movs	r3, #144	@ 0x90
 8006dde:	58d3      	ldr	r3, [r2, r3]
 8006de0:	2202      	movs	r2, #2
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d109      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	61fb      	str	r3, [r7, #28]
            break;
 8006dee:	e005      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8006df0:	46c0      	nop			@ (mov r8, r8)
 8006df2:	e1d8      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006df4:	46c0      	nop			@ (mov r8, r8)
 8006df6:	e1d6      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006df8:	46c0      	nop			@ (mov r8, r8)
 8006dfa:	e1d4      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006dfc:	46c0      	nop			@ (mov r8, r8)
        break;
 8006dfe:	e1d2      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e00:	4aa3      	ldr	r2, [pc, #652]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006e02:	2388      	movs	r3, #136	@ 0x88
 8006e04:	58d2      	ldr	r2, [r2, r3]
 8006e06:	23c0      	movs	r3, #192	@ 0xc0
 8006e08:	039b      	lsls	r3, r3, #14
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	23c0      	movs	r3, #192	@ 0xc0
 8006e12:	039b      	lsls	r3, r3, #14
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d03d      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	23c0      	movs	r3, #192	@ 0xc0
 8006e1c:	039b      	lsls	r3, r3, #14
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d843      	bhi.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	2380      	movs	r3, #128	@ 0x80
 8006e26:	039b      	lsls	r3, r3, #14
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d027      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	039b      	lsls	r3, r3, #14
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d839      	bhi.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	2380      	movs	r3, #128	@ 0x80
 8006e40:	035b      	lsls	r3, r3, #13
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d005      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8006e46:	e030      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006e48:	f7ff f9c2 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	61fb      	str	r3, [r7, #28]
            break;
 8006e50:	e032      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006e52:	4a8f      	ldr	r2, [pc, #572]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006e54:	2394      	movs	r3, #148	@ 0x94
 8006e56:	58d3      	ldr	r3, [r2, r3]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d126      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006e60:	4a8b      	ldr	r2, [pc, #556]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006e62:	2394      	movs	r3, #148	@ 0x94
 8006e64:	58d3      	ldr	r3, [r2, r3]
 8006e66:	2204      	movs	r2, #4
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d102      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 8006e6e:	23fa      	movs	r3, #250	@ 0xfa
 8006e70:	61fb      	str	r3, [r7, #28]
            break;
 8006e72:	e01c      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 8006e74:	23fa      	movs	r3, #250	@ 0xfa
 8006e76:	01db      	lsls	r3, r3, #7
 8006e78:	61fb      	str	r3, [r7, #28]
            break;
 8006e7a:	e018      	b.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e7c:	4b84      	ldr	r3, [pc, #528]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	2380      	movs	r3, #128	@ 0x80
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	401a      	ands	r2, r3
 8006e86:	2380      	movs	r3, #128	@ 0x80
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d111      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 8006e8e:	4b81      	ldr	r3, [pc, #516]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8006e90:	61fb      	str	r3, [r7, #28]
            break;
 8006e92:	e00e      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e94:	4a7e      	ldr	r2, [pc, #504]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006e96:	2390      	movs	r3, #144	@ 0x90
 8006e98:	58d3      	ldr	r3, [r2, r3]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d109      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 8006ea2:	2380      	movs	r3, #128	@ 0x80
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	61fb      	str	r3, [r7, #28]
            break;
 8006ea8:	e005      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8006eaa:	46c0      	nop			@ (mov r8, r8)
 8006eac:	e17b      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	e179      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006eb2:	46c0      	nop			@ (mov r8, r8)
 8006eb4:	e177      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006eb6:	46c0      	nop			@ (mov r8, r8)
        break;
 8006eb8:	e175      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006eba:	4a75      	ldr	r2, [pc, #468]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006ebc:	2388      	movs	r3, #136	@ 0x88
 8006ebe:	58d2      	ldr	r2, [r2, r3]
 8006ec0:	23c0      	movs	r3, #192	@ 0xc0
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	23c0      	movs	r3, #192	@ 0xc0
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d03d      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	23c0      	movs	r3, #192	@ 0xc0
 8006ed6:	041b      	lsls	r3, r3, #16
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d843      	bhi.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d027      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	2380      	movs	r3, #128	@ 0x80
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d839      	bhi.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	2380      	movs	r3, #128	@ 0x80
 8006efa:	03db      	lsls	r3, r3, #15
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d005      	beq.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8006f00:	e030      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006f02:	f7ff f965 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006f06:	0003      	movs	r3, r0
 8006f08:	61fb      	str	r3, [r7, #28]
            break;
 8006f0a:	e032      	b.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006f0c:	4a60      	ldr	r2, [pc, #384]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006f0e:	2394      	movs	r3, #148	@ 0x94
 8006f10:	58d3      	ldr	r3, [r2, r3]
 8006f12:	2202      	movs	r2, #2
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d126      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8006f1a:	4a5d      	ldr	r2, [pc, #372]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006f1c:	2394      	movs	r3, #148	@ 0x94
 8006f1e:	58d3      	ldr	r3, [r2, r3]
 8006f20:	2204      	movs	r2, #4
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d102      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8006f28:	23fa      	movs	r3, #250	@ 0xfa
 8006f2a:	61fb      	str	r3, [r7, #28]
            break;
 8006f2c:	e01c      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 8006f2e:	23fa      	movs	r3, #250	@ 0xfa
 8006f30:	01db      	lsls	r3, r3, #7
 8006f32:	61fb      	str	r3, [r7, #28]
            break;
 8006f34:	e018      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f36:	4b56      	ldr	r3, [pc, #344]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	2380      	movs	r3, #128	@ 0x80
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d111      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8006f48:	4b52      	ldr	r3, [pc, #328]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8006f4a:	61fb      	str	r3, [r7, #28]
            break;
 8006f4c:	e00e      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f4e:	4a50      	ldr	r2, [pc, #320]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006f50:	2390      	movs	r3, #144	@ 0x90
 8006f52:	58d3      	ldr	r3, [r2, r3]
 8006f54:	2202      	movs	r2, #2
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d109      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 8006f5c:	2380      	movs	r3, #128	@ 0x80
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	61fb      	str	r3, [r7, #28]
            break;
 8006f62:	e005      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8006f64:	46c0      	nop			@ (mov r8, r8)
 8006f66:	e11e      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006f68:	46c0      	nop			@ (mov r8, r8)
 8006f6a:	e11c      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006f6c:	46c0      	nop			@ (mov r8, r8)
 8006f6e:	e11a      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8006f70:	46c0      	nop			@ (mov r8, r8)
        break;
 8006f72:	e118      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8006f74:	4a46      	ldr	r2, [pc, #280]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006f76:	2388      	movs	r3, #136	@ 0x88
 8006f78:	58d2      	ldr	r2, [r2, r3]
 8006f7a:	2380      	movs	r3, #128	@ 0x80
 8006f7c:	045b      	lsls	r3, r3, #17
 8006f7e:	4013      	ands	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	2380      	movs	r3, #128	@ 0x80
 8006f8c:	045b      	lsls	r3, r3, #17
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d011      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 8006f92:	e019      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8006f94:	4b3e      	ldr	r3, [pc, #248]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	23e0      	movs	r3, #224	@ 0xe0
 8006f9a:	01db      	lsls	r3, r3, #7
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d104      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7ff f916 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	0003      	movs	r3, r0
 8006fa6:	61fb      	str	r3, [r7, #28]
            break;
 8006fa8:	e00e      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8006faa:	f7ff f911 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006fae:	0003      	movs	r3, r0
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
            break;
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8006fb6:	2408      	movs	r4, #8
 8006fb8:	193b      	adds	r3, r7, r4
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f000 f8fe 	bl	80071bc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8006fc0:	193b      	adds	r3, r7, r4
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	61fb      	str	r3, [r7, #28]
            break;
 8006fc6:	46c0      	nop			@ (mov r8, r8)
        break;
 8006fc8:	e0ed      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8006fca:	4a31      	ldr	r2, [pc, #196]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006fcc:	2388      	movs	r3, #136	@ 0x88
 8006fce:	58d2      	ldr	r2, [r2, r3]
 8006fd0:	2380      	movs	r3, #128	@ 0x80
 8006fd2:	049b      	lsls	r3, r3, #18
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	049b      	lsls	r3, r3, #18
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d011      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8006fe8:	e019      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8006fea:	4b29      	ldr	r3, [pc, #164]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	23e0      	movs	r3, #224	@ 0xe0
 8006ff0:	01db      	lsls	r3, r3, #7
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	d104      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8006ff6:	f7ff f8eb 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	61fb      	str	r3, [r7, #28]
            break;
 8006ffe:	e00e      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8007000:	f7ff f8e6 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8007004:	0003      	movs	r3, r0
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	61fb      	str	r3, [r7, #28]
            break;
 800700a:	e008      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800700c:	2408      	movs	r4, #8
 800700e:	193b      	adds	r3, r7, r4
 8007010:	0018      	movs	r0, r3
 8007012:	f000 f8d3 	bl	80071bc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8007016:	193b      	adds	r3, r7, r4
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	61fb      	str	r3, [r7, #28]
            break;
 800701c:	46c0      	nop			@ (mov r8, r8)
        break;
 800701e:	e0c2      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007020:	4a1b      	ldr	r2, [pc, #108]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007022:	2388      	movs	r3, #136	@ 0x88
 8007024:	58d2      	ldr	r2, [r2, r3]
 8007026:	23c0      	movs	r3, #192	@ 0xc0
 8007028:	051b      	lsls	r3, r3, #20
 800702a:	4013      	ands	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	23c0      	movs	r3, #192	@ 0xc0
 8007032:	051b      	lsls	r3, r3, #20
 8007034:	429a      	cmp	r2, r3
 8007036:	d017      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	23c0      	movs	r3, #192	@ 0xc0
 800703c:	051b      	lsls	r3, r3, #20
 800703e:	429a      	cmp	r2, r3
 8007040:	d84a      	bhi.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	2380      	movs	r3, #128	@ 0x80
 8007046:	051b      	lsls	r3, r3, #20
 8007048:	429a      	cmp	r2, r3
 800704a:	d039      	beq.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	2380      	movs	r3, #128	@ 0x80
 8007050:	051b      	lsls	r3, r3, #20
 8007052:	429a      	cmp	r2, r3
 8007054:	d840      	bhi.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d03a      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	2380      	movs	r3, #128	@ 0x80
 8007060:	04db      	lsls	r3, r3, #19
 8007062:	429a      	cmp	r2, r3
 8007064:	d003      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8007066:	e037      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8007068:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 800706a:	61fb      	str	r3, [r7, #28]
            break;
 800706c:	e037      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800706e:	4b08      	ldr	r3, [pc, #32]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2202      	movs	r2, #2
 8007074:	4013      	ands	r3, r2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d130      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800707a:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2208      	movs	r2, #8
 8007080:	4013      	ands	r3, r2
 8007082:	d00b      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007084:	4b02      	ldr	r3, [pc, #8]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	220f      	movs	r2, #15
 800708c:	4013      	ands	r3, r2
 800708e:	e00b      	b.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 8007090:	40021000 	.word	0x40021000
 8007094:	00f42400 	.word	0x00f42400
 8007098:	02dc6c00 	.word	0x02dc6c00
 800709c:	4a44      	ldr	r2, [pc, #272]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800709e:	2394      	movs	r3, #148	@ 0x94
 80070a0:	58d3      	ldr	r3, [r2, r3]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	220f      	movs	r2, #15
 80070a6:	4013      	ands	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b0b      	cmp	r3, #11
 80070ae:	d901      	bls.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80070b0:	230b      	movs	r3, #11
 80070b2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80070b4:	4b3f      	ldr	r3, [pc, #252]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	0092      	lsls	r2, r2, #2
 80070ba:	58d3      	ldr	r3, [r2, r3]
 80070bc:	61fb      	str	r3, [r7, #28]
            break;
 80070be:	e00d      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80070c0:	2408      	movs	r4, #8
 80070c2:	193b      	adds	r3, r7, r4
 80070c4:	0018      	movs	r0, r3
 80070c6:	f000 f879 	bl	80071bc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80070ca:	193b      	adds	r3, r7, r4
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	61fb      	str	r3, [r7, #28]
            break;
 80070d0:	e005      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
            break;
 80070d6:	e002      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 80070d8:	46c0      	nop			@ (mov r8, r8)
 80070da:	e064      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80070dc:	46c0      	nop			@ (mov r8, r8)
        break;
 80070de:	e062      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80070e0:	4a33      	ldr	r2, [pc, #204]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80070e2:	2388      	movs	r3, #136	@ 0x88
 80070e4:	58d2      	ldr	r2, [r2, r3]
 80070e6:	23c0      	movs	r3, #192	@ 0xc0
 80070e8:	051b      	lsls	r3, r3, #20
 80070ea:	4013      	ands	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	23c0      	movs	r3, #192	@ 0xc0
 80070f2:	051b      	lsls	r3, r3, #20
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d017      	beq.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	23c0      	movs	r3, #192	@ 0xc0
 80070fc:	051b      	lsls	r3, r3, #20
 80070fe:	429a      	cmp	r2, r3
 8007100:	d844      	bhi.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	2380      	movs	r3, #128	@ 0x80
 8007106:	051b      	lsls	r3, r3, #20
 8007108:	429a      	cmp	r2, r3
 800710a:	d033      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	2380      	movs	r3, #128	@ 0x80
 8007110:	051b      	lsls	r3, r3, #20
 8007112:	429a      	cmp	r2, r3
 8007114:	d83a      	bhi.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d034      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	2380      	movs	r3, #128	@ 0x80
 8007120:	04db      	lsls	r3, r3, #19
 8007122:	429a      	cmp	r2, r3
 8007124:	d003      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8007126:	e031      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8007128:	4b23      	ldr	r3, [pc, #140]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 800712a:	61fb      	str	r3, [r7, #28]
            break;
 800712c:	e031      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800712e:	4b20      	ldr	r3, [pc, #128]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2202      	movs	r2, #2
 8007134:	4013      	ands	r3, r2
 8007136:	2b02      	cmp	r3, #2
 8007138:	d12a      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 800713a:	4b1d      	ldr	r3, [pc, #116]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2208      	movs	r2, #8
 8007140:	4013      	ands	r3, r2
 8007142:	d005      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8007144:	4b1a      	ldr	r3, [pc, #104]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	091b      	lsrs	r3, r3, #4
 800714a:	220f      	movs	r2, #15
 800714c:	4013      	ands	r3, r2
 800714e:	e005      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8007150:	4a17      	ldr	r2, [pc, #92]	@ (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8007152:	2394      	movs	r3, #148	@ 0x94
 8007154:	58d3      	ldr	r3, [r2, r3]
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	220f      	movs	r2, #15
 800715a:	4013      	ands	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b0b      	cmp	r3, #11
 8007162:	d901      	bls.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8007164:	230b      	movs	r3, #11
 8007166:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8007168:	4b12      	ldr	r3, [pc, #72]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	0092      	lsls	r2, r2, #2
 800716e:	58d3      	ldr	r3, [r2, r3]
 8007170:	61fb      	str	r3, [r7, #28]
            break;
 8007172:	e00d      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8007174:	2408      	movs	r4, #8
 8007176:	193b      	adds	r3, r7, r4
 8007178:	0018      	movs	r0, r3
 800717a:	f000 f81f 	bl	80071bc <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800717e:	193b      	adds	r3, r7, r4
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	61fb      	str	r3, [r7, #28]
            break;
 8007184:	e005      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	61fb      	str	r3, [r7, #28]
            break;
 800718a:	e002      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 800718c:	46c0      	nop			@ (mov r8, r8)
 800718e:	e00a      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8007190:	46c0      	nop			@ (mov r8, r8)
        break;
 8007192:	e008      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8007194:	46c0      	nop			@ (mov r8, r8)
 8007196:	e006      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8007198:	46c0      	nop			@ (mov r8, r8)
 800719a:	e004      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800719c:	46c0      	nop			@ (mov r8, r8)
 800719e:	e002      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80071a0:	46c0      	nop			@ (mov r8, r8)
 80071a2:	e000      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 80071a4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 80071a6:	69fb      	ldr	r3, [r7, #28]
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b009      	add	sp, #36	@ 0x24
 80071ae:	bd90      	pop	{r4, r7, pc}
 80071b0:	40021000 	.word	0x40021000
 80071b4:	0800adfc 	.word	0x0800adfc
 80071b8:	02dc6c00 	.word	0x02dc6c00

080071bc <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071c4:	4b58      	ldr	r3, [pc, #352]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	227f      	movs	r2, #127	@ 0x7f
 80071cc:	4013      	ands	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80071d0:	4b55      	ldr	r3, [pc, #340]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2203      	movs	r2, #3
 80071d6:	4013      	ands	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 80071da:	4b53      	ldr	r3, [pc, #332]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	2207      	movs	r2, #7
 80071e2:	4013      	ands	r3, r2
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80071e8:	4b4f      	ldr	r3, [pc, #316]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2208      	movs	r2, #8
 80071ee:	4013      	ands	r3, r2
 80071f0:	d005      	beq.n	80071fe <HAL_RCCEx_GetPLLClockFreq+0x42>
 80071f2:	4b4d      	ldr	r3, [pc, #308]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	091b      	lsrs	r3, r3, #4
 80071f8:	220f      	movs	r2, #15
 80071fa:	4013      	ands	r3, r2
 80071fc:	e005      	b.n	800720a <HAL_RCCEx_GetPLLClockFreq+0x4e>
 80071fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007200:	2394      	movs	r3, #148	@ 0x94
 8007202:	58d3      	ldr	r3, [r2, r3]
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	220f      	movs	r2, #15
 8007208:	4013      	ands	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b0b      	cmp	r3, #11
 8007210:	d901      	bls.n	8007216 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8007212:	230b      	movs	r3, #11
 8007214:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d020      	beq.n	800725e <HAL_RCCEx_GetPLLClockFreq+0xa2>
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d827      	bhi.n	8007272 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d00c      	beq.n	8007242 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d121      	bne.n	8007272 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	483e      	ldr	r0, [pc, #248]	@ (800732c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8007232:	f7f8 ff85 	bl	8000140 <__udivsi3>
 8007236:	0003      	movs	r3, r0
 8007238:	001a      	movs	r2, r3
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	4353      	muls	r3, r2
 800723e:	61fb      	str	r3, [r7, #28]
      break;
 8007240:	e025      	b.n	800728e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8007242:	4b3b      	ldr	r3, [pc, #236]	@ (8007330 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	0092      	lsls	r2, r2, #2
 8007248:	58d3      	ldr	r3, [r2, r3]
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	0018      	movs	r0, r3
 800724e:	f7f8 ff77 	bl	8000140 <__udivsi3>
 8007252:	0003      	movs	r3, r0
 8007254:	001a      	movs	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	4353      	muls	r3, r2
 800725a:	61fb      	str	r3, [r7, #28]
      break;
 800725c:	e017      	b.n	800728e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	4834      	ldr	r0, [pc, #208]	@ (8007334 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8007262:	f7f8 ff6d 	bl	8000140 <__udivsi3>
 8007266:	0003      	movs	r3, r0
 8007268:	001a      	movs	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4353      	muls	r3, r2
 800726e:	61fb      	str	r3, [r7, #28]
      break;
 8007270:	e00d      	b.n	800728e <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8007272:	4b2f      	ldr	r3, [pc, #188]	@ (8007330 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	58d3      	ldr	r3, [r2, r3]
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	0018      	movs	r0, r3
 800727e:	f7f8 ff5f 	bl	8000140 <__udivsi3>
 8007282:	0003      	movs	r3, r0
 8007284:	001a      	movs	r2, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	4353      	muls	r3, r2
 800728a:	61fb      	str	r3, [r7, #28]
      break;
 800728c:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 800728e:	4b26      	ldr	r3, [pc, #152]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	2380      	movs	r3, #128	@ 0x80
 8007294:	025b      	lsls	r3, r3, #9
 8007296:	4013      	ands	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800729a:	4b23      	ldr	r3, [pc, #140]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800729c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 800729e:	0c5b      	lsrs	r3, r3, #17
 80072a0:	221f      	movs	r2, #31
 80072a2:	4013      	ands	r3, r2
 80072a4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 80072a6:	0019      	movs	r1, r3
 80072a8:	69f8      	ldr	r0, [r7, #28]
 80072aa:	f7f8 ff49 	bl	8000140 <__udivsi3>
 80072ae:	0003      	movs	r3, r0
 80072b0:	001a      	movs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	e002      	b.n	80072be <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 80072be:	4b1a      	ldr	r3, [pc, #104]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	2380      	movs	r3, #128	@ 0x80
 80072c4:	045b      	lsls	r3, r3, #17
 80072c6:	4013      	ands	r3, r2
 80072c8:	d00e      	beq.n	80072e8 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80072ca:	4b17      	ldr	r3, [pc, #92]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80072cc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 80072ce:	0e5b      	lsrs	r3, r3, #25
 80072d0:	2207      	movs	r2, #7
 80072d2:	4013      	ands	r3, r2
 80072d4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 80072d6:	0019      	movs	r1, r3
 80072d8:	69f8      	ldr	r0, [r7, #28]
 80072da:	f7f8 ff31 	bl	8000140 <__udivsi3>
 80072de:	0003      	movs	r3, r0
 80072e0:	001a      	movs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	e002      	b.n	80072ee <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 80072ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	2380      	movs	r3, #128	@ 0x80
 80072f4:	055b      	lsls	r3, r3, #21
 80072f6:	4013      	ands	r3, r2
 80072f8:	d00e      	beq.n	8007318 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 80072fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 80072fc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 80072fe:	0f5b      	lsrs	r3, r3, #29
 8007300:	2207      	movs	r2, #7
 8007302:	4013      	ands	r3, r2
 8007304:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8007306:	0019      	movs	r1, r3
 8007308:	69f8      	ldr	r0, [r7, #28]
 800730a:	f7f8 ff19 	bl	8000140 <__udivsi3>
 800730e:	0003      	movs	r3, r0
 8007310:	001a      	movs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8007316:	e002      	b.n	800731e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
}
 800731e:	46c0      	nop			@ (mov r8, r8)
 8007320:	46bd      	mov	sp, r7
 8007322:	b008      	add	sp, #32
 8007324:	bd80      	pop	{r7, pc}
 8007326:	46c0      	nop			@ (mov r8, r8)
 8007328:	40021000 	.word	0x40021000
 800732c:	00f42400 	.word	0x00f42400
 8007330:	0800adfc 	.word	0x0800adfc
 8007334:	003d0900 	.word	0x003d0900

08007338 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007340:	210f      	movs	r1, #15
 8007342:	187b      	adds	r3, r7, r1
 8007344:	2201      	movs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d100      	bne.n	8007350 <HAL_RTC_Init+0x18>
 800734e:	e08b      	b.n	8007468 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8007350:	187b      	adds	r3, r7, r1
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	222d      	movs	r2, #45	@ 0x2d
 800735a:	5c9b      	ldrb	r3, [r3, r2]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	222c      	movs	r2, #44	@ 0x2c
 8007366:	2100      	movs	r1, #0
 8007368:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	0018      	movs	r0, r3
 800736e:	f7fb ff55 	bl	800321c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	222d      	movs	r2, #45	@ 0x2d
 8007376:	2102      	movs	r1, #2
 8007378:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800737a:	4b3f      	ldr	r3, [pc, #252]	@ (8007478 <HAL_RTC_Init+0x140>)
 800737c:	22ca      	movs	r2, #202	@ 0xca
 800737e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007380:	4b3d      	ldr	r3, [pc, #244]	@ (8007478 <HAL_RTC_Init+0x140>)
 8007382:	2253      	movs	r2, #83	@ 0x53
 8007384:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0018      	movs	r0, r3
 800738a:	f000 f8a1 	bl	80074d0 <RTC_EnterInitMode>
 800738e:	1e03      	subs	r3, r0, #0
 8007390:	d00b      	beq.n	80073aa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007392:	4b39      	ldr	r3, [pc, #228]	@ (8007478 <HAL_RTC_Init+0x140>)
 8007394:	22ff      	movs	r2, #255	@ 0xff
 8007396:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	222d      	movs	r2, #45	@ 0x2d
 800739c:	2104      	movs	r1, #4
 800739e:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 80073a0:	230f      	movs	r3, #15
 80073a2:	18fb      	adds	r3, r7, r3
 80073a4:	2201      	movs	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e05e      	b.n	8007468 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80073aa:	4b33      	ldr	r3, [pc, #204]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	4b32      	ldr	r3, [pc, #200]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073b0:	4932      	ldr	r1, [pc, #200]	@ (800747c <HAL_RTC_Init+0x144>)
 80073b2:	400a      	ands	r2, r1
 80073b4:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80073b6:	4b30      	ldr	r3, [pc, #192]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073b8:	6999      	ldr	r1, [r3, #24]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	4b2b      	ldr	r3, [pc, #172]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073cc:	430a      	orrs	r2, r1
 80073ce:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68d9      	ldr	r1, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	041a      	lsls	r2, r3, #16
 80073da:	4b27      	ldr	r3, [pc, #156]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073dc:	430a      	orrs	r2, r1
 80073de:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80073e0:	4b25      	ldr	r3, [pc, #148]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4a26      	ldr	r2, [pc, #152]	@ (8007480 <HAL_RTC_Init+0x148>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	0019      	movs	r1, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	431a      	orrs	r2, r3
 80073f4:	4b20      	ldr	r3, [pc, #128]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073f6:	430a      	orrs	r2, r1
 80073f8:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80073fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007478 <HAL_RTC_Init+0x140>)
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <HAL_RTC_Init+0x140>)
 8007400:	2180      	movs	r1, #128	@ 0x80
 8007402:	438a      	bics	r2, r1
 8007404:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007406:	4b1c      	ldr	r3, [pc, #112]	@ (8007478 <HAL_RTC_Init+0x140>)
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	2220      	movs	r2, #32
 800740c:	4013      	ands	r3, r2
 800740e:	d110      	bne.n	8007432 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f836 	bl	8007484 <HAL_RTC_WaitForSynchro>
 8007418:	1e03      	subs	r3, r0, #0
 800741a:	d00a      	beq.n	8007432 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800741c:	4b16      	ldr	r3, [pc, #88]	@ (8007478 <HAL_RTC_Init+0x140>)
 800741e:	22ff      	movs	r2, #255	@ 0xff
 8007420:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	222d      	movs	r2, #45	@ 0x2d
 8007426:	2104      	movs	r1, #4
 8007428:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 800742a:	230f      	movs	r3, #15
 800742c:	18fb      	adds	r3, r7, r3
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8007432:	230f      	movs	r3, #15
 8007434:	18fb      	adds	r3, r7, r3
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d115      	bne.n	8007468 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 800743c:	4b0e      	ldr	r3, [pc, #56]	@ (8007478 <HAL_RTC_Init+0x140>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	08d9      	lsrs	r1, r3, #3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1a      	ldr	r2, [r3, #32]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	431a      	orrs	r2, r3
 8007454:	4b08      	ldr	r3, [pc, #32]	@ (8007478 <HAL_RTC_Init+0x140>)
 8007456:	430a      	orrs	r2, r1
 8007458:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800745a:	4b07      	ldr	r3, [pc, #28]	@ (8007478 <HAL_RTC_Init+0x140>)
 800745c:	22ff      	movs	r2, #255	@ 0xff
 800745e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	222d      	movs	r2, #45	@ 0x2d
 8007464:	2101      	movs	r1, #1
 8007466:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8007468:	230f      	movs	r3, #15
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	781b      	ldrb	r3, [r3, #0]
}
 800746e:	0018      	movs	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	b004      	add	sp, #16
 8007474:	bd80      	pop	{r7, pc}
 8007476:	46c0      	nop			@ (mov r8, r8)
 8007478:	40002800 	.word	0x40002800
 800747c:	fb8fffbf 	.word	0xfb8fffbf
 8007480:	ffffe0ff 	.word	0xffffe0ff

08007484 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800748c:	4b0f      	ldr	r3, [pc, #60]	@ (80074cc <HAL_RTC_WaitForSynchro+0x48>)
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	4b0e      	ldr	r3, [pc, #56]	@ (80074cc <HAL_RTC_WaitForSynchro+0x48>)
 8007492:	2120      	movs	r1, #32
 8007494:	438a      	bics	r2, r1
 8007496:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007498:	f7fc f90a 	bl	80036b0 <HAL_GetTick>
 800749c:	0003      	movs	r3, r0
 800749e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80074a0:	e00a      	b.n	80074b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074a2:	f7fc f905 	bl	80036b0 <HAL_GetTick>
 80074a6:	0002      	movs	r2, r0
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	23fa      	movs	r3, #250	@ 0xfa
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d901      	bls.n	80074b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e005      	b.n	80074c4 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80074b8:	4b04      	ldr	r3, [pc, #16]	@ (80074cc <HAL_RTC_WaitForSynchro+0x48>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	4013      	ands	r3, r2
 80074c0:	d0ef      	beq.n	80074a2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	0018      	movs	r0, r3
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b004      	add	sp, #16
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40002800 	.word	0x40002800

080074d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80074d8:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <RTC_EnterInitMode+0x54>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	2240      	movs	r2, #64	@ 0x40
 80074de:	4013      	ands	r3, r2
 80074e0:	d11a      	bne.n	8007518 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80074e2:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <RTC_EnterInitMode+0x54>)
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007524 <RTC_EnterInitMode+0x54>)
 80074e8:	2180      	movs	r1, #128	@ 0x80
 80074ea:	430a      	orrs	r2, r1
 80074ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80074ee:	f7fc f8df 	bl	80036b0 <HAL_GetTick>
 80074f2:	0003      	movs	r3, r0
 80074f4:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80074f6:	e00a      	b.n	800750e <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80074f8:	f7fc f8da 	bl	80036b0 <HAL_GetTick>
 80074fc:	0002      	movs	r2, r0
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	23fa      	movs	r3, #250	@ 0xfa
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	429a      	cmp	r2, r3
 8007508:	d901      	bls.n	800750e <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e005      	b.n	800751a <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800750e:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <RTC_EnterInitMode+0x54>)
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2240      	movs	r2, #64	@ 0x40
 8007514:	4013      	ands	r3, r2
 8007516:	d0ef      	beq.n	80074f8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	0018      	movs	r0, r3
 800751c:	46bd      	mov	sp, r7
 800751e:	b004      	add	sp, #16
 8007520:	bd80      	pop	{r7, pc}
 8007522:	46c0      	nop			@ (mov r8, r8)
 8007524:	40002800 	.word	0x40002800

08007528 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	222c      	movs	r2, #44	@ 0x2c
 8007534:	5c9b      	ldrb	r3, [r3, r2]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800753a:	2302      	movs	r3, #2
 800753c:	e016      	b.n	800756c <HAL_RTCEx_DeactivateWakeUpTimer+0x44>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	222c      	movs	r2, #44	@ 0x2c
 8007542:	2101      	movs	r1, #1
 8007544:	5499      	strb	r1, [r3, r2]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	222d      	movs	r2, #45	@ 0x2d
 800754a:	2102      	movs	r1, #2
 800754c:	5499      	strb	r1, [r3, r2]

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800754e:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	4b08      	ldr	r3, [pc, #32]	@ (8007574 <HAL_RTCEx_DeactivateWakeUpTimer+0x4c>)
 8007554:	4908      	ldr	r1, [pc, #32]	@ (8007578 <HAL_RTCEx_DeactivateWakeUpTimer+0x50>)
 8007556:	400a      	ands	r2, r1
 8007558:	619a      	str	r2, [r3, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	222d      	movs	r2, #45	@ 0x2d
 800755e:	2101      	movs	r1, #1
 8007560:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	222c      	movs	r2, #44	@ 0x2c
 8007566:	2100      	movs	r1, #0
 8007568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	0018      	movs	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	b002      	add	sp, #8
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40002800 	.word	0x40002800
 8007578:	ffffbbff 	.word	0xffffbbff

0800757c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e046      	b.n	800761c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2288      	movs	r2, #136	@ 0x88
 8007592:	589b      	ldr	r3, [r3, r2]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d107      	bne.n	80075a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2284      	movs	r2, #132	@ 0x84
 800759c:	2100      	movs	r1, #0
 800759e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7fb fe7a 	bl	800329c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2288      	movs	r2, #136	@ 0x88
 80075ac:	2124      	movs	r1, #36	@ 0x24
 80075ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2101      	movs	r1, #1
 80075bc:	438a      	bics	r2, r1
 80075be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	0018      	movs	r0, r3
 80075cc:	f000 faa2 	bl	8007b14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	0018      	movs	r0, r3
 80075d4:	f000 f8cc 	bl	8007770 <UART_SetConfig>
 80075d8:	0003      	movs	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e01c      	b.n	800761c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	490d      	ldr	r1, [pc, #52]	@ (8007624 <HAL_UART_Init+0xa8>)
 80075ee:	400a      	ands	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	212a      	movs	r1, #42	@ 0x2a
 80075fe:	438a      	bics	r2, r1
 8007600:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2101      	movs	r1, #1
 800760e:	430a      	orrs	r2, r1
 8007610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	0018      	movs	r0, r3
 8007616:	f000 fb31 	bl	8007c7c <UART_CheckIdleState>
 800761a:	0003      	movs	r3, r0
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	b002      	add	sp, #8
 8007622:	bd80      	pop	{r7, pc}
 8007624:	ffffb7ff 	.word	0xffffb7ff

08007628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	@ 0x28
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	1dbb      	adds	r3, r7, #6
 8007636:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2288      	movs	r2, #136	@ 0x88
 800763c:	589b      	ldr	r3, [r3, r2]
 800763e:	2b20      	cmp	r3, #32
 8007640:	d000      	beq.n	8007644 <HAL_UART_Transmit+0x1c>
 8007642:	e090      	b.n	8007766 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_UART_Transmit+0x2a>
 800764a:	1dbb      	adds	r3, r7, #6
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e088      	b.n	8007768 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	2380      	movs	r3, #128	@ 0x80
 800765c:	015b      	lsls	r3, r3, #5
 800765e:	429a      	cmp	r2, r3
 8007660:	d109      	bne.n	8007676 <HAL_UART_Transmit+0x4e>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d105      	bne.n	8007676 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2201      	movs	r2, #1
 800766e:	4013      	ands	r3, r2
 8007670:	d001      	beq.n	8007676 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e078      	b.n	8007768 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2290      	movs	r2, #144	@ 0x90
 800767a:	2100      	movs	r1, #0
 800767c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2288      	movs	r2, #136	@ 0x88
 8007682:	2121      	movs	r1, #33	@ 0x21
 8007684:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007686:	f7fc f813 	bl	80036b0 <HAL_GetTick>
 800768a:	0003      	movs	r3, r0
 800768c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1dba      	adds	r2, r7, #6
 8007692:	2154      	movs	r1, #84	@ 0x54
 8007694:	8812      	ldrh	r2, [r2, #0]
 8007696:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	1dba      	adds	r2, r7, #6
 800769c:	2156      	movs	r1, #86	@ 0x56
 800769e:	8812      	ldrh	r2, [r2, #0]
 80076a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	2380      	movs	r3, #128	@ 0x80
 80076a8:	015b      	lsls	r3, r3, #5
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d108      	bne.n	80076c0 <HAL_UART_Transmit+0x98>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	e003      	b.n	80076c8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076c8:	e030      	b.n	800772c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	0013      	movs	r3, r2
 80076d4:	2200      	movs	r2, #0
 80076d6:	2180      	movs	r1, #128	@ 0x80
 80076d8:	f000 fb7a 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 80076dc:	1e03      	subs	r3, r0, #0
 80076de:	d005      	beq.n	80076ec <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2288      	movs	r2, #136	@ 0x88
 80076e4:	2120      	movs	r1, #32
 80076e6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e03d      	b.n	8007768 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10b      	bne.n	800770a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	001a      	movs	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	05d2      	lsls	r2, r2, #23
 80076fe:	0dd2      	lsrs	r2, r2, #23
 8007700:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	3302      	adds	r3, #2
 8007706:	61bb      	str	r3, [r7, #24]
 8007708:	e007      	b.n	800771a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	781a      	ldrb	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3301      	adds	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2256      	movs	r2, #86	@ 0x56
 800771e:	5a9b      	ldrh	r3, [r3, r2]
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b299      	uxth	r1, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2256      	movs	r2, #86	@ 0x56
 800772a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2256      	movs	r2, #86	@ 0x56
 8007730:	5a9b      	ldrh	r3, [r3, r2]
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1c8      	bne.n	80076ca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	0013      	movs	r3, r2
 8007742:	2200      	movs	r2, #0
 8007744:	2140      	movs	r1, #64	@ 0x40
 8007746:	f000 fb43 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 800774a:	1e03      	subs	r3, r0, #0
 800774c:	d005      	beq.n	800775a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2288      	movs	r2, #136	@ 0x88
 8007752:	2120      	movs	r1, #32
 8007754:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e006      	b.n	8007768 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2288      	movs	r2, #136	@ 0x88
 800775e:	2120      	movs	r1, #32
 8007760:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007766:	2302      	movs	r3, #2
  }
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b008      	add	sp, #32
 800776e:	bd80      	pop	{r7, pc}

08007770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007770:	b5b0      	push	{r4, r5, r7, lr}
 8007772:	b092      	sub	sp, #72	@ 0x48
 8007774:	af00      	add	r7, sp, #0
 8007776:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007778:	231f      	movs	r3, #31
 800777a:	2220      	movs	r2, #32
 800777c:	189b      	adds	r3, r3, r2
 800777e:	19db      	adds	r3, r3, r7
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4ac8      	ldr	r2, [pc, #800]	@ (8007aac <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	431a      	orrs	r2, r3
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	431a      	orrs	r2, r3
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	4313      	orrs	r3, r2
 80077a0:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4ac1      	ldr	r2, [pc, #772]	@ (8007ab0 <UART_SetConfig+0x340>)
 80077aa:	4013      	ands	r3, r2
 80077ac:	0019      	movs	r1, r3
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b4:	430b      	orrs	r3, r1
 80077b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	4abd      	ldr	r2, [pc, #756]	@ (8007ab4 <UART_SetConfig+0x344>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	0018      	movs	r0, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c6:	68d9      	ldr	r1, [r3, #12]
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	0003      	movs	r3, r0
 80077ce:	430b      	orrs	r3, r1
 80077d0:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4ab3      	ldr	r2, [pc, #716]	@ (8007aac <UART_SetConfig+0x33c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <UART_SetConfig+0x90>
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4ab4      	ldr	r2, [pc, #720]	@ (8007ab8 <UART_SetConfig+0x348>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <UART_SetConfig+0x90>
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4ab2      	ldr	r2, [pc, #712]	@ (8007abc <UART_SetConfig+0x34c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077fc:	4313      	orrs	r3, r2
 80077fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	4aae      	ldr	r2, [pc, #696]	@ (8007ac0 <UART_SetConfig+0x350>)
 8007808:	4013      	ands	r3, r2
 800780a:	0019      	movs	r1, r3
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007812:	430b      	orrs	r3, r1
 8007814:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781c:	220f      	movs	r2, #15
 800781e:	4393      	bics	r3, r2
 8007820:	0018      	movs	r0, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	0003      	movs	r3, r0
 800782c:	430b      	orrs	r3, r1
 800782e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4aa3      	ldr	r2, [pc, #652]	@ (8007ac4 <UART_SetConfig+0x354>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d102      	bne.n	8007840 <UART_SetConfig+0xd0>
 800783a:	2301      	movs	r3, #1
 800783c:	643b      	str	r3, [r7, #64]	@ 0x40
 800783e:	e033      	b.n	80078a8 <UART_SetConfig+0x138>
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4aa0      	ldr	r2, [pc, #640]	@ (8007ac8 <UART_SetConfig+0x358>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d102      	bne.n	8007850 <UART_SetConfig+0xe0>
 800784a:	2302      	movs	r3, #2
 800784c:	643b      	str	r3, [r7, #64]	@ 0x40
 800784e:	e02b      	b.n	80078a8 <UART_SetConfig+0x138>
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a9d      	ldr	r2, [pc, #628]	@ (8007acc <UART_SetConfig+0x35c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d103      	bne.n	8007862 <UART_SetConfig+0xf2>
 800785a:	2380      	movs	r3, #128	@ 0x80
 800785c:	025b      	lsls	r3, r3, #9
 800785e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007860:	e022      	b.n	80078a8 <UART_SetConfig+0x138>
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a9a      	ldr	r2, [pc, #616]	@ (8007ad0 <UART_SetConfig+0x360>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d103      	bne.n	8007874 <UART_SetConfig+0x104>
 800786c:	2380      	movs	r3, #128	@ 0x80
 800786e:	029b      	lsls	r3, r3, #10
 8007870:	643b      	str	r3, [r7, #64]	@ 0x40
 8007872:	e019      	b.n	80078a8 <UART_SetConfig+0x138>
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a8c      	ldr	r2, [pc, #560]	@ (8007aac <UART_SetConfig+0x33c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d102      	bne.n	8007884 <UART_SetConfig+0x114>
 800787e:	2310      	movs	r3, #16
 8007880:	643b      	str	r3, [r7, #64]	@ 0x40
 8007882:	e011      	b.n	80078a8 <UART_SetConfig+0x138>
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a8b      	ldr	r2, [pc, #556]	@ (8007ab8 <UART_SetConfig+0x348>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d102      	bne.n	8007894 <UART_SetConfig+0x124>
 800788e:	2308      	movs	r3, #8
 8007890:	643b      	str	r3, [r7, #64]	@ 0x40
 8007892:	e009      	b.n	80078a8 <UART_SetConfig+0x138>
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a88      	ldr	r2, [pc, #544]	@ (8007abc <UART_SetConfig+0x34c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d102      	bne.n	80078a4 <UART_SetConfig+0x134>
 800789e:	2304      	movs	r3, #4
 80078a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80078a2:	e001      	b.n	80078a8 <UART_SetConfig+0x138>
 80078a4:	2300      	movs	r3, #0
 80078a6:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a7f      	ldr	r2, [pc, #508]	@ (8007aac <UART_SetConfig+0x33c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00a      	beq.n	80078c8 <UART_SetConfig+0x158>
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a80      	ldr	r2, [pc, #512]	@ (8007ab8 <UART_SetConfig+0x348>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d005      	beq.n	80078c8 <UART_SetConfig+0x158>
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a7e      	ldr	r2, [pc, #504]	@ (8007abc <UART_SetConfig+0x34c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d000      	beq.n	80078c8 <UART_SetConfig+0x158>
 80078c6:	e06f      	b.n	80079a8 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80078c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ca:	0018      	movs	r0, r3
 80078cc:	f7fe ff2a 	bl	8006724 <HAL_RCCEx_GetPeriphCLKFreq>
 80078d0:	0003      	movs	r3, r0
 80078d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 80078d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d100      	bne.n	80078dc <UART_SetConfig+0x16c>
 80078da:	e103      	b.n	8007ae4 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078e0:	4b7c      	ldr	r3, [pc, #496]	@ (8007ad4 <UART_SetConfig+0x364>)
 80078e2:	0052      	lsls	r2, r2, #1
 80078e4:	5ad3      	ldrh	r3, [r2, r3]
 80078e6:	0019      	movs	r1, r3
 80078e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078ea:	f7f8 fc29 	bl	8000140 <__udivsi3>
 80078ee:	0003      	movs	r3, r0
 80078f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	0013      	movs	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	189b      	adds	r3, r3, r2
 80078fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078fe:	429a      	cmp	r2, r3
 8007900:	d305      	bcc.n	800790e <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800790a:	429a      	cmp	r2, r3
 800790c:	d906      	bls.n	800791c <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 800790e:	231f      	movs	r3, #31
 8007910:	2220      	movs	r2, #32
 8007912:	189b      	adds	r3, r3, r2
 8007914:	19db      	adds	r3, r3, r7
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	e044      	b.n	80079a6 <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007928:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad4 <UART_SetConfig+0x364>)
 800792a:	0052      	lsls	r2, r2, #1
 800792c:	5ad3      	ldrh	r3, [r2, r3]
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	69b8      	ldr	r0, [r7, #24]
 800793a:	69f9      	ldr	r1, [r7, #28]
 800793c:	f7f8 fdb4 	bl	80004a8 <__aeabi_uldivmod>
 8007940:	0002      	movs	r2, r0
 8007942:	000b      	movs	r3, r1
 8007944:	0e11      	lsrs	r1, r2, #24
 8007946:	021d      	lsls	r5, r3, #8
 8007948:	430d      	orrs	r5, r1
 800794a:	0214      	lsls	r4, r2, #8
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	60bb      	str	r3, [r7, #8]
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	68b8      	ldr	r0, [r7, #8]
 800795a:	68f9      	ldr	r1, [r7, #12]
 800795c:	1900      	adds	r0, r0, r4
 800795e:	4169      	adcs	r1, r5
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	603b      	str	r3, [r7, #0]
 8007966:	2300      	movs	r3, #0
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f7f8 fd9b 	bl	80004a8 <__aeabi_uldivmod>
 8007972:	0002      	movs	r2, r0
 8007974:	000b      	movs	r3, r1
 8007976:	0013      	movs	r3, r2
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800797a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800797c:	23c0      	movs	r3, #192	@ 0xc0
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	429a      	cmp	r2, r3
 8007982:	d309      	bcc.n	8007998 <UART_SetConfig+0x228>
 8007984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007986:	2380      	movs	r3, #128	@ 0x80
 8007988:	035b      	lsls	r3, r3, #13
 800798a:	429a      	cmp	r2, r3
 800798c:	d204      	bcs.n	8007998 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	e006      	b.n	80079a6 <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8007998:	231f      	movs	r3, #31
 800799a:	2220      	movs	r2, #32
 800799c:	189b      	adds	r3, r3, r2
 800799e:	19db      	adds	r3, r3, r7
 80079a0:	2201      	movs	r2, #1
 80079a2:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80079a4:	e09e      	b.n	8007ae4 <UART_SetConfig+0x374>
 80079a6:	e09d      	b.n	8007ae4 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	2380      	movs	r3, #128	@ 0x80
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d14c      	bne.n	8007a4e <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80079b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7fe feb4 	bl	8006724 <HAL_RCCEx_GetPeriphCLKFreq>
 80079bc:	0003      	movs	r3, r0
 80079be:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d100      	bne.n	80079c8 <UART_SetConfig+0x258>
 80079c6:	e08d      	b.n	8007ae4 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079cc:	4b41      	ldr	r3, [pc, #260]	@ (8007ad4 <UART_SetConfig+0x364>)
 80079ce:	0052      	lsls	r2, r2, #1
 80079d0:	5ad3      	ldrh	r3, [r2, r3]
 80079d2:	0019      	movs	r1, r3
 80079d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079d6:	f7f8 fbb3 	bl	8000140 <__udivsi3>
 80079da:	0003      	movs	r3, r0
 80079dc:	005a      	lsls	r2, r3, #1
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	18d2      	adds	r2, r2, r3
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	0019      	movs	r1, r3
 80079ec:	0010      	movs	r0, r2
 80079ee:	f7f8 fba7 	bl	8000140 <__udivsi3>
 80079f2:	0003      	movs	r3, r0
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f8:	2b0f      	cmp	r3, #15
 80079fa:	d921      	bls.n	8007a40 <UART_SetConfig+0x2d0>
 80079fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079fe:	2380      	movs	r3, #128	@ 0x80
 8007a00:	025b      	lsls	r3, r3, #9
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d21c      	bcs.n	8007a40 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	2012      	movs	r0, #18
 8007a0c:	2420      	movs	r4, #32
 8007a0e:	1903      	adds	r3, r0, r4
 8007a10:	19db      	adds	r3, r3, r7
 8007a12:	210f      	movs	r1, #15
 8007a14:	438a      	bics	r2, r1
 8007a16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2207      	movs	r2, #7
 8007a20:	4013      	ands	r3, r2
 8007a22:	b299      	uxth	r1, r3
 8007a24:	1903      	adds	r3, r0, r4
 8007a26:	19db      	adds	r3, r3, r7
 8007a28:	1902      	adds	r2, r0, r4
 8007a2a:	19d2      	adds	r2, r2, r7
 8007a2c:	8812      	ldrh	r2, [r2, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	1902      	adds	r2, r0, r4
 8007a38:	19d2      	adds	r2, r2, r7
 8007a3a:	8812      	ldrh	r2, [r2, #0]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	e051      	b.n	8007ae4 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8007a40:	231f      	movs	r3, #31
 8007a42:	2220      	movs	r2, #32
 8007a44:	189b      	adds	r3, r3, r2
 8007a46:	19db      	adds	r3, r3, r7
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e04a      	b.n	8007ae4 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a50:	0018      	movs	r0, r3
 8007a52:	f7fe fe67 	bl	8006724 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a56:	0003      	movs	r3, r0
 8007a58:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d041      	beq.n	8007ae4 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a64:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad4 <UART_SetConfig+0x364>)
 8007a66:	0052      	lsls	r2, r2, #1
 8007a68:	5ad3      	ldrh	r3, [r2, r3]
 8007a6a:	0019      	movs	r1, r3
 8007a6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a6e:	f7f8 fb67 	bl	8000140 <__udivsi3>
 8007a72:	0003      	movs	r3, r0
 8007a74:	001a      	movs	r2, r3
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	18d2      	adds	r2, r2, r3
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	0019      	movs	r1, r3
 8007a84:	0010      	movs	r0, r2
 8007a86:	f7f8 fb5b 	bl	8000140 <__udivsi3>
 8007a8a:	0003      	movs	r3, r0
 8007a8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a90:	2b0f      	cmp	r3, #15
 8007a92:	d921      	bls.n	8007ad8 <UART_SetConfig+0x368>
 8007a94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a96:	2380      	movs	r3, #128	@ 0x80
 8007a98:	025b      	lsls	r3, r3, #9
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d21c      	bcs.n	8007ad8 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
 8007aa8:	e01c      	b.n	8007ae4 <UART_SetConfig+0x374>
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	40008000 	.word	0x40008000
 8007ab0:	cfff69f3 	.word	0xcfff69f3
 8007ab4:	ffffcfff 	.word	0xffffcfff
 8007ab8:	40008400 	.word	0x40008400
 8007abc:	40008c00 	.word	0x40008c00
 8007ac0:	11fff4ff 	.word	0x11fff4ff
 8007ac4:	40013800 	.word	0x40013800
 8007ac8:	40004400 	.word	0x40004400
 8007acc:	40004800 	.word	0x40004800
 8007ad0:	40004c00 	.word	0x40004c00
 8007ad4:	0800aeb0 	.word	0x0800aeb0
      }
      else
      {
        ret = HAL_ERROR;
 8007ad8:	231f      	movs	r3, #31
 8007ada:	2220      	movs	r2, #32
 8007adc:	189b      	adds	r3, r3, r2
 8007ade:	19db      	adds	r3, r3, r7
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	226a      	movs	r2, #106	@ 0x6a
 8007ae8:	2101      	movs	r1, #1
 8007aea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	2268      	movs	r2, #104	@ 0x68
 8007af0:	2101      	movs	r1, #1
 8007af2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af6:	2200      	movs	r2, #0
 8007af8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	2200      	movs	r2, #0
 8007afe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b00:	231f      	movs	r3, #31
 8007b02:	2220      	movs	r2, #32
 8007b04:	189b      	adds	r3, r3, r2
 8007b06:	19db      	adds	r3, r3, r7
 8007b08:	781b      	ldrb	r3, [r3, #0]
}
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	b012      	add	sp, #72	@ 0x48
 8007b10:	bdb0      	pop	{r4, r5, r7, pc}
 8007b12:	46c0      	nop			@ (mov r8, r8)

08007b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b20:	2208      	movs	r2, #8
 8007b22:	4013      	ands	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c58 <UART_AdvFeatureConfig+0x144>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	0019      	movs	r1, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b42:	2201      	movs	r2, #1
 8007b44:	4013      	ands	r3, r2
 8007b46:	d00b      	beq.n	8007b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	4a43      	ldr	r2, [pc, #268]	@ (8007c5c <UART_AdvFeatureConfig+0x148>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	0019      	movs	r1, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	2202      	movs	r2, #2
 8007b66:	4013      	ands	r3, r2
 8007b68:	d00b      	beq.n	8007b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a3b      	ldr	r2, [pc, #236]	@ (8007c60 <UART_AdvFeatureConfig+0x14c>)
 8007b72:	4013      	ands	r3, r2
 8007b74:	0019      	movs	r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b86:	2204      	movs	r2, #4
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	4a34      	ldr	r2, [pc, #208]	@ (8007c64 <UART_AdvFeatureConfig+0x150>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	0019      	movs	r1, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba8:	2210      	movs	r2, #16
 8007baa:	4013      	ands	r3, r2
 8007bac:	d00b      	beq.n	8007bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c68 <UART_AdvFeatureConfig+0x154>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	0019      	movs	r1, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bca:	2220      	movs	r2, #32
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d00b      	beq.n	8007be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	4a25      	ldr	r2, [pc, #148]	@ (8007c6c <UART_AdvFeatureConfig+0x158>)
 8007bd8:	4013      	ands	r3, r2
 8007bda:	0019      	movs	r1, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bec:	2240      	movs	r2, #64	@ 0x40
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c70 <UART_AdvFeatureConfig+0x15c>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	0019      	movs	r1, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c0e:	2380      	movs	r3, #128	@ 0x80
 8007c10:	035b      	lsls	r3, r3, #13
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d10b      	bne.n	8007c2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4a15      	ldr	r2, [pc, #84]	@ (8007c74 <UART_AdvFeatureConfig+0x160>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	0019      	movs	r1, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c32:	2280      	movs	r2, #128	@ 0x80
 8007c34:	4013      	ands	r3, r2
 8007c36:	d00b      	beq.n	8007c50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c78 <UART_AdvFeatureConfig+0x164>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	0019      	movs	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
  }
}
 8007c50:	46c0      	nop			@ (mov r8, r8)
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b002      	add	sp, #8
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	ffff7fff 	.word	0xffff7fff
 8007c5c:	fffdffff 	.word	0xfffdffff
 8007c60:	fffeffff 	.word	0xfffeffff
 8007c64:	fffbffff 	.word	0xfffbffff
 8007c68:	ffffefff 	.word	0xffffefff
 8007c6c:	ffffdfff 	.word	0xffffdfff
 8007c70:	ffefffff 	.word	0xffefffff
 8007c74:	ff9fffff 	.word	0xff9fffff
 8007c78:	fff7ffff 	.word	0xfff7ffff

08007c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b092      	sub	sp, #72	@ 0x48
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2290      	movs	r2, #144	@ 0x90
 8007c88:	2100      	movs	r1, #0
 8007c8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c8c:	f7fb fd10 	bl	80036b0 <HAL_GetTick>
 8007c90:	0003      	movs	r3, r0
 8007c92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2208      	movs	r2, #8
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d12d      	bne.n	8007cfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca4:	2280      	movs	r2, #128	@ 0x80
 8007ca6:	0391      	lsls	r1, r2, #14
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	4a47      	ldr	r2, [pc, #284]	@ (8007dc8 <UART_CheckIdleState+0x14c>)
 8007cac:	9200      	str	r2, [sp, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f000 f88e 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 8007cb4:	1e03      	subs	r3, r0, #0
 8007cb6:	d022      	beq.n	8007cfe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	f383 8810 	msr	PRIMASK, r3
}
 8007ccc:	46c0      	nop			@ (mov r8, r8)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2180      	movs	r1, #128	@ 0x80
 8007cda:	438a      	bics	r2, r1
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce4:	f383 8810 	msr	PRIMASK, r3
}
 8007ce8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2288      	movs	r2, #136	@ 0x88
 8007cee:	2120      	movs	r1, #32
 8007cf0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2284      	movs	r2, #132	@ 0x84
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e060      	b.n	8007dc0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2204      	movs	r2, #4
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d146      	bne.n	8007d9a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0e:	2280      	movs	r2, #128	@ 0x80
 8007d10:	03d1      	lsls	r1, r2, #15
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4a2c      	ldr	r2, [pc, #176]	@ (8007dc8 <UART_CheckIdleState+0x14c>)
 8007d16:	9200      	str	r2, [sp, #0]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f000 f859 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 8007d1e:	1e03      	subs	r3, r0, #0
 8007d20:	d03b      	beq.n	8007d9a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d22:	f3ef 8310 	mrs	r3, PRIMASK
 8007d26:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d28:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f383 8810 	msr	PRIMASK, r3
}
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4922      	ldr	r1, [pc, #136]	@ (8007dcc <UART_CheckIdleState+0x150>)
 8007d44:	400a      	ands	r2, r1
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f383 8810 	msr	PRIMASK, r3
}
 8007d52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d54:	f3ef 8310 	mrs	r3, PRIMASK
 8007d58:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d5a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	f383 8810 	msr	PRIMASK, r3
}
 8007d68:	46c0      	nop			@ (mov r8, r8)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2101      	movs	r1, #1
 8007d76:	438a      	bics	r2, r1
 8007d78:	609a      	str	r2, [r3, #8]
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	f383 8810 	msr	PRIMASK, r3
}
 8007d84:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	228c      	movs	r2, #140	@ 0x8c
 8007d8a:	2120      	movs	r1, #32
 8007d8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2284      	movs	r2, #132	@ 0x84
 8007d92:	2100      	movs	r1, #0
 8007d94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e012      	b.n	8007dc0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2288      	movs	r2, #136	@ 0x88
 8007d9e:	2120      	movs	r1, #32
 8007da0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	228c      	movs	r2, #140	@ 0x8c
 8007da6:	2120      	movs	r1, #32
 8007da8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2284      	movs	r2, #132	@ 0x84
 8007dba:	2100      	movs	r1, #0
 8007dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b010      	add	sp, #64	@ 0x40
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	01ffffff 	.word	0x01ffffff
 8007dcc:	fffffedf 	.word	0xfffffedf

08007dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	1dfb      	adds	r3, r7, #7
 8007dde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de0:	e051      	b.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	3301      	adds	r3, #1
 8007de6:	d04e      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de8:	f7fb fc62 	bl	80036b0 <HAL_GetTick>
 8007dec:	0002      	movs	r2, r0
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d302      	bcc.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x2e>
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e051      	b.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2204      	movs	r2, #4
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d03b      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b80      	cmp	r3, #128	@ 0x80
 8007e12:	d038      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b40      	cmp	r3, #64	@ 0x40
 8007e18:	d035      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	2208      	movs	r2, #8
 8007e22:	4013      	ands	r3, r2
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d111      	bne.n	8007e4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	0018      	movs	r0, r3
 8007e34:	f000 f83c 	bl	8007eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2290      	movs	r2, #144	@ 0x90
 8007e3c:	2108      	movs	r1, #8
 8007e3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2284      	movs	r2, #132	@ 0x84
 8007e44:	2100      	movs	r1, #0
 8007e46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e02c      	b.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69da      	ldr	r2, [r3, #28]
 8007e52:	2380      	movs	r3, #128	@ 0x80
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	401a      	ands	r2, r3
 8007e58:	2380      	movs	r3, #128	@ 0x80
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d112      	bne.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2280      	movs	r2, #128	@ 0x80
 8007e66:	0112      	lsls	r2, r2, #4
 8007e68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f000 f81f 	bl	8007eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2290      	movs	r2, #144	@ 0x90
 8007e76:	2120      	movs	r1, #32
 8007e78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2284      	movs	r2, #132	@ 0x84
 8007e7e:	2100      	movs	r1, #0
 8007e80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e00f      	b.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	425a      	negs	r2, r3
 8007e96:	4153      	adcs	r3, r2
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	1dfb      	adds	r3, r7, #7
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d09e      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	b004      	add	sp, #16
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08e      	sub	sp, #56	@ 0x38
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ebc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ebe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	46c0      	nop			@ (mov r8, r8)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4926      	ldr	r1, [pc, #152]	@ (8007f74 <UART_EndRxTransfer+0xc4>)
 8007eda:	400a      	ands	r2, r1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	f383 8810 	msr	PRIMASK, r3
}
 8007ee8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007eea:	f3ef 8310 	mrs	r3, PRIMASK
 8007eee:	623b      	str	r3, [r7, #32]
  return(result);
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	f383 8810 	msr	PRIMASK, r3
}
 8007efe:	46c0      	nop			@ (mov r8, r8)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	491b      	ldr	r1, [pc, #108]	@ (8007f78 <UART_EndRxTransfer+0xc8>)
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	609a      	str	r2, [r3, #8]
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f16:	f383 8810 	msr	PRIMASK, r3
}
 8007f1a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d118      	bne.n	8007f56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f24:	f3ef 8310 	mrs	r3, PRIMASK
 8007f28:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f2e:	2301      	movs	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f383 8810 	msr	PRIMASK, r3
}
 8007f38:	46c0      	nop			@ (mov r8, r8)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2110      	movs	r1, #16
 8007f46:	438a      	bics	r2, r1
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f383 8810 	msr	PRIMASK, r3
}
 8007f54:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	228c      	movs	r2, #140	@ 0x8c
 8007f5a:	2120      	movs	r1, #32
 8007f5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f6a:	46c0      	nop			@ (mov r8, r8)
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	b00e      	add	sp, #56	@ 0x38
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	46c0      	nop			@ (mov r8, r8)
 8007f74:	fffffedf 	.word	0xfffffedf
 8007f78:	effffffe 	.word	0xeffffffe

08007f7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2284      	movs	r2, #132	@ 0x84
 8007f88:	5c9b      	ldrb	r3, [r3, r2]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e027      	b.n	8007fe2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2284      	movs	r2, #132	@ 0x84
 8007f96:	2101      	movs	r1, #1
 8007f98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2288      	movs	r2, #136	@ 0x88
 8007f9e:	2124      	movs	r1, #36	@ 0x24
 8007fa0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	438a      	bics	r2, r1
 8007fb8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8007fec <HAL_UARTEx_DisableFifoMode+0x70>)
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2288      	movs	r2, #136	@ 0x88
 8007fd4:	2120      	movs	r1, #32
 8007fd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2284      	movs	r2, #132	@ 0x84
 8007fdc:	2100      	movs	r1, #0
 8007fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	b004      	add	sp, #16
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	46c0      	nop			@ (mov r8, r8)
 8007fec:	dfffffff 	.word	0xdfffffff

08007ff0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2284      	movs	r2, #132	@ 0x84
 8007ffe:	5c9b      	ldrb	r3, [r3, r2]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008004:	2302      	movs	r3, #2
 8008006:	e02e      	b.n	8008066 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2284      	movs	r2, #132	@ 0x84
 800800c:	2101      	movs	r1, #1
 800800e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2288      	movs	r2, #136	@ 0x88
 8008014:	2124      	movs	r1, #36	@ 0x24
 8008016:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2101      	movs	r1, #1
 800802c:	438a      	bics	r2, r1
 800802e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	08d9      	lsrs	r1, r3, #3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	0018      	movs	r0, r3
 8008048:	f000 f854 	bl	80080f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2288      	movs	r2, #136	@ 0x88
 8008058:	2120      	movs	r1, #32
 800805a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2284      	movs	r2, #132	@ 0x84
 8008060:	2100      	movs	r1, #0
 8008062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	0018      	movs	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	b004      	add	sp, #16
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2284      	movs	r2, #132	@ 0x84
 800807e:	5c9b      	ldrb	r3, [r3, r2]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008084:	2302      	movs	r3, #2
 8008086:	e02f      	b.n	80080e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2284      	movs	r2, #132	@ 0x84
 800808c:	2101      	movs	r1, #1
 800808e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2288      	movs	r2, #136	@ 0x88
 8008094:	2124      	movs	r1, #36	@ 0x24
 8008096:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2101      	movs	r1, #1
 80080ac:	438a      	bics	r2, r1
 80080ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	4a0e      	ldr	r2, [pc, #56]	@ (80080f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	0019      	movs	r1, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	0018      	movs	r0, r3
 80080ca:	f000 f813 	bl	80080f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2288      	movs	r2, #136	@ 0x88
 80080da:	2120      	movs	r1, #32
 80080dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2284      	movs	r2, #132	@ 0x84
 80080e2:	2100      	movs	r1, #0
 80080e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	0018      	movs	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b004      	add	sp, #16
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	f1ffffff 	.word	0xf1ffffff

080080f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008100:	2b00      	cmp	r3, #0
 8008102:	d108      	bne.n	8008116 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	226a      	movs	r2, #106	@ 0x6a
 8008108:	2101      	movs	r1, #1
 800810a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2268      	movs	r2, #104	@ 0x68
 8008110:	2101      	movs	r1, #1
 8008112:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008114:	e043      	b.n	800819e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008116:	260f      	movs	r6, #15
 8008118:	19bb      	adds	r3, r7, r6
 800811a:	2208      	movs	r2, #8
 800811c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800811e:	200e      	movs	r0, #14
 8008120:	183b      	adds	r3, r7, r0
 8008122:	2208      	movs	r2, #8
 8008124:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	0e5b      	lsrs	r3, r3, #25
 800812e:	b2da      	uxtb	r2, r3
 8008130:	240d      	movs	r4, #13
 8008132:	193b      	adds	r3, r7, r4
 8008134:	2107      	movs	r1, #7
 8008136:	400a      	ands	r2, r1
 8008138:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	0f5b      	lsrs	r3, r3, #29
 8008142:	b2da      	uxtb	r2, r3
 8008144:	250c      	movs	r5, #12
 8008146:	197b      	adds	r3, r7, r5
 8008148:	2107      	movs	r1, #7
 800814a:	400a      	ands	r2, r1
 800814c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800814e:	183b      	adds	r3, r7, r0
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	197a      	adds	r2, r7, r5
 8008154:	7812      	ldrb	r2, [r2, #0]
 8008156:	4914      	ldr	r1, [pc, #80]	@ (80081a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8008158:	5c8a      	ldrb	r2, [r1, r2]
 800815a:	435a      	muls	r2, r3
 800815c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800815e:	197b      	adds	r3, r7, r5
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	4a12      	ldr	r2, [pc, #72]	@ (80081ac <UARTEx_SetNbDataToProcess+0xb8>)
 8008164:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008166:	0019      	movs	r1, r3
 8008168:	f7f8 f874 	bl	8000254 <__divsi3>
 800816c:	0003      	movs	r3, r0
 800816e:	b299      	uxth	r1, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	226a      	movs	r2, #106	@ 0x6a
 8008174:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008176:	19bb      	adds	r3, r7, r6
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	193a      	adds	r2, r7, r4
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	490a      	ldr	r1, [pc, #40]	@ (80081a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8008180:	5c8a      	ldrb	r2, [r1, r2]
 8008182:	435a      	muls	r2, r3
 8008184:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008186:	193b      	adds	r3, r7, r4
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	4a08      	ldr	r2, [pc, #32]	@ (80081ac <UARTEx_SetNbDataToProcess+0xb8>)
 800818c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800818e:	0019      	movs	r1, r3
 8008190:	f7f8 f860 	bl	8000254 <__divsi3>
 8008194:	0003      	movs	r3, r0
 8008196:	b299      	uxth	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2268      	movs	r2, #104	@ 0x68
 800819c:	5299      	strh	r1, [r3, r2]
}
 800819e:	46c0      	nop			@ (mov r8, r8)
 80081a0:	46bd      	mov	sp, r7
 80081a2:	b005      	add	sp, #20
 80081a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	0800aec8 	.word	0x0800aec8
 80081ac:	0800aed0 	.word	0x0800aed0

080081b0 <__cvt>:
 80081b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b2:	001f      	movs	r7, r3
 80081b4:	2300      	movs	r3, #0
 80081b6:	0016      	movs	r6, r2
 80081b8:	b08b      	sub	sp, #44	@ 0x2c
 80081ba:	429f      	cmp	r7, r3
 80081bc:	da04      	bge.n	80081c8 <__cvt+0x18>
 80081be:	2180      	movs	r1, #128	@ 0x80
 80081c0:	0609      	lsls	r1, r1, #24
 80081c2:	187b      	adds	r3, r7, r1
 80081c4:	001f      	movs	r7, r3
 80081c6:	232d      	movs	r3, #45	@ 0x2d
 80081c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081ca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80081cc:	7013      	strb	r3, [r2, #0]
 80081ce:	2320      	movs	r3, #32
 80081d0:	2203      	movs	r2, #3
 80081d2:	439d      	bics	r5, r3
 80081d4:	2d46      	cmp	r5, #70	@ 0x46
 80081d6:	d007      	beq.n	80081e8 <__cvt+0x38>
 80081d8:	002b      	movs	r3, r5
 80081da:	3b45      	subs	r3, #69	@ 0x45
 80081dc:	4259      	negs	r1, r3
 80081de:	414b      	adcs	r3, r1
 80081e0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80081e2:	3a01      	subs	r2, #1
 80081e4:	18cb      	adds	r3, r1, r3
 80081e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80081e8:	ab09      	add	r3, sp, #36	@ 0x24
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	ab08      	add	r3, sp, #32
 80081ee:	9303      	str	r3, [sp, #12]
 80081f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081f2:	9200      	str	r2, [sp, #0]
 80081f4:	9302      	str	r3, [sp, #8]
 80081f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081f8:	0032      	movs	r2, r6
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	003b      	movs	r3, r7
 80081fe:	f000 ff6f 	bl	80090e0 <_dtoa_r>
 8008202:	0004      	movs	r4, r0
 8008204:	2d47      	cmp	r5, #71	@ 0x47
 8008206:	d11b      	bne.n	8008240 <__cvt+0x90>
 8008208:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800820a:	07db      	lsls	r3, r3, #31
 800820c:	d511      	bpl.n	8008232 <__cvt+0x82>
 800820e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008210:	18c3      	adds	r3, r0, r3
 8008212:	9307      	str	r3, [sp, #28]
 8008214:	2200      	movs	r2, #0
 8008216:	2300      	movs	r3, #0
 8008218:	0030      	movs	r0, r6
 800821a:	0039      	movs	r1, r7
 800821c:	f7f8 f916 	bl	800044c <__aeabi_dcmpeq>
 8008220:	2800      	cmp	r0, #0
 8008222:	d001      	beq.n	8008228 <__cvt+0x78>
 8008224:	9b07      	ldr	r3, [sp, #28]
 8008226:	9309      	str	r3, [sp, #36]	@ 0x24
 8008228:	2230      	movs	r2, #48	@ 0x30
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	9907      	ldr	r1, [sp, #28]
 800822e:	428b      	cmp	r3, r1
 8008230:	d320      	bcc.n	8008274 <__cvt+0xc4>
 8008232:	0020      	movs	r0, r4
 8008234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008236:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008238:	1b1b      	subs	r3, r3, r4
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	b00b      	add	sp, #44	@ 0x2c
 800823e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008242:	18c3      	adds	r3, r0, r3
 8008244:	9307      	str	r3, [sp, #28]
 8008246:	2d46      	cmp	r5, #70	@ 0x46
 8008248:	d1e4      	bne.n	8008214 <__cvt+0x64>
 800824a:	7803      	ldrb	r3, [r0, #0]
 800824c:	2b30      	cmp	r3, #48	@ 0x30
 800824e:	d10c      	bne.n	800826a <__cvt+0xba>
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	0030      	movs	r0, r6
 8008256:	0039      	movs	r1, r7
 8008258:	f7f8 f8f8 	bl	800044c <__aeabi_dcmpeq>
 800825c:	2800      	cmp	r0, #0
 800825e:	d104      	bne.n	800826a <__cvt+0xba>
 8008260:	2301      	movs	r3, #1
 8008262:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800826c:	9a07      	ldr	r2, [sp, #28]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	18d3      	adds	r3, r2, r3
 8008272:	e7ce      	b.n	8008212 <__cvt+0x62>
 8008274:	1c59      	adds	r1, r3, #1
 8008276:	9109      	str	r1, [sp, #36]	@ 0x24
 8008278:	701a      	strb	r2, [r3, #0]
 800827a:	e7d6      	b.n	800822a <__cvt+0x7a>

0800827c <__exponent>:
 800827c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827e:	232b      	movs	r3, #43	@ 0x2b
 8008280:	b085      	sub	sp, #20
 8008282:	0005      	movs	r5, r0
 8008284:	1e0c      	subs	r4, r1, #0
 8008286:	7002      	strb	r2, [r0, #0]
 8008288:	da01      	bge.n	800828e <__exponent+0x12>
 800828a:	424c      	negs	r4, r1
 800828c:	3302      	adds	r3, #2
 800828e:	706b      	strb	r3, [r5, #1]
 8008290:	2c09      	cmp	r4, #9
 8008292:	dd2c      	ble.n	80082ee <__exponent+0x72>
 8008294:	ab02      	add	r3, sp, #8
 8008296:	1dde      	adds	r6, r3, #7
 8008298:	0020      	movs	r0, r4
 800829a:	210a      	movs	r1, #10
 800829c:	f7f8 f8c0 	bl	8000420 <__aeabi_idivmod>
 80082a0:	0037      	movs	r7, r6
 80082a2:	3130      	adds	r1, #48	@ 0x30
 80082a4:	3e01      	subs	r6, #1
 80082a6:	0020      	movs	r0, r4
 80082a8:	7031      	strb	r1, [r6, #0]
 80082aa:	210a      	movs	r1, #10
 80082ac:	9401      	str	r4, [sp, #4]
 80082ae:	f7f7 ffd1 	bl	8000254 <__divsi3>
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	0004      	movs	r4, r0
 80082b6:	2b63      	cmp	r3, #99	@ 0x63
 80082b8:	dcee      	bgt.n	8008298 <__exponent+0x1c>
 80082ba:	1eba      	subs	r2, r7, #2
 80082bc:	1ca8      	adds	r0, r5, #2
 80082be:	0001      	movs	r1, r0
 80082c0:	0013      	movs	r3, r2
 80082c2:	3430      	adds	r4, #48	@ 0x30
 80082c4:	7014      	strb	r4, [r2, #0]
 80082c6:	ac02      	add	r4, sp, #8
 80082c8:	3407      	adds	r4, #7
 80082ca:	429c      	cmp	r4, r3
 80082cc:	d80a      	bhi.n	80082e4 <__exponent+0x68>
 80082ce:	2300      	movs	r3, #0
 80082d0:	4294      	cmp	r4, r2
 80082d2:	d303      	bcc.n	80082dc <__exponent+0x60>
 80082d4:	3309      	adds	r3, #9
 80082d6:	aa02      	add	r2, sp, #8
 80082d8:	189b      	adds	r3, r3, r2
 80082da:	1bdb      	subs	r3, r3, r7
 80082dc:	18c0      	adds	r0, r0, r3
 80082de:	1b40      	subs	r0, r0, r5
 80082e0:	b005      	add	sp, #20
 80082e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e4:	781c      	ldrb	r4, [r3, #0]
 80082e6:	3301      	adds	r3, #1
 80082e8:	700c      	strb	r4, [r1, #0]
 80082ea:	3101      	adds	r1, #1
 80082ec:	e7eb      	b.n	80082c6 <__exponent+0x4a>
 80082ee:	2330      	movs	r3, #48	@ 0x30
 80082f0:	18e4      	adds	r4, r4, r3
 80082f2:	70ab      	strb	r3, [r5, #2]
 80082f4:	1d28      	adds	r0, r5, #4
 80082f6:	70ec      	strb	r4, [r5, #3]
 80082f8:	e7f1      	b.n	80082de <__exponent+0x62>
	...

080082fc <_printf_float>:
 80082fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082fe:	b097      	sub	sp, #92	@ 0x5c
 8008300:	000d      	movs	r5, r1
 8008302:	920a      	str	r2, [sp, #40]	@ 0x28
 8008304:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8008306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008308:	9009      	str	r0, [sp, #36]	@ 0x24
 800830a:	f000 fdd9 	bl	8008ec0 <_localeconv_r>
 800830e:	6803      	ldr	r3, [r0, #0]
 8008310:	0018      	movs	r0, r3
 8008312:	930d      	str	r3, [sp, #52]	@ 0x34
 8008314:	f7f7 fef8 	bl	8000108 <strlen>
 8008318:	2300      	movs	r3, #0
 800831a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800831c:	9314      	str	r3, [sp, #80]	@ 0x50
 800831e:	7e2b      	ldrb	r3, [r5, #24]
 8008320:	2207      	movs	r2, #7
 8008322:	930c      	str	r3, [sp, #48]	@ 0x30
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	930e      	str	r3, [sp, #56]	@ 0x38
 8008328:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	05c9      	lsls	r1, r1, #23
 800832e:	d545      	bpl.n	80083bc <_printf_float+0xc0>
 8008330:	189b      	adds	r3, r3, r2
 8008332:	4393      	bics	r3, r2
 8008334:	001a      	movs	r2, r3
 8008336:	3208      	adds	r2, #8
 8008338:	6022      	str	r2, [r4, #0]
 800833a:	2201      	movs	r2, #1
 800833c:	681e      	ldr	r6, [r3, #0]
 800833e:	685f      	ldr	r7, [r3, #4]
 8008340:	007b      	lsls	r3, r7, #1
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	9311      	str	r3, [sp, #68]	@ 0x44
 8008346:	9610      	str	r6, [sp, #64]	@ 0x40
 8008348:	64ae      	str	r6, [r5, #72]	@ 0x48
 800834a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800834c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800834e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008350:	4ba7      	ldr	r3, [pc, #668]	@ (80085f0 <_printf_float+0x2f4>)
 8008352:	4252      	negs	r2, r2
 8008354:	f7fa fa2e 	bl	80027b4 <__aeabi_dcmpun>
 8008358:	2800      	cmp	r0, #0
 800835a:	d131      	bne.n	80083c0 <_printf_float+0xc4>
 800835c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800835e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008360:	2201      	movs	r2, #1
 8008362:	4ba3      	ldr	r3, [pc, #652]	@ (80085f0 <_printf_float+0x2f4>)
 8008364:	4252      	negs	r2, r2
 8008366:	f7f8 f881 	bl	800046c <__aeabi_dcmple>
 800836a:	2800      	cmp	r0, #0
 800836c:	d128      	bne.n	80083c0 <_printf_float+0xc4>
 800836e:	2200      	movs	r2, #0
 8008370:	2300      	movs	r3, #0
 8008372:	0030      	movs	r0, r6
 8008374:	0039      	movs	r1, r7
 8008376:	f7f8 f86f 	bl	8000458 <__aeabi_dcmplt>
 800837a:	2800      	cmp	r0, #0
 800837c:	d003      	beq.n	8008386 <_printf_float+0x8a>
 800837e:	002b      	movs	r3, r5
 8008380:	222d      	movs	r2, #45	@ 0x2d
 8008382:	3343      	adds	r3, #67	@ 0x43
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008388:	4f9a      	ldr	r7, [pc, #616]	@ (80085f4 <_printf_float+0x2f8>)
 800838a:	2b47      	cmp	r3, #71	@ 0x47
 800838c:	d800      	bhi.n	8008390 <_printf_float+0x94>
 800838e:	4f9a      	ldr	r7, [pc, #616]	@ (80085f8 <_printf_float+0x2fc>)
 8008390:	2303      	movs	r3, #3
 8008392:	2400      	movs	r4, #0
 8008394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008396:	612b      	str	r3, [r5, #16]
 8008398:	3301      	adds	r3, #1
 800839a:	439a      	bics	r2, r3
 800839c:	602a      	str	r2, [r5, #0]
 800839e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a0:	0029      	movs	r1, r5
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083a8:	aa15      	add	r2, sp, #84	@ 0x54
 80083aa:	f000 f9e5 	bl	8008778 <_printf_common>
 80083ae:	3001      	adds	r0, #1
 80083b0:	d000      	beq.n	80083b4 <_printf_float+0xb8>
 80083b2:	e09e      	b.n	80084f2 <_printf_float+0x1f6>
 80083b4:	2001      	movs	r0, #1
 80083b6:	4240      	negs	r0, r0
 80083b8:	b017      	add	sp, #92	@ 0x5c
 80083ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083bc:	3307      	adds	r3, #7
 80083be:	e7b8      	b.n	8008332 <_printf_float+0x36>
 80083c0:	0032      	movs	r2, r6
 80083c2:	003b      	movs	r3, r7
 80083c4:	0030      	movs	r0, r6
 80083c6:	0039      	movs	r1, r7
 80083c8:	f7fa f9f4 	bl	80027b4 <__aeabi_dcmpun>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d00b      	beq.n	80083e8 <_printf_float+0xec>
 80083d0:	2f00      	cmp	r7, #0
 80083d2:	da03      	bge.n	80083dc <_printf_float+0xe0>
 80083d4:	002b      	movs	r3, r5
 80083d6:	222d      	movs	r2, #45	@ 0x2d
 80083d8:	3343      	adds	r3, #67	@ 0x43
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083de:	4f87      	ldr	r7, [pc, #540]	@ (80085fc <_printf_float+0x300>)
 80083e0:	2b47      	cmp	r3, #71	@ 0x47
 80083e2:	d8d5      	bhi.n	8008390 <_printf_float+0x94>
 80083e4:	4f86      	ldr	r7, [pc, #536]	@ (8008600 <_printf_float+0x304>)
 80083e6:	e7d3      	b.n	8008390 <_printf_float+0x94>
 80083e8:	2220      	movs	r2, #32
 80083ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80083ec:	686b      	ldr	r3, [r5, #4]
 80083ee:	4394      	bics	r4, r2
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	d146      	bne.n	8008482 <_printf_float+0x186>
 80083f4:	3307      	adds	r3, #7
 80083f6:	606b      	str	r3, [r5, #4]
 80083f8:	2380      	movs	r3, #128	@ 0x80
 80083fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	4313      	orrs	r3, r2
 8008400:	2200      	movs	r2, #0
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	9206      	str	r2, [sp, #24]
 8008406:	aa14      	add	r2, sp, #80	@ 0x50
 8008408:	9205      	str	r2, [sp, #20]
 800840a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800840c:	a90a      	add	r1, sp, #40	@ 0x28
 800840e:	9204      	str	r2, [sp, #16]
 8008410:	aa13      	add	r2, sp, #76	@ 0x4c
 8008412:	9203      	str	r2, [sp, #12]
 8008414:	2223      	movs	r2, #35	@ 0x23
 8008416:	1852      	adds	r2, r2, r1
 8008418:	9202      	str	r2, [sp, #8]
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	686b      	ldr	r3, [r5, #4]
 800841e:	0032      	movs	r2, r6
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008424:	003b      	movs	r3, r7
 8008426:	f7ff fec3 	bl	80081b0 <__cvt>
 800842a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800842c:	0007      	movs	r7, r0
 800842e:	2c47      	cmp	r4, #71	@ 0x47
 8008430:	d12d      	bne.n	800848e <_printf_float+0x192>
 8008432:	1cd3      	adds	r3, r2, #3
 8008434:	db02      	blt.n	800843c <_printf_float+0x140>
 8008436:	686b      	ldr	r3, [r5, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	dd47      	ble.n	80084cc <_printf_float+0x1d0>
 800843c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800843e:	3b02      	subs	r3, #2
 8008440:	b2db      	uxtb	r3, r3
 8008442:	930c      	str	r3, [sp, #48]	@ 0x30
 8008444:	0028      	movs	r0, r5
 8008446:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008448:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800844a:	3901      	subs	r1, #1
 800844c:	3050      	adds	r0, #80	@ 0x50
 800844e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008450:	f7ff ff14 	bl	800827c <__exponent>
 8008454:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008456:	0004      	movs	r4, r0
 8008458:	1813      	adds	r3, r2, r0
 800845a:	612b      	str	r3, [r5, #16]
 800845c:	2a01      	cmp	r2, #1
 800845e:	dc02      	bgt.n	8008466 <_printf_float+0x16a>
 8008460:	682a      	ldr	r2, [r5, #0]
 8008462:	07d2      	lsls	r2, r2, #31
 8008464:	d501      	bpl.n	800846a <_printf_float+0x16e>
 8008466:	3301      	adds	r3, #1
 8008468:	612b      	str	r3, [r5, #16]
 800846a:	2323      	movs	r3, #35	@ 0x23
 800846c:	aa0a      	add	r2, sp, #40	@ 0x28
 800846e:	189b      	adds	r3, r3, r2
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d100      	bne.n	8008478 <_printf_float+0x17c>
 8008476:	e792      	b.n	800839e <_printf_float+0xa2>
 8008478:	002b      	movs	r3, r5
 800847a:	222d      	movs	r2, #45	@ 0x2d
 800847c:	3343      	adds	r3, #67	@ 0x43
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	e78d      	b.n	800839e <_printf_float+0xa2>
 8008482:	2c47      	cmp	r4, #71	@ 0x47
 8008484:	d1b8      	bne.n	80083f8 <_printf_float+0xfc>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1b6      	bne.n	80083f8 <_printf_float+0xfc>
 800848a:	3301      	adds	r3, #1
 800848c:	e7b3      	b.n	80083f6 <_printf_float+0xfa>
 800848e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008490:	2b65      	cmp	r3, #101	@ 0x65
 8008492:	d9d7      	bls.n	8008444 <_printf_float+0x148>
 8008494:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008496:	2b66      	cmp	r3, #102	@ 0x66
 8008498:	d11a      	bne.n	80084d0 <_printf_float+0x1d4>
 800849a:	686b      	ldr	r3, [r5, #4]
 800849c:	2a00      	cmp	r2, #0
 800849e:	dd09      	ble.n	80084b4 <_printf_float+0x1b8>
 80084a0:	612a      	str	r2, [r5, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <_printf_float+0x1b0>
 80084a6:	6829      	ldr	r1, [r5, #0]
 80084a8:	07c9      	lsls	r1, r1, #31
 80084aa:	d50b      	bpl.n	80084c4 <_printf_float+0x1c8>
 80084ac:	3301      	adds	r3, #1
 80084ae:	189b      	adds	r3, r3, r2
 80084b0:	612b      	str	r3, [r5, #16]
 80084b2:	e007      	b.n	80084c4 <_printf_float+0x1c8>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <_printf_float+0x1c4>
 80084b8:	2201      	movs	r2, #1
 80084ba:	6829      	ldr	r1, [r5, #0]
 80084bc:	4211      	tst	r1, r2
 80084be:	d000      	beq.n	80084c2 <_printf_float+0x1c6>
 80084c0:	1c9a      	adds	r2, r3, #2
 80084c2:	612a      	str	r2, [r5, #16]
 80084c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084c6:	2400      	movs	r4, #0
 80084c8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80084ca:	e7ce      	b.n	800846a <_printf_float+0x16e>
 80084cc:	2367      	movs	r3, #103	@ 0x67
 80084ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80084d0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80084d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084d4:	4299      	cmp	r1, r3
 80084d6:	db06      	blt.n	80084e6 <_printf_float+0x1ea>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	6129      	str	r1, [r5, #16]
 80084dc:	07db      	lsls	r3, r3, #31
 80084de:	d5f1      	bpl.n	80084c4 <_printf_float+0x1c8>
 80084e0:	3101      	adds	r1, #1
 80084e2:	6129      	str	r1, [r5, #16]
 80084e4:	e7ee      	b.n	80084c4 <_printf_float+0x1c8>
 80084e6:	2201      	movs	r2, #1
 80084e8:	2900      	cmp	r1, #0
 80084ea:	dce0      	bgt.n	80084ae <_printf_float+0x1b2>
 80084ec:	1892      	adds	r2, r2, r2
 80084ee:	1a52      	subs	r2, r2, r1
 80084f0:	e7dd      	b.n	80084ae <_printf_float+0x1b2>
 80084f2:	682a      	ldr	r2, [r5, #0]
 80084f4:	0553      	lsls	r3, r2, #21
 80084f6:	d408      	bmi.n	800850a <_printf_float+0x20e>
 80084f8:	692b      	ldr	r3, [r5, #16]
 80084fa:	003a      	movs	r2, r7
 80084fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008500:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008502:	47a0      	blx	r4
 8008504:	3001      	adds	r0, #1
 8008506:	d129      	bne.n	800855c <_printf_float+0x260>
 8008508:	e754      	b.n	80083b4 <_printf_float+0xb8>
 800850a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800850c:	2b65      	cmp	r3, #101	@ 0x65
 800850e:	d800      	bhi.n	8008512 <_printf_float+0x216>
 8008510:	e0db      	b.n	80086ca <_printf_float+0x3ce>
 8008512:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008514:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008516:	2200      	movs	r2, #0
 8008518:	2300      	movs	r3, #0
 800851a:	f7f7 ff97 	bl	800044c <__aeabi_dcmpeq>
 800851e:	2800      	cmp	r0, #0
 8008520:	d033      	beq.n	800858a <_printf_float+0x28e>
 8008522:	2301      	movs	r3, #1
 8008524:	4a37      	ldr	r2, [pc, #220]	@ (8008604 <_printf_float+0x308>)
 8008526:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008528:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800852a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800852c:	47a0      	blx	r4
 800852e:	3001      	adds	r0, #1
 8008530:	d100      	bne.n	8008534 <_printf_float+0x238>
 8008532:	e73f      	b.n	80083b4 <_printf_float+0xb8>
 8008534:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008536:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008538:	42b3      	cmp	r3, r6
 800853a:	db02      	blt.n	8008542 <_printf_float+0x246>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	07db      	lsls	r3, r3, #31
 8008540:	d50c      	bpl.n	800855c <_printf_float+0x260>
 8008542:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008546:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008548:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800854a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800854c:	47a0      	blx	r4
 800854e:	2400      	movs	r4, #0
 8008550:	3001      	adds	r0, #1
 8008552:	d100      	bne.n	8008556 <_printf_float+0x25a>
 8008554:	e72e      	b.n	80083b4 <_printf_float+0xb8>
 8008556:	1e73      	subs	r3, r6, #1
 8008558:	42a3      	cmp	r3, r4
 800855a:	dc0a      	bgt.n	8008572 <_printf_float+0x276>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	079b      	lsls	r3, r3, #30
 8008560:	d500      	bpl.n	8008564 <_printf_float+0x268>
 8008562:	e106      	b.n	8008772 <_printf_float+0x476>
 8008564:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008566:	68e8      	ldr	r0, [r5, #12]
 8008568:	4298      	cmp	r0, r3
 800856a:	db00      	blt.n	800856e <_printf_float+0x272>
 800856c:	e724      	b.n	80083b8 <_printf_float+0xbc>
 800856e:	0018      	movs	r0, r3
 8008570:	e722      	b.n	80083b8 <_printf_float+0xbc>
 8008572:	002a      	movs	r2, r5
 8008574:	2301      	movs	r3, #1
 8008576:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008578:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800857a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800857c:	321a      	adds	r2, #26
 800857e:	47b8      	blx	r7
 8008580:	3001      	adds	r0, #1
 8008582:	d100      	bne.n	8008586 <_printf_float+0x28a>
 8008584:	e716      	b.n	80083b4 <_printf_float+0xb8>
 8008586:	3401      	adds	r4, #1
 8008588:	e7e5      	b.n	8008556 <_printf_float+0x25a>
 800858a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800858c:	2b00      	cmp	r3, #0
 800858e:	dc3b      	bgt.n	8008608 <_printf_float+0x30c>
 8008590:	2301      	movs	r3, #1
 8008592:	4a1c      	ldr	r2, [pc, #112]	@ (8008604 <_printf_float+0x308>)
 8008594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008598:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800859a:	47a0      	blx	r4
 800859c:	3001      	adds	r0, #1
 800859e:	d100      	bne.n	80085a2 <_printf_float+0x2a6>
 80085a0:	e708      	b.n	80083b4 <_printf_float+0xb8>
 80085a2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80085a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085a6:	4333      	orrs	r3, r6
 80085a8:	d102      	bne.n	80085b0 <_printf_float+0x2b4>
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	07db      	lsls	r3, r3, #31
 80085ae:	d5d5      	bpl.n	800855c <_printf_float+0x260>
 80085b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80085ba:	47a0      	blx	r4
 80085bc:	2300      	movs	r3, #0
 80085be:	3001      	adds	r0, #1
 80085c0:	d100      	bne.n	80085c4 <_printf_float+0x2c8>
 80085c2:	e6f7      	b.n	80083b4 <_printf_float+0xb8>
 80085c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80085c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80085c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80085ca:	425b      	negs	r3, r3
 80085cc:	4293      	cmp	r3, r2
 80085ce:	dc01      	bgt.n	80085d4 <_printf_float+0x2d8>
 80085d0:	0033      	movs	r3, r6
 80085d2:	e792      	b.n	80084fa <_printf_float+0x1fe>
 80085d4:	002a      	movs	r2, r5
 80085d6:	2301      	movs	r3, #1
 80085d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80085de:	321a      	adds	r2, #26
 80085e0:	47a0      	blx	r4
 80085e2:	3001      	adds	r0, #1
 80085e4:	d100      	bne.n	80085e8 <_printf_float+0x2ec>
 80085e6:	e6e5      	b.n	80083b4 <_printf_float+0xb8>
 80085e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085ea:	3301      	adds	r3, #1
 80085ec:	e7ea      	b.n	80085c4 <_printf_float+0x2c8>
 80085ee:	46c0      	nop			@ (mov r8, r8)
 80085f0:	7fefffff 	.word	0x7fefffff
 80085f4:	0800aedc 	.word	0x0800aedc
 80085f8:	0800aed8 	.word	0x0800aed8
 80085fc:	0800aee4 	.word	0x0800aee4
 8008600:	0800aee0 	.word	0x0800aee0
 8008604:	0800aee8 	.word	0x0800aee8
 8008608:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800860a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800860c:	930c      	str	r3, [sp, #48]	@ 0x30
 800860e:	429e      	cmp	r6, r3
 8008610:	dd00      	ble.n	8008614 <_printf_float+0x318>
 8008612:	001e      	movs	r6, r3
 8008614:	2e00      	cmp	r6, #0
 8008616:	dc31      	bgt.n	800867c <_printf_float+0x380>
 8008618:	43f3      	mvns	r3, r6
 800861a:	2400      	movs	r4, #0
 800861c:	17db      	asrs	r3, r3, #31
 800861e:	4033      	ands	r3, r6
 8008620:	930e      	str	r3, [sp, #56]	@ 0x38
 8008622:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008626:	1af3      	subs	r3, r6, r3
 8008628:	42a3      	cmp	r3, r4
 800862a:	dc30      	bgt.n	800868e <_printf_float+0x392>
 800862c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800862e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008630:	429a      	cmp	r2, r3
 8008632:	dc38      	bgt.n	80086a6 <_printf_float+0x3aa>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	07db      	lsls	r3, r3, #31
 8008638:	d435      	bmi.n	80086a6 <_printf_float+0x3aa>
 800863a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800863c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800863e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008640:	1b9b      	subs	r3, r3, r6
 8008642:	1b14      	subs	r4, r2, r4
 8008644:	429c      	cmp	r4, r3
 8008646:	dd00      	ble.n	800864a <_printf_float+0x34e>
 8008648:	001c      	movs	r4, r3
 800864a:	2c00      	cmp	r4, #0
 800864c:	dc34      	bgt.n	80086b8 <_printf_float+0x3bc>
 800864e:	43e3      	mvns	r3, r4
 8008650:	2600      	movs	r6, #0
 8008652:	17db      	asrs	r3, r3, #31
 8008654:	401c      	ands	r4, r3
 8008656:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008658:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	1b1b      	subs	r3, r3, r4
 800865e:	42b3      	cmp	r3, r6
 8008660:	dc00      	bgt.n	8008664 <_printf_float+0x368>
 8008662:	e77b      	b.n	800855c <_printf_float+0x260>
 8008664:	002a      	movs	r2, r5
 8008666:	2301      	movs	r3, #1
 8008668:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800866a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800866c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800866e:	321a      	adds	r2, #26
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	d100      	bne.n	8008678 <_printf_float+0x37c>
 8008676:	e69d      	b.n	80083b4 <_printf_float+0xb8>
 8008678:	3601      	adds	r6, #1
 800867a:	e7ec      	b.n	8008656 <_printf_float+0x35a>
 800867c:	0033      	movs	r3, r6
 800867e:	003a      	movs	r2, r7
 8008680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008684:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008686:	47a0      	blx	r4
 8008688:	3001      	adds	r0, #1
 800868a:	d1c5      	bne.n	8008618 <_printf_float+0x31c>
 800868c:	e692      	b.n	80083b4 <_printf_float+0xb8>
 800868e:	002a      	movs	r2, r5
 8008690:	2301      	movs	r3, #1
 8008692:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008694:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008696:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008698:	321a      	adds	r2, #26
 800869a:	47b0      	blx	r6
 800869c:	3001      	adds	r0, #1
 800869e:	d100      	bne.n	80086a2 <_printf_float+0x3a6>
 80086a0:	e688      	b.n	80083b4 <_printf_float+0xb8>
 80086a2:	3401      	adds	r4, #1
 80086a4:	e7bd      	b.n	8008622 <_printf_float+0x326>
 80086a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80086b0:	47a0      	blx	r4
 80086b2:	3001      	adds	r0, #1
 80086b4:	d1c1      	bne.n	800863a <_printf_float+0x33e>
 80086b6:	e67d      	b.n	80083b4 <_printf_float+0xb8>
 80086b8:	19ba      	adds	r2, r7, r6
 80086ba:	0023      	movs	r3, r4
 80086bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086c0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80086c2:	47b0      	blx	r6
 80086c4:	3001      	adds	r0, #1
 80086c6:	d1c2      	bne.n	800864e <_printf_float+0x352>
 80086c8:	e674      	b.n	80083b4 <_printf_float+0xb8>
 80086ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	dc02      	bgt.n	80086d8 <_printf_float+0x3dc>
 80086d2:	2301      	movs	r3, #1
 80086d4:	421a      	tst	r2, r3
 80086d6:	d039      	beq.n	800874c <_printf_float+0x450>
 80086d8:	2301      	movs	r3, #1
 80086da:	003a      	movs	r2, r7
 80086dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80086e2:	47b0      	blx	r6
 80086e4:	3001      	adds	r0, #1
 80086e6:	d100      	bne.n	80086ea <_printf_float+0x3ee>
 80086e8:	e664      	b.n	80083b4 <_printf_float+0xb8>
 80086ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086f2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80086f4:	47b0      	blx	r6
 80086f6:	3001      	adds	r0, #1
 80086f8:	d100      	bne.n	80086fc <_printf_float+0x400>
 80086fa:	e65b      	b.n	80083b4 <_printf_float+0xb8>
 80086fc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80086fe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008702:	2200      	movs	r2, #0
 8008704:	3b01      	subs	r3, #1
 8008706:	930c      	str	r3, [sp, #48]	@ 0x30
 8008708:	2300      	movs	r3, #0
 800870a:	f7f7 fe9f 	bl	800044c <__aeabi_dcmpeq>
 800870e:	2800      	cmp	r0, #0
 8008710:	d11a      	bne.n	8008748 <_printf_float+0x44c>
 8008712:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008714:	1c7a      	adds	r2, r7, #1
 8008716:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008718:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800871a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800871c:	47b0      	blx	r6
 800871e:	3001      	adds	r0, #1
 8008720:	d10e      	bne.n	8008740 <_printf_float+0x444>
 8008722:	e647      	b.n	80083b4 <_printf_float+0xb8>
 8008724:	002a      	movs	r2, r5
 8008726:	2301      	movs	r3, #1
 8008728:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800872a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800872c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800872e:	321a      	adds	r2, #26
 8008730:	47b8      	blx	r7
 8008732:	3001      	adds	r0, #1
 8008734:	d100      	bne.n	8008738 <_printf_float+0x43c>
 8008736:	e63d      	b.n	80083b4 <_printf_float+0xb8>
 8008738:	3601      	adds	r6, #1
 800873a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800873c:	429e      	cmp	r6, r3
 800873e:	dbf1      	blt.n	8008724 <_printf_float+0x428>
 8008740:	002a      	movs	r2, r5
 8008742:	0023      	movs	r3, r4
 8008744:	3250      	adds	r2, #80	@ 0x50
 8008746:	e6d9      	b.n	80084fc <_printf_float+0x200>
 8008748:	2600      	movs	r6, #0
 800874a:	e7f6      	b.n	800873a <_printf_float+0x43e>
 800874c:	003a      	movs	r2, r7
 800874e:	e7e2      	b.n	8008716 <_printf_float+0x41a>
 8008750:	002a      	movs	r2, r5
 8008752:	2301      	movs	r3, #1
 8008754:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008758:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800875a:	3219      	adds	r2, #25
 800875c:	47b0      	blx	r6
 800875e:	3001      	adds	r0, #1
 8008760:	d100      	bne.n	8008764 <_printf_float+0x468>
 8008762:	e627      	b.n	80083b4 <_printf_float+0xb8>
 8008764:	3401      	adds	r4, #1
 8008766:	68eb      	ldr	r3, [r5, #12]
 8008768:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	42a3      	cmp	r3, r4
 800876e:	dcef      	bgt.n	8008750 <_printf_float+0x454>
 8008770:	e6f8      	b.n	8008564 <_printf_float+0x268>
 8008772:	2400      	movs	r4, #0
 8008774:	e7f7      	b.n	8008766 <_printf_float+0x46a>
 8008776:	46c0      	nop			@ (mov r8, r8)

08008778 <_printf_common>:
 8008778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800877a:	0016      	movs	r6, r2
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	688a      	ldr	r2, [r1, #8]
 8008780:	690b      	ldr	r3, [r1, #16]
 8008782:	000c      	movs	r4, r1
 8008784:	9000      	str	r0, [sp, #0]
 8008786:	4293      	cmp	r3, r2
 8008788:	da00      	bge.n	800878c <_printf_common+0x14>
 800878a:	0013      	movs	r3, r2
 800878c:	0022      	movs	r2, r4
 800878e:	6033      	str	r3, [r6, #0]
 8008790:	3243      	adds	r2, #67	@ 0x43
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	2a00      	cmp	r2, #0
 8008796:	d001      	beq.n	800879c <_printf_common+0x24>
 8008798:	3301      	adds	r3, #1
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	069b      	lsls	r3, r3, #26
 80087a0:	d502      	bpl.n	80087a8 <_printf_common+0x30>
 80087a2:	6833      	ldr	r3, [r6, #0]
 80087a4:	3302      	adds	r3, #2
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	2306      	movs	r3, #6
 80087ac:	0015      	movs	r5, r2
 80087ae:	401d      	ands	r5, r3
 80087b0:	421a      	tst	r2, r3
 80087b2:	d027      	beq.n	8008804 <_printf_common+0x8c>
 80087b4:	0023      	movs	r3, r4
 80087b6:	3343      	adds	r3, #67	@ 0x43
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	1e5a      	subs	r2, r3, #1
 80087bc:	4193      	sbcs	r3, r2
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	0692      	lsls	r2, r2, #26
 80087c2:	d430      	bmi.n	8008826 <_printf_common+0xae>
 80087c4:	0022      	movs	r2, r4
 80087c6:	9901      	ldr	r1, [sp, #4]
 80087c8:	9800      	ldr	r0, [sp, #0]
 80087ca:	9d08      	ldr	r5, [sp, #32]
 80087cc:	3243      	adds	r2, #67	@ 0x43
 80087ce:	47a8      	blx	r5
 80087d0:	3001      	adds	r0, #1
 80087d2:	d025      	beq.n	8008820 <_printf_common+0xa8>
 80087d4:	2206      	movs	r2, #6
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	2500      	movs	r5, #0
 80087da:	4013      	ands	r3, r2
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d105      	bne.n	80087ec <_printf_common+0x74>
 80087e0:	6833      	ldr	r3, [r6, #0]
 80087e2:	68e5      	ldr	r5, [r4, #12]
 80087e4:	1aed      	subs	r5, r5, r3
 80087e6:	43eb      	mvns	r3, r5
 80087e8:	17db      	asrs	r3, r3, #31
 80087ea:	401d      	ands	r5, r3
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	6922      	ldr	r2, [r4, #16]
 80087f0:	4293      	cmp	r3, r2
 80087f2:	dd01      	ble.n	80087f8 <_printf_common+0x80>
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	18ed      	adds	r5, r5, r3
 80087f8:	2600      	movs	r6, #0
 80087fa:	42b5      	cmp	r5, r6
 80087fc:	d120      	bne.n	8008840 <_printf_common+0xc8>
 80087fe:	2000      	movs	r0, #0
 8008800:	e010      	b.n	8008824 <_printf_common+0xac>
 8008802:	3501      	adds	r5, #1
 8008804:	68e3      	ldr	r3, [r4, #12]
 8008806:	6832      	ldr	r2, [r6, #0]
 8008808:	1a9b      	subs	r3, r3, r2
 800880a:	42ab      	cmp	r3, r5
 800880c:	ddd2      	ble.n	80087b4 <_printf_common+0x3c>
 800880e:	0022      	movs	r2, r4
 8008810:	2301      	movs	r3, #1
 8008812:	9901      	ldr	r1, [sp, #4]
 8008814:	9800      	ldr	r0, [sp, #0]
 8008816:	9f08      	ldr	r7, [sp, #32]
 8008818:	3219      	adds	r2, #25
 800881a:	47b8      	blx	r7
 800881c:	3001      	adds	r0, #1
 800881e:	d1f0      	bne.n	8008802 <_printf_common+0x8a>
 8008820:	2001      	movs	r0, #1
 8008822:	4240      	negs	r0, r0
 8008824:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008826:	2030      	movs	r0, #48	@ 0x30
 8008828:	18e1      	adds	r1, r4, r3
 800882a:	3143      	adds	r1, #67	@ 0x43
 800882c:	7008      	strb	r0, [r1, #0]
 800882e:	0021      	movs	r1, r4
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	3145      	adds	r1, #69	@ 0x45
 8008834:	7809      	ldrb	r1, [r1, #0]
 8008836:	18a2      	adds	r2, r4, r2
 8008838:	3243      	adds	r2, #67	@ 0x43
 800883a:	3302      	adds	r3, #2
 800883c:	7011      	strb	r1, [r2, #0]
 800883e:	e7c1      	b.n	80087c4 <_printf_common+0x4c>
 8008840:	0022      	movs	r2, r4
 8008842:	2301      	movs	r3, #1
 8008844:	9901      	ldr	r1, [sp, #4]
 8008846:	9800      	ldr	r0, [sp, #0]
 8008848:	9f08      	ldr	r7, [sp, #32]
 800884a:	321a      	adds	r2, #26
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	d0e6      	beq.n	8008820 <_printf_common+0xa8>
 8008852:	3601      	adds	r6, #1
 8008854:	e7d1      	b.n	80087fa <_printf_common+0x82>
	...

08008858 <_printf_i>:
 8008858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885a:	b08b      	sub	sp, #44	@ 0x2c
 800885c:	9206      	str	r2, [sp, #24]
 800885e:	000a      	movs	r2, r1
 8008860:	3243      	adds	r2, #67	@ 0x43
 8008862:	9307      	str	r3, [sp, #28]
 8008864:	9005      	str	r0, [sp, #20]
 8008866:	9203      	str	r2, [sp, #12]
 8008868:	7e0a      	ldrb	r2, [r1, #24]
 800886a:	000c      	movs	r4, r1
 800886c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800886e:	2a78      	cmp	r2, #120	@ 0x78
 8008870:	d809      	bhi.n	8008886 <_printf_i+0x2e>
 8008872:	2a62      	cmp	r2, #98	@ 0x62
 8008874:	d80b      	bhi.n	800888e <_printf_i+0x36>
 8008876:	2a00      	cmp	r2, #0
 8008878:	d100      	bne.n	800887c <_printf_i+0x24>
 800887a:	e0ba      	b.n	80089f2 <_printf_i+0x19a>
 800887c:	497a      	ldr	r1, [pc, #488]	@ (8008a68 <_printf_i+0x210>)
 800887e:	9104      	str	r1, [sp, #16]
 8008880:	2a58      	cmp	r2, #88	@ 0x58
 8008882:	d100      	bne.n	8008886 <_printf_i+0x2e>
 8008884:	e08e      	b.n	80089a4 <_printf_i+0x14c>
 8008886:	0025      	movs	r5, r4
 8008888:	3542      	adds	r5, #66	@ 0x42
 800888a:	702a      	strb	r2, [r5, #0]
 800888c:	e022      	b.n	80088d4 <_printf_i+0x7c>
 800888e:	0010      	movs	r0, r2
 8008890:	3863      	subs	r0, #99	@ 0x63
 8008892:	2815      	cmp	r0, #21
 8008894:	d8f7      	bhi.n	8008886 <_printf_i+0x2e>
 8008896:	f7f7 fc49 	bl	800012c <__gnu_thumb1_case_shi>
 800889a:	0016      	.short	0x0016
 800889c:	fff6001f 	.word	0xfff6001f
 80088a0:	fff6fff6 	.word	0xfff6fff6
 80088a4:	001ffff6 	.word	0x001ffff6
 80088a8:	fff6fff6 	.word	0xfff6fff6
 80088ac:	fff6fff6 	.word	0xfff6fff6
 80088b0:	0036009f 	.word	0x0036009f
 80088b4:	fff6007e 	.word	0xfff6007e
 80088b8:	00b0fff6 	.word	0x00b0fff6
 80088bc:	0036fff6 	.word	0x0036fff6
 80088c0:	fff6fff6 	.word	0xfff6fff6
 80088c4:	0082      	.short	0x0082
 80088c6:	0025      	movs	r5, r4
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	3542      	adds	r5, #66	@ 0x42
 80088cc:	1d11      	adds	r1, r2, #4
 80088ce:	6019      	str	r1, [r3, #0]
 80088d0:	6813      	ldr	r3, [r2, #0]
 80088d2:	702b      	strb	r3, [r5, #0]
 80088d4:	2301      	movs	r3, #1
 80088d6:	e09e      	b.n	8008a16 <_printf_i+0x1be>
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	6809      	ldr	r1, [r1, #0]
 80088dc:	1d02      	adds	r2, r0, #4
 80088de:	060d      	lsls	r5, r1, #24
 80088e0:	d50b      	bpl.n	80088fa <_printf_i+0xa2>
 80088e2:	6806      	ldr	r6, [r0, #0]
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	da03      	bge.n	80088f2 <_printf_i+0x9a>
 80088ea:	232d      	movs	r3, #45	@ 0x2d
 80088ec:	9a03      	ldr	r2, [sp, #12]
 80088ee:	4276      	negs	r6, r6
 80088f0:	7013      	strb	r3, [r2, #0]
 80088f2:	4b5d      	ldr	r3, [pc, #372]	@ (8008a68 <_printf_i+0x210>)
 80088f4:	270a      	movs	r7, #10
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	e018      	b.n	800892c <_printf_i+0xd4>
 80088fa:	6806      	ldr	r6, [r0, #0]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	0649      	lsls	r1, r1, #25
 8008900:	d5f1      	bpl.n	80088e6 <_printf_i+0x8e>
 8008902:	b236      	sxth	r6, r6
 8008904:	e7ef      	b.n	80088e6 <_printf_i+0x8e>
 8008906:	6808      	ldr	r0, [r1, #0]
 8008908:	6819      	ldr	r1, [r3, #0]
 800890a:	c940      	ldmia	r1!, {r6}
 800890c:	0605      	lsls	r5, r0, #24
 800890e:	d402      	bmi.n	8008916 <_printf_i+0xbe>
 8008910:	0640      	lsls	r0, r0, #25
 8008912:	d500      	bpl.n	8008916 <_printf_i+0xbe>
 8008914:	b2b6      	uxth	r6, r6
 8008916:	6019      	str	r1, [r3, #0]
 8008918:	4b53      	ldr	r3, [pc, #332]	@ (8008a68 <_printf_i+0x210>)
 800891a:	270a      	movs	r7, #10
 800891c:	9304      	str	r3, [sp, #16]
 800891e:	2a6f      	cmp	r2, #111	@ 0x6f
 8008920:	d100      	bne.n	8008924 <_printf_i+0xcc>
 8008922:	3f02      	subs	r7, #2
 8008924:	0023      	movs	r3, r4
 8008926:	2200      	movs	r2, #0
 8008928:	3343      	adds	r3, #67	@ 0x43
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	6863      	ldr	r3, [r4, #4]
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	db06      	blt.n	8008942 <_printf_i+0xea>
 8008934:	2104      	movs	r1, #4
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	9d03      	ldr	r5, [sp, #12]
 800893a:	438a      	bics	r2, r1
 800893c:	6022      	str	r2, [r4, #0]
 800893e:	4333      	orrs	r3, r6
 8008940:	d00c      	beq.n	800895c <_printf_i+0x104>
 8008942:	9d03      	ldr	r5, [sp, #12]
 8008944:	0030      	movs	r0, r6
 8008946:	0039      	movs	r1, r7
 8008948:	f7f7 fc80 	bl	800024c <__aeabi_uidivmod>
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	3d01      	subs	r5, #1
 8008950:	5c5b      	ldrb	r3, [r3, r1]
 8008952:	702b      	strb	r3, [r5, #0]
 8008954:	0033      	movs	r3, r6
 8008956:	0006      	movs	r6, r0
 8008958:	429f      	cmp	r7, r3
 800895a:	d9f3      	bls.n	8008944 <_printf_i+0xec>
 800895c:	2f08      	cmp	r7, #8
 800895e:	d109      	bne.n	8008974 <_printf_i+0x11c>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	07db      	lsls	r3, r3, #31
 8008964:	d506      	bpl.n	8008974 <_printf_i+0x11c>
 8008966:	6862      	ldr	r2, [r4, #4]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	429a      	cmp	r2, r3
 800896c:	dc02      	bgt.n	8008974 <_printf_i+0x11c>
 800896e:	2330      	movs	r3, #48	@ 0x30
 8008970:	3d01      	subs	r5, #1
 8008972:	702b      	strb	r3, [r5, #0]
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	1b5b      	subs	r3, r3, r5
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	9b07      	ldr	r3, [sp, #28]
 800897c:	0021      	movs	r1, r4
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	9805      	ldr	r0, [sp, #20]
 8008982:	9b06      	ldr	r3, [sp, #24]
 8008984:	aa09      	add	r2, sp, #36	@ 0x24
 8008986:	f7ff fef7 	bl	8008778 <_printf_common>
 800898a:	3001      	adds	r0, #1
 800898c:	d148      	bne.n	8008a20 <_printf_i+0x1c8>
 800898e:	2001      	movs	r0, #1
 8008990:	4240      	negs	r0, r0
 8008992:	b00b      	add	sp, #44	@ 0x2c
 8008994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008996:	2220      	movs	r2, #32
 8008998:	6809      	ldr	r1, [r1, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	2278      	movs	r2, #120	@ 0x78
 80089a0:	4932      	ldr	r1, [pc, #200]	@ (8008a6c <_printf_i+0x214>)
 80089a2:	9104      	str	r1, [sp, #16]
 80089a4:	0021      	movs	r1, r4
 80089a6:	3145      	adds	r1, #69	@ 0x45
 80089a8:	700a      	strb	r2, [r1, #0]
 80089aa:	6819      	ldr	r1, [r3, #0]
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	c940      	ldmia	r1!, {r6}
 80089b0:	0610      	lsls	r0, r2, #24
 80089b2:	d402      	bmi.n	80089ba <_printf_i+0x162>
 80089b4:	0650      	lsls	r0, r2, #25
 80089b6:	d500      	bpl.n	80089ba <_printf_i+0x162>
 80089b8:	b2b6      	uxth	r6, r6
 80089ba:	6019      	str	r1, [r3, #0]
 80089bc:	07d3      	lsls	r3, r2, #31
 80089be:	d502      	bpl.n	80089c6 <_printf_i+0x16e>
 80089c0:	2320      	movs	r3, #32
 80089c2:	4313      	orrs	r3, r2
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	d001      	beq.n	80089ce <_printf_i+0x176>
 80089ca:	2710      	movs	r7, #16
 80089cc:	e7aa      	b.n	8008924 <_printf_i+0xcc>
 80089ce:	2220      	movs	r2, #32
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	4393      	bics	r3, r2
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	e7f8      	b.n	80089ca <_printf_i+0x172>
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	680d      	ldr	r5, [r1, #0]
 80089dc:	1d10      	adds	r0, r2, #4
 80089de:	6949      	ldr	r1, [r1, #20]
 80089e0:	6018      	str	r0, [r3, #0]
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	062e      	lsls	r6, r5, #24
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0x194>
 80089e8:	6019      	str	r1, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0x19a>
 80089ec:	066d      	lsls	r5, r5, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0x190>
 80089f0:	8019      	strh	r1, [r3, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	9d03      	ldr	r5, [sp, #12]
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	e7bf      	b.n	800897a <_printf_i+0x122>
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	1d11      	adds	r1, r2, #4
 80089fe:	6019      	str	r1, [r3, #0]
 8008a00:	6815      	ldr	r5, [r2, #0]
 8008a02:	2100      	movs	r1, #0
 8008a04:	0028      	movs	r0, r5
 8008a06:	6862      	ldr	r2, [r4, #4]
 8008a08:	f000 fad9 	bl	8008fbe <memchr>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	d001      	beq.n	8008a14 <_printf_i+0x1bc>
 8008a10:	1b40      	subs	r0, r0, r5
 8008a12:	6060      	str	r0, [r4, #4]
 8008a14:	6863      	ldr	r3, [r4, #4]
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	9a03      	ldr	r2, [sp, #12]
 8008a1c:	7013      	strb	r3, [r2, #0]
 8008a1e:	e7ac      	b.n	800897a <_printf_i+0x122>
 8008a20:	002a      	movs	r2, r5
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	9906      	ldr	r1, [sp, #24]
 8008a26:	9805      	ldr	r0, [sp, #20]
 8008a28:	9d07      	ldr	r5, [sp, #28]
 8008a2a:	47a8      	blx	r5
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d0ae      	beq.n	800898e <_printf_i+0x136>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	079b      	lsls	r3, r3, #30
 8008a34:	d415      	bmi.n	8008a62 <_printf_i+0x20a>
 8008a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a38:	68e0      	ldr	r0, [r4, #12]
 8008a3a:	4298      	cmp	r0, r3
 8008a3c:	daa9      	bge.n	8008992 <_printf_i+0x13a>
 8008a3e:	0018      	movs	r0, r3
 8008a40:	e7a7      	b.n	8008992 <_printf_i+0x13a>
 8008a42:	0022      	movs	r2, r4
 8008a44:	2301      	movs	r3, #1
 8008a46:	9906      	ldr	r1, [sp, #24]
 8008a48:	9805      	ldr	r0, [sp, #20]
 8008a4a:	9e07      	ldr	r6, [sp, #28]
 8008a4c:	3219      	adds	r2, #25
 8008a4e:	47b0      	blx	r6
 8008a50:	3001      	adds	r0, #1
 8008a52:	d09c      	beq.n	800898e <_printf_i+0x136>
 8008a54:	3501      	adds	r5, #1
 8008a56:	68e3      	ldr	r3, [r4, #12]
 8008a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	42ab      	cmp	r3, r5
 8008a5e:	dcf0      	bgt.n	8008a42 <_printf_i+0x1ea>
 8008a60:	e7e9      	b.n	8008a36 <_printf_i+0x1de>
 8008a62:	2500      	movs	r5, #0
 8008a64:	e7f7      	b.n	8008a56 <_printf_i+0x1fe>
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	0800aeea 	.word	0x0800aeea
 8008a6c:	0800aefb 	.word	0x0800aefb

08008a70 <std>:
 8008a70:	2300      	movs	r3, #0
 8008a72:	b510      	push	{r4, lr}
 8008a74:	0004      	movs	r4, r0
 8008a76:	6003      	str	r3, [r0, #0]
 8008a78:	6043      	str	r3, [r0, #4]
 8008a7a:	6083      	str	r3, [r0, #8]
 8008a7c:	8181      	strh	r1, [r0, #12]
 8008a7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a80:	81c2      	strh	r2, [r0, #14]
 8008a82:	6103      	str	r3, [r0, #16]
 8008a84:	6143      	str	r3, [r0, #20]
 8008a86:	6183      	str	r3, [r0, #24]
 8008a88:	0019      	movs	r1, r3
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	305c      	adds	r0, #92	@ 0x5c
 8008a8e:	f000 fa0f 	bl	8008eb0 <memset>
 8008a92:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac0 <std+0x50>)
 8008a94:	6224      	str	r4, [r4, #32]
 8008a96:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <std+0x54>)
 8008a9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac8 <std+0x58>)
 8008a9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8008acc <std+0x5c>)
 8008aa2:	6323      	str	r3, [r4, #48]	@ 0x30
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad0 <std+0x60>)
 8008aa6:	429c      	cmp	r4, r3
 8008aa8:	d005      	beq.n	8008ab6 <std+0x46>
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <std+0x64>)
 8008aac:	429c      	cmp	r4, r3
 8008aae:	d002      	beq.n	8008ab6 <std+0x46>
 8008ab0:	4b09      	ldr	r3, [pc, #36]	@ (8008ad8 <std+0x68>)
 8008ab2:	429c      	cmp	r4, r3
 8008ab4:	d103      	bne.n	8008abe <std+0x4e>
 8008ab6:	0020      	movs	r0, r4
 8008ab8:	3058      	adds	r0, #88	@ 0x58
 8008aba:	f000 fa7d 	bl	8008fb8 <__retarget_lock_init_recursive>
 8008abe:	bd10      	pop	{r4, pc}
 8008ac0:	08008cd9 	.word	0x08008cd9
 8008ac4:	08008d01 	.word	0x08008d01
 8008ac8:	08008d39 	.word	0x08008d39
 8008acc:	08008d65 	.word	0x08008d65
 8008ad0:	200003bc 	.word	0x200003bc
 8008ad4:	20000424 	.word	0x20000424
 8008ad8:	2000048c 	.word	0x2000048c

08008adc <stdio_exit_handler>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4a03      	ldr	r2, [pc, #12]	@ (8008aec <stdio_exit_handler+0x10>)
 8008ae0:	4903      	ldr	r1, [pc, #12]	@ (8008af0 <stdio_exit_handler+0x14>)
 8008ae2:	4804      	ldr	r0, [pc, #16]	@ (8008af4 <stdio_exit_handler+0x18>)
 8008ae4:	f000 f86c 	bl	8008bc0 <_fwalk_sglue>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	46c0      	nop			@ (mov r8, r8)
 8008aec:	2000000c 	.word	0x2000000c
 8008af0:	0800a999 	.word	0x0800a999
 8008af4:	2000001c 	.word	0x2000001c

08008af8 <cleanup_stdio>:
 8008af8:	6841      	ldr	r1, [r0, #4]
 8008afa:	4b0b      	ldr	r3, [pc, #44]	@ (8008b28 <cleanup_stdio+0x30>)
 8008afc:	b510      	push	{r4, lr}
 8008afe:	0004      	movs	r4, r0
 8008b00:	4299      	cmp	r1, r3
 8008b02:	d001      	beq.n	8008b08 <cleanup_stdio+0x10>
 8008b04:	f001 ff48 	bl	800a998 <_fflush_r>
 8008b08:	68a1      	ldr	r1, [r4, #8]
 8008b0a:	4b08      	ldr	r3, [pc, #32]	@ (8008b2c <cleanup_stdio+0x34>)
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d002      	beq.n	8008b16 <cleanup_stdio+0x1e>
 8008b10:	0020      	movs	r0, r4
 8008b12:	f001 ff41 	bl	800a998 <_fflush_r>
 8008b16:	68e1      	ldr	r1, [r4, #12]
 8008b18:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <cleanup_stdio+0x38>)
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	d002      	beq.n	8008b24 <cleanup_stdio+0x2c>
 8008b1e:	0020      	movs	r0, r4
 8008b20:	f001 ff3a 	bl	800a998 <_fflush_r>
 8008b24:	bd10      	pop	{r4, pc}
 8008b26:	46c0      	nop			@ (mov r8, r8)
 8008b28:	200003bc 	.word	0x200003bc
 8008b2c:	20000424 	.word	0x20000424
 8008b30:	2000048c 	.word	0x2000048c

08008b34 <global_stdio_init.part.0>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <global_stdio_init.part.0+0x28>)
 8008b38:	4a09      	ldr	r2, [pc, #36]	@ (8008b60 <global_stdio_init.part.0+0x2c>)
 8008b3a:	2104      	movs	r1, #4
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	4809      	ldr	r0, [pc, #36]	@ (8008b64 <global_stdio_init.part.0+0x30>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	f7ff ff95 	bl	8008a70 <std>
 8008b46:	2201      	movs	r2, #1
 8008b48:	2109      	movs	r1, #9
 8008b4a:	4807      	ldr	r0, [pc, #28]	@ (8008b68 <global_stdio_init.part.0+0x34>)
 8008b4c:	f7ff ff90 	bl	8008a70 <std>
 8008b50:	2202      	movs	r2, #2
 8008b52:	2112      	movs	r1, #18
 8008b54:	4805      	ldr	r0, [pc, #20]	@ (8008b6c <global_stdio_init.part.0+0x38>)
 8008b56:	f7ff ff8b 	bl	8008a70 <std>
 8008b5a:	bd10      	pop	{r4, pc}
 8008b5c:	200004f4 	.word	0x200004f4
 8008b60:	08008add 	.word	0x08008add
 8008b64:	200003bc 	.word	0x200003bc
 8008b68:	20000424 	.word	0x20000424
 8008b6c:	2000048c 	.word	0x2000048c

08008b70 <__sfp_lock_acquire>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	4802      	ldr	r0, [pc, #8]	@ (8008b7c <__sfp_lock_acquire+0xc>)
 8008b74:	f000 fa21 	bl	8008fba <__retarget_lock_acquire_recursive>
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	200004fd 	.word	0x200004fd

08008b80 <__sfp_lock_release>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	4802      	ldr	r0, [pc, #8]	@ (8008b8c <__sfp_lock_release+0xc>)
 8008b84:	f000 fa1a 	bl	8008fbc <__retarget_lock_release_recursive>
 8008b88:	bd10      	pop	{r4, pc}
 8008b8a:	46c0      	nop			@ (mov r8, r8)
 8008b8c:	200004fd 	.word	0x200004fd

08008b90 <__sinit>:
 8008b90:	b510      	push	{r4, lr}
 8008b92:	0004      	movs	r4, r0
 8008b94:	f7ff ffec 	bl	8008b70 <__sfp_lock_acquire>
 8008b98:	6a23      	ldr	r3, [r4, #32]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <__sinit+0x14>
 8008b9e:	f7ff ffef 	bl	8008b80 <__sfp_lock_release>
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	4b04      	ldr	r3, [pc, #16]	@ (8008bb8 <__sinit+0x28>)
 8008ba6:	6223      	str	r3, [r4, #32]
 8008ba8:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <__sinit+0x2c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1f6      	bne.n	8008b9e <__sinit+0xe>
 8008bb0:	f7ff ffc0 	bl	8008b34 <global_stdio_init.part.0>
 8008bb4:	e7f3      	b.n	8008b9e <__sinit+0xe>
 8008bb6:	46c0      	nop			@ (mov r8, r8)
 8008bb8:	08008af9 	.word	0x08008af9
 8008bbc:	200004f4 	.word	0x200004f4

08008bc0 <_fwalk_sglue>:
 8008bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc2:	0014      	movs	r4, r2
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	9000      	str	r0, [sp, #0]
 8008bc8:	9101      	str	r1, [sp, #4]
 8008bca:	68a5      	ldr	r5, [r4, #8]
 8008bcc:	6867      	ldr	r7, [r4, #4]
 8008bce:	3f01      	subs	r7, #1
 8008bd0:	d504      	bpl.n	8008bdc <_fwalk_sglue+0x1c>
 8008bd2:	6824      	ldr	r4, [r4, #0]
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	d1f8      	bne.n	8008bca <_fwalk_sglue+0xa>
 8008bd8:	0030      	movs	r0, r6
 8008bda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bdc:	89ab      	ldrh	r3, [r5, #12]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d908      	bls.n	8008bf4 <_fwalk_sglue+0x34>
 8008be2:	220e      	movs	r2, #14
 8008be4:	5eab      	ldrsh	r3, [r5, r2]
 8008be6:	3301      	adds	r3, #1
 8008be8:	d004      	beq.n	8008bf4 <_fwalk_sglue+0x34>
 8008bea:	0029      	movs	r1, r5
 8008bec:	9800      	ldr	r0, [sp, #0]
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	4798      	blx	r3
 8008bf2:	4306      	orrs	r6, r0
 8008bf4:	3568      	adds	r5, #104	@ 0x68
 8008bf6:	e7ea      	b.n	8008bce <_fwalk_sglue+0xe>

08008bf8 <iprintf>:
 8008bf8:	b40f      	push	{r0, r1, r2, r3}
 8008bfa:	b507      	push	{r0, r1, r2, lr}
 8008bfc:	4905      	ldr	r1, [pc, #20]	@ (8008c14 <iprintf+0x1c>)
 8008bfe:	ab04      	add	r3, sp, #16
 8008c00:	6808      	ldr	r0, [r1, #0]
 8008c02:	cb04      	ldmia	r3!, {r2}
 8008c04:	6881      	ldr	r1, [r0, #8]
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	f001 fd24 	bl	800a654 <_vfiprintf_r>
 8008c0c:	b003      	add	sp, #12
 8008c0e:	bc08      	pop	{r3}
 8008c10:	b004      	add	sp, #16
 8008c12:	4718      	bx	r3
 8008c14:	20000018 	.word	0x20000018

08008c18 <_puts_r>:
 8008c18:	6a03      	ldr	r3, [r0, #32]
 8008c1a:	b570      	push	{r4, r5, r6, lr}
 8008c1c:	0005      	movs	r5, r0
 8008c1e:	000e      	movs	r6, r1
 8008c20:	6884      	ldr	r4, [r0, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <_puts_r+0x12>
 8008c26:	f7ff ffb3 	bl	8008b90 <__sinit>
 8008c2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c2c:	07db      	lsls	r3, r3, #31
 8008c2e:	d405      	bmi.n	8008c3c <_puts_r+0x24>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	059b      	lsls	r3, r3, #22
 8008c34:	d402      	bmi.n	8008c3c <_puts_r+0x24>
 8008c36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c38:	f000 f9bf 	bl	8008fba <__retarget_lock_acquire_recursive>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	071b      	lsls	r3, r3, #28
 8008c40:	d502      	bpl.n	8008c48 <_puts_r+0x30>
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11f      	bne.n	8008c88 <_puts_r+0x70>
 8008c48:	0021      	movs	r1, r4
 8008c4a:	0028      	movs	r0, r5
 8008c4c:	f000 f8d2 	bl	8008df4 <__swsetup_r>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d019      	beq.n	8008c88 <_puts_r+0x70>
 8008c54:	2501      	movs	r5, #1
 8008c56:	426d      	negs	r5, r5
 8008c58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c5a:	07db      	lsls	r3, r3, #31
 8008c5c:	d405      	bmi.n	8008c6a <_puts_r+0x52>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	059b      	lsls	r3, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_puts_r+0x52>
 8008c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c66:	f000 f9a9 	bl	8008fbc <__retarget_lock_release_recursive>
 8008c6a:	0028      	movs	r0, r5
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	3601      	adds	r6, #1
 8008c70:	60a3      	str	r3, [r4, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da04      	bge.n	8008c80 <_puts_r+0x68>
 8008c76:	69a2      	ldr	r2, [r4, #24]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	dc16      	bgt.n	8008caa <_puts_r+0x92>
 8008c7c:	290a      	cmp	r1, #10
 8008c7e:	d014      	beq.n	8008caa <_puts_r+0x92>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	7019      	strb	r1, [r3, #0]
 8008c88:	68a3      	ldr	r3, [r4, #8]
 8008c8a:	7831      	ldrb	r1, [r6, #0]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d1ed      	bne.n	8008c6e <_puts_r+0x56>
 8008c92:	60a3      	str	r3, [r4, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da0f      	bge.n	8008cb8 <_puts_r+0xa0>
 8008c98:	0022      	movs	r2, r4
 8008c9a:	0028      	movs	r0, r5
 8008c9c:	310a      	adds	r1, #10
 8008c9e:	f000 f867 	bl	8008d70 <__swbuf_r>
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	d0d6      	beq.n	8008c54 <_puts_r+0x3c>
 8008ca6:	250a      	movs	r5, #10
 8008ca8:	e7d6      	b.n	8008c58 <_puts_r+0x40>
 8008caa:	0022      	movs	r2, r4
 8008cac:	0028      	movs	r0, r5
 8008cae:	f000 f85f 	bl	8008d70 <__swbuf_r>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d1e8      	bne.n	8008c88 <_puts_r+0x70>
 8008cb6:	e7cd      	b.n	8008c54 <_puts_r+0x3c>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	6022      	str	r2, [r4, #0]
 8008cbe:	220a      	movs	r2, #10
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	e7f0      	b.n	8008ca6 <_puts_r+0x8e>

08008cc4 <puts>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	4b03      	ldr	r3, [pc, #12]	@ (8008cd4 <puts+0x10>)
 8008cc8:	0001      	movs	r1, r0
 8008cca:	6818      	ldr	r0, [r3, #0]
 8008ccc:	f7ff ffa4 	bl	8008c18 <_puts_r>
 8008cd0:	bd10      	pop	{r4, pc}
 8008cd2:	46c0      	nop			@ (mov r8, r8)
 8008cd4:	20000018 	.word	0x20000018

08008cd8 <__sread>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	000c      	movs	r4, r1
 8008cdc:	250e      	movs	r5, #14
 8008cde:	5f49      	ldrsh	r1, [r1, r5]
 8008ce0:	f000 f918 	bl	8008f14 <_read_r>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	db03      	blt.n	8008cf0 <__sread+0x18>
 8008ce8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008cea:	181b      	adds	r3, r3, r0
 8008cec:	6563      	str	r3, [r4, #84]	@ 0x54
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	4a02      	ldr	r2, [pc, #8]	@ (8008cfc <__sread+0x24>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	e7f9      	b.n	8008cee <__sread+0x16>
 8008cfa:	46c0      	nop			@ (mov r8, r8)
 8008cfc:	ffffefff 	.word	0xffffefff

08008d00 <__swrite>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	001f      	movs	r7, r3
 8008d04:	898b      	ldrh	r3, [r1, #12]
 8008d06:	0005      	movs	r5, r0
 8008d08:	000c      	movs	r4, r1
 8008d0a:	0016      	movs	r6, r2
 8008d0c:	05db      	lsls	r3, r3, #23
 8008d0e:	d505      	bpl.n	8008d1c <__swrite+0x1c>
 8008d10:	230e      	movs	r3, #14
 8008d12:	5ec9      	ldrsh	r1, [r1, r3]
 8008d14:	2200      	movs	r2, #0
 8008d16:	2302      	movs	r3, #2
 8008d18:	f000 f8e8 	bl	8008eec <_lseek_r>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	4a05      	ldr	r2, [pc, #20]	@ (8008d34 <__swrite+0x34>)
 8008d20:	0028      	movs	r0, r5
 8008d22:	4013      	ands	r3, r2
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	0032      	movs	r2, r6
 8008d28:	230e      	movs	r3, #14
 8008d2a:	5ee1      	ldrsh	r1, [r4, r3]
 8008d2c:	003b      	movs	r3, r7
 8008d2e:	f000 f905 	bl	8008f3c <_write_r>
 8008d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d34:	ffffefff 	.word	0xffffefff

08008d38 <__sseek>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	000c      	movs	r4, r1
 8008d3c:	250e      	movs	r5, #14
 8008d3e:	5f49      	ldrsh	r1, [r1, r5]
 8008d40:	f000 f8d4 	bl	8008eec <_lseek_r>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	1c42      	adds	r2, r0, #1
 8008d48:	d103      	bne.n	8008d52 <__sseek+0x1a>
 8008d4a:	4a05      	ldr	r2, [pc, #20]	@ (8008d60 <__sseek+0x28>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	2280      	movs	r2, #128	@ 0x80
 8008d54:	0152      	lsls	r2, r2, #5
 8008d56:	4313      	orrs	r3, r2
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d5c:	e7f8      	b.n	8008d50 <__sseek+0x18>
 8008d5e:	46c0      	nop			@ (mov r8, r8)
 8008d60:	ffffefff 	.word	0xffffefff

08008d64 <__sclose>:
 8008d64:	b510      	push	{r4, lr}
 8008d66:	230e      	movs	r3, #14
 8008d68:	5ec9      	ldrsh	r1, [r1, r3]
 8008d6a:	f000 f8ad 	bl	8008ec8 <_close_r>
 8008d6e:	bd10      	pop	{r4, pc}

08008d70 <__swbuf_r>:
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	0006      	movs	r6, r0
 8008d74:	000d      	movs	r5, r1
 8008d76:	0014      	movs	r4, r2
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d004      	beq.n	8008d86 <__swbuf_r+0x16>
 8008d7c:	6a03      	ldr	r3, [r0, #32]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <__swbuf_r+0x16>
 8008d82:	f7ff ff05 	bl	8008b90 <__sinit>
 8008d86:	69a3      	ldr	r3, [r4, #24]
 8008d88:	60a3      	str	r3, [r4, #8]
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	071b      	lsls	r3, r3, #28
 8008d8e:	d502      	bpl.n	8008d96 <__swbuf_r+0x26>
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d109      	bne.n	8008daa <__swbuf_r+0x3a>
 8008d96:	0021      	movs	r1, r4
 8008d98:	0030      	movs	r0, r6
 8008d9a:	f000 f82b 	bl	8008df4 <__swsetup_r>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d003      	beq.n	8008daa <__swbuf_r+0x3a>
 8008da2:	2501      	movs	r5, #1
 8008da4:	426d      	negs	r5, r5
 8008da6:	0028      	movs	r0, r5
 8008da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	b2ef      	uxtb	r7, r5
 8008db0:	1ac0      	subs	r0, r0, r3
 8008db2:	6963      	ldr	r3, [r4, #20]
 8008db4:	b2ed      	uxtb	r5, r5
 8008db6:	4283      	cmp	r3, r0
 8008db8:	dc05      	bgt.n	8008dc6 <__swbuf_r+0x56>
 8008dba:	0021      	movs	r1, r4
 8008dbc:	0030      	movs	r0, r6
 8008dbe:	f001 fdeb 	bl	800a998 <_fflush_r>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d1ed      	bne.n	8008da2 <__swbuf_r+0x32>
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	3001      	adds	r0, #1
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	60a3      	str	r3, [r4, #8]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	6022      	str	r2, [r4, #0]
 8008dd4:	701f      	strb	r7, [r3, #0]
 8008dd6:	6963      	ldr	r3, [r4, #20]
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	d004      	beq.n	8008de6 <__swbuf_r+0x76>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	07db      	lsls	r3, r3, #31
 8008de0:	d5e1      	bpl.n	8008da6 <__swbuf_r+0x36>
 8008de2:	2d0a      	cmp	r5, #10
 8008de4:	d1df      	bne.n	8008da6 <__swbuf_r+0x36>
 8008de6:	0021      	movs	r1, r4
 8008de8:	0030      	movs	r0, r6
 8008dea:	f001 fdd5 	bl	800a998 <_fflush_r>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d0d9      	beq.n	8008da6 <__swbuf_r+0x36>
 8008df2:	e7d6      	b.n	8008da2 <__swbuf_r+0x32>

08008df4 <__swsetup_r>:
 8008df4:	4b2d      	ldr	r3, [pc, #180]	@ (8008eac <__swsetup_r+0xb8>)
 8008df6:	b570      	push	{r4, r5, r6, lr}
 8008df8:	0005      	movs	r5, r0
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	000c      	movs	r4, r1
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d004      	beq.n	8008e0c <__swsetup_r+0x18>
 8008e02:	6a03      	ldr	r3, [r0, #32]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <__swsetup_r+0x18>
 8008e08:	f7ff fec2 	bl	8008b90 <__sinit>
 8008e0c:	220c      	movs	r2, #12
 8008e0e:	5ea3      	ldrsh	r3, [r4, r2]
 8008e10:	071a      	lsls	r2, r3, #28
 8008e12:	d423      	bmi.n	8008e5c <__swsetup_r+0x68>
 8008e14:	06da      	lsls	r2, r3, #27
 8008e16:	d407      	bmi.n	8008e28 <__swsetup_r+0x34>
 8008e18:	2209      	movs	r2, #9
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	2240      	movs	r2, #64	@ 0x40
 8008e1e:	2001      	movs	r0, #1
 8008e20:	4313      	orrs	r3, r2
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	4240      	negs	r0, r0
 8008e26:	e03a      	b.n	8008e9e <__swsetup_r+0xaa>
 8008e28:	075b      	lsls	r3, r3, #29
 8008e2a:	d513      	bpl.n	8008e54 <__swsetup_r+0x60>
 8008e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d008      	beq.n	8008e44 <__swsetup_r+0x50>
 8008e32:	0023      	movs	r3, r4
 8008e34:	3344      	adds	r3, #68	@ 0x44
 8008e36:	4299      	cmp	r1, r3
 8008e38:	d002      	beq.n	8008e40 <__swsetup_r+0x4c>
 8008e3a:	0028      	movs	r0, r5
 8008e3c:	f000 ff40 	bl	8009cc0 <_free_r>
 8008e40:	2300      	movs	r3, #0
 8008e42:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e44:	2224      	movs	r2, #36	@ 0x24
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	4393      	bics	r3, r2
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	6063      	str	r3, [r4, #4]
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	2308      	movs	r3, #8
 8008e56:	89a2      	ldrh	r2, [r4, #12]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10b      	bne.n	8008e7a <__swsetup_r+0x86>
 8008e62:	21a0      	movs	r1, #160	@ 0xa0
 8008e64:	2280      	movs	r2, #128	@ 0x80
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	0089      	lsls	r1, r1, #2
 8008e6a:	0092      	lsls	r2, r2, #2
 8008e6c:	400b      	ands	r3, r1
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d003      	beq.n	8008e7a <__swsetup_r+0x86>
 8008e72:	0021      	movs	r1, r4
 8008e74:	0028      	movs	r0, r5
 8008e76:	f001 fde5 	bl	800aa44 <__smakebuf_r>
 8008e7a:	220c      	movs	r2, #12
 8008e7c:	5ea3      	ldrsh	r3, [r4, r2]
 8008e7e:	2101      	movs	r1, #1
 8008e80:	001a      	movs	r2, r3
 8008e82:	400a      	ands	r2, r1
 8008e84:	420b      	tst	r3, r1
 8008e86:	d00b      	beq.n	8008ea0 <__swsetup_r+0xac>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	60a2      	str	r2, [r4, #8]
 8008e8c:	6962      	ldr	r2, [r4, #20]
 8008e8e:	4252      	negs	r2, r2
 8008e90:	61a2      	str	r2, [r4, #24]
 8008e92:	2000      	movs	r0, #0
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	4282      	cmp	r2, r0
 8008e98:	d101      	bne.n	8008e9e <__swsetup_r+0xaa>
 8008e9a:	061a      	lsls	r2, r3, #24
 8008e9c:	d4be      	bmi.n	8008e1c <__swsetup_r+0x28>
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	0799      	lsls	r1, r3, #30
 8008ea2:	d400      	bmi.n	8008ea6 <__swsetup_r+0xb2>
 8008ea4:	6962      	ldr	r2, [r4, #20]
 8008ea6:	60a2      	str	r2, [r4, #8]
 8008ea8:	e7f3      	b.n	8008e92 <__swsetup_r+0x9e>
 8008eaa:	46c0      	nop			@ (mov r8, r8)
 8008eac:	20000018 	.word	0x20000018

08008eb0 <memset>:
 8008eb0:	0003      	movs	r3, r0
 8008eb2:	1882      	adds	r2, r0, r2
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d100      	bne.n	8008eba <memset+0xa>
 8008eb8:	4770      	bx	lr
 8008eba:	7019      	strb	r1, [r3, #0]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	e7f9      	b.n	8008eb4 <memset+0x4>

08008ec0 <_localeconv_r>:
 8008ec0:	4800      	ldr	r0, [pc, #0]	@ (8008ec4 <_localeconv_r+0x4>)
 8008ec2:	4770      	bx	lr
 8008ec4:	20000158 	.word	0x20000158

08008ec8 <_close_r>:
 8008ec8:	2300      	movs	r3, #0
 8008eca:	b570      	push	{r4, r5, r6, lr}
 8008ecc:	4d06      	ldr	r5, [pc, #24]	@ (8008ee8 <_close_r+0x20>)
 8008ece:	0004      	movs	r4, r0
 8008ed0:	0008      	movs	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7fa fac4 	bl	8003460 <_close>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d103      	bne.n	8008ee4 <_close_r+0x1c>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d000      	beq.n	8008ee4 <_close_r+0x1c>
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
 8008ee6:	46c0      	nop			@ (mov r8, r8)
 8008ee8:	200004f8 	.word	0x200004f8

08008eec <_lseek_r>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	0004      	movs	r4, r0
 8008ef0:	0008      	movs	r0, r1
 8008ef2:	0011      	movs	r1, r2
 8008ef4:	001a      	movs	r2, r3
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4d05      	ldr	r5, [pc, #20]	@ (8008f10 <_lseek_r+0x24>)
 8008efa:	602b      	str	r3, [r5, #0]
 8008efc:	f7fa fad1 	bl	80034a2 <_lseek>
 8008f00:	1c43      	adds	r3, r0, #1
 8008f02:	d103      	bne.n	8008f0c <_lseek_r+0x20>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d000      	beq.n	8008f0c <_lseek_r+0x20>
 8008f0a:	6023      	str	r3, [r4, #0]
 8008f0c:	bd70      	pop	{r4, r5, r6, pc}
 8008f0e:	46c0      	nop			@ (mov r8, r8)
 8008f10:	200004f8 	.word	0x200004f8

08008f14 <_read_r>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	0004      	movs	r4, r0
 8008f18:	0008      	movs	r0, r1
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	001a      	movs	r2, r3
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4d05      	ldr	r5, [pc, #20]	@ (8008f38 <_read_r+0x24>)
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7fa fa63 	bl	80033ee <_read>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d103      	bne.n	8008f34 <_read_r+0x20>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d000      	beq.n	8008f34 <_read_r+0x20>
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	46c0      	nop			@ (mov r8, r8)
 8008f38:	200004f8 	.word	0x200004f8

08008f3c <_write_r>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	0004      	movs	r4, r0
 8008f40:	0008      	movs	r0, r1
 8008f42:	0011      	movs	r1, r2
 8008f44:	001a      	movs	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	4d05      	ldr	r5, [pc, #20]	@ (8008f60 <_write_r+0x24>)
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	f7fa fa6c 	bl	8003428 <_write>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d103      	bne.n	8008f5c <_write_r+0x20>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d000      	beq.n	8008f5c <_write_r+0x20>
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
 8008f5e:	46c0      	nop			@ (mov r8, r8)
 8008f60:	200004f8 	.word	0x200004f8

08008f64 <__errno>:
 8008f64:	4b01      	ldr	r3, [pc, #4]	@ (8008f6c <__errno+0x8>)
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	4770      	bx	lr
 8008f6a:	46c0      	nop			@ (mov r8, r8)
 8008f6c:	20000018 	.word	0x20000018

08008f70 <__libc_init_array>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	2600      	movs	r6, #0
 8008f74:	4c0c      	ldr	r4, [pc, #48]	@ (8008fa8 <__libc_init_array+0x38>)
 8008f76:	4d0d      	ldr	r5, [pc, #52]	@ (8008fac <__libc_init_array+0x3c>)
 8008f78:	1b64      	subs	r4, r4, r5
 8008f7a:	10a4      	asrs	r4, r4, #2
 8008f7c:	42a6      	cmp	r6, r4
 8008f7e:	d109      	bne.n	8008f94 <__libc_init_array+0x24>
 8008f80:	2600      	movs	r6, #0
 8008f82:	f001 feab 	bl	800acdc <_init>
 8008f86:	4c0a      	ldr	r4, [pc, #40]	@ (8008fb0 <__libc_init_array+0x40>)
 8008f88:	4d0a      	ldr	r5, [pc, #40]	@ (8008fb4 <__libc_init_array+0x44>)
 8008f8a:	1b64      	subs	r4, r4, r5
 8008f8c:	10a4      	asrs	r4, r4, #2
 8008f8e:	42a6      	cmp	r6, r4
 8008f90:	d105      	bne.n	8008f9e <__libc_init_array+0x2e>
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	00b3      	lsls	r3, r6, #2
 8008f96:	58eb      	ldr	r3, [r5, r3]
 8008f98:	4798      	blx	r3
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7ee      	b.n	8008f7c <__libc_init_array+0xc>
 8008f9e:	00b3      	lsls	r3, r6, #2
 8008fa0:	58eb      	ldr	r3, [r5, r3]
 8008fa2:	4798      	blx	r3
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	e7f2      	b.n	8008f8e <__libc_init_array+0x1e>
 8008fa8:	0800b254 	.word	0x0800b254
 8008fac:	0800b254 	.word	0x0800b254
 8008fb0:	0800b258 	.word	0x0800b258
 8008fb4:	0800b254 	.word	0x0800b254

08008fb8 <__retarget_lock_init_recursive>:
 8008fb8:	4770      	bx	lr

08008fba <__retarget_lock_acquire_recursive>:
 8008fba:	4770      	bx	lr

08008fbc <__retarget_lock_release_recursive>:
 8008fbc:	4770      	bx	lr

08008fbe <memchr>:
 8008fbe:	b2c9      	uxtb	r1, r1
 8008fc0:	1882      	adds	r2, r0, r2
 8008fc2:	4290      	cmp	r0, r2
 8008fc4:	d101      	bne.n	8008fca <memchr+0xc>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	4770      	bx	lr
 8008fca:	7803      	ldrb	r3, [r0, #0]
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	d0fb      	beq.n	8008fc8 <memchr+0xa>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	e7f6      	b.n	8008fc2 <memchr+0x4>

08008fd4 <quorem>:
 8008fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd6:	6903      	ldr	r3, [r0, #16]
 8008fd8:	690c      	ldr	r4, [r1, #16]
 8008fda:	b089      	sub	sp, #36	@ 0x24
 8008fdc:	9003      	str	r0, [sp, #12]
 8008fde:	9106      	str	r1, [sp, #24]
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	db63      	blt.n	80090ae <quorem+0xda>
 8008fe6:	000b      	movs	r3, r1
 8008fe8:	3c01      	subs	r4, #1
 8008fea:	3314      	adds	r3, #20
 8008fec:	00a5      	lsls	r5, r4, #2
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	195b      	adds	r3, r3, r5
 8008ff2:	9305      	str	r3, [sp, #20]
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	3314      	adds	r3, #20
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	195d      	adds	r5, r3, r5
 8008ffc:	9b05      	ldr	r3, [sp, #20]
 8008ffe:	682f      	ldr	r7, [r5, #0]
 8009000:	681e      	ldr	r6, [r3, #0]
 8009002:	0038      	movs	r0, r7
 8009004:	3601      	adds	r6, #1
 8009006:	0031      	movs	r1, r6
 8009008:	f7f7 f89a 	bl	8000140 <__udivsi3>
 800900c:	9002      	str	r0, [sp, #8]
 800900e:	42b7      	cmp	r7, r6
 8009010:	d327      	bcc.n	8009062 <quorem+0x8e>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	2700      	movs	r7, #0
 8009016:	469c      	mov	ip, r3
 8009018:	9e01      	ldr	r6, [sp, #4]
 800901a:	9707      	str	r7, [sp, #28]
 800901c:	4662      	mov	r2, ip
 800901e:	ca08      	ldmia	r2!, {r3}
 8009020:	6830      	ldr	r0, [r6, #0]
 8009022:	4694      	mov	ip, r2
 8009024:	9a02      	ldr	r2, [sp, #8]
 8009026:	b299      	uxth	r1, r3
 8009028:	4351      	muls	r1, r2
 800902a:	0c1b      	lsrs	r3, r3, #16
 800902c:	4353      	muls	r3, r2
 800902e:	19c9      	adds	r1, r1, r7
 8009030:	0c0a      	lsrs	r2, r1, #16
 8009032:	189b      	adds	r3, r3, r2
 8009034:	b289      	uxth	r1, r1
 8009036:	b282      	uxth	r2, r0
 8009038:	1a52      	subs	r2, r2, r1
 800903a:	9907      	ldr	r1, [sp, #28]
 800903c:	0c1f      	lsrs	r7, r3, #16
 800903e:	1852      	adds	r2, r2, r1
 8009040:	0c00      	lsrs	r0, r0, #16
 8009042:	b29b      	uxth	r3, r3
 8009044:	1411      	asrs	r1, r2, #16
 8009046:	1ac3      	subs	r3, r0, r3
 8009048:	185b      	adds	r3, r3, r1
 800904a:	1419      	asrs	r1, r3, #16
 800904c:	b292      	uxth	r2, r2
 800904e:	041b      	lsls	r3, r3, #16
 8009050:	431a      	orrs	r2, r3
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	9107      	str	r1, [sp, #28]
 8009056:	c604      	stmia	r6!, {r2}
 8009058:	4563      	cmp	r3, ip
 800905a:	d2df      	bcs.n	800901c <quorem+0x48>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d02b      	beq.n	80090ba <quorem+0xe6>
 8009062:	9906      	ldr	r1, [sp, #24]
 8009064:	9803      	ldr	r0, [sp, #12]
 8009066:	f001 f9b7 	bl	800a3d8 <__mcmp>
 800906a:	2800      	cmp	r0, #0
 800906c:	db1e      	blt.n	80090ac <quorem+0xd8>
 800906e:	2600      	movs	r6, #0
 8009070:	9d01      	ldr	r5, [sp, #4]
 8009072:	9904      	ldr	r1, [sp, #16]
 8009074:	c901      	ldmia	r1!, {r0}
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b287      	uxth	r7, r0
 800907a:	b29a      	uxth	r2, r3
 800907c:	1bd2      	subs	r2, r2, r7
 800907e:	1992      	adds	r2, r2, r6
 8009080:	0c00      	lsrs	r0, r0, #16
 8009082:	0c1b      	lsrs	r3, r3, #16
 8009084:	1a1b      	subs	r3, r3, r0
 8009086:	1410      	asrs	r0, r2, #16
 8009088:	181b      	adds	r3, r3, r0
 800908a:	141e      	asrs	r6, r3, #16
 800908c:	b292      	uxth	r2, r2
 800908e:	041b      	lsls	r3, r3, #16
 8009090:	431a      	orrs	r2, r3
 8009092:	9b05      	ldr	r3, [sp, #20]
 8009094:	c504      	stmia	r5!, {r2}
 8009096:	428b      	cmp	r3, r1
 8009098:	d2ec      	bcs.n	8009074 <quorem+0xa0>
 800909a:	9a01      	ldr	r2, [sp, #4]
 800909c:	00a3      	lsls	r3, r4, #2
 800909e:	18d3      	adds	r3, r2, r3
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	2a00      	cmp	r2, #0
 80090a4:	d014      	beq.n	80090d0 <quorem+0xfc>
 80090a6:	9b02      	ldr	r3, [sp, #8]
 80090a8:	3301      	adds	r3, #1
 80090aa:	9302      	str	r3, [sp, #8]
 80090ac:	9802      	ldr	r0, [sp, #8]
 80090ae:	b009      	add	sp, #36	@ 0x24
 80090b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b2:	682b      	ldr	r3, [r5, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <quorem+0xee>
 80090b8:	3c01      	subs	r4, #1
 80090ba:	9b01      	ldr	r3, [sp, #4]
 80090bc:	3d04      	subs	r5, #4
 80090be:	42ab      	cmp	r3, r5
 80090c0:	d3f7      	bcc.n	80090b2 <quorem+0xde>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	611c      	str	r4, [r3, #16]
 80090c6:	e7cc      	b.n	8009062 <quorem+0x8e>
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	d104      	bne.n	80090d8 <quorem+0x104>
 80090ce:	3c01      	subs	r4, #1
 80090d0:	9a01      	ldr	r2, [sp, #4]
 80090d2:	3b04      	subs	r3, #4
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d3f7      	bcc.n	80090c8 <quorem+0xf4>
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	611c      	str	r4, [r3, #16]
 80090dc:	e7e3      	b.n	80090a6 <quorem+0xd2>
	...

080090e0 <_dtoa_r>:
 80090e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e2:	0014      	movs	r4, r2
 80090e4:	001d      	movs	r5, r3
 80090e6:	69c6      	ldr	r6, [r0, #28]
 80090e8:	b09d      	sub	sp, #116	@ 0x74
 80090ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80090ec:	950b      	str	r5, [sp, #44]	@ 0x2c
 80090ee:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80090f0:	9003      	str	r0, [sp, #12]
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	d10f      	bne.n	8009116 <_dtoa_r+0x36>
 80090f6:	2010      	movs	r0, #16
 80090f8:	f000 fe2c 	bl	8009d54 <malloc>
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	1e02      	subs	r2, r0, #0
 8009100:	61d8      	str	r0, [r3, #28]
 8009102:	d104      	bne.n	800910e <_dtoa_r+0x2e>
 8009104:	21ef      	movs	r1, #239	@ 0xef
 8009106:	4bc7      	ldr	r3, [pc, #796]	@ (8009424 <_dtoa_r+0x344>)
 8009108:	48c7      	ldr	r0, [pc, #796]	@ (8009428 <_dtoa_r+0x348>)
 800910a:	f001 fd1d 	bl	800ab48 <__assert_func>
 800910e:	6046      	str	r6, [r0, #4]
 8009110:	6086      	str	r6, [r0, #8]
 8009112:	6006      	str	r6, [r0, #0]
 8009114:	60c6      	str	r6, [r0, #12]
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	6819      	ldr	r1, [r3, #0]
 800911c:	2900      	cmp	r1, #0
 800911e:	d00b      	beq.n	8009138 <_dtoa_r+0x58>
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	2301      	movs	r3, #1
 8009124:	4093      	lsls	r3, r2
 8009126:	604a      	str	r2, [r1, #4]
 8009128:	608b      	str	r3, [r1, #8]
 800912a:	9803      	ldr	r0, [sp, #12]
 800912c:	f000 ff12 	bl	8009f54 <_Bfree>
 8009130:	2200      	movs	r2, #0
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	2d00      	cmp	r5, #0
 800913a:	da1e      	bge.n	800917a <_dtoa_r+0x9a>
 800913c:	2301      	movs	r3, #1
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	006b      	lsls	r3, r5, #1
 8009142:	085b      	lsrs	r3, r3, #1
 8009144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009146:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009148:	4bb8      	ldr	r3, [pc, #736]	@ (800942c <_dtoa_r+0x34c>)
 800914a:	4ab8      	ldr	r2, [pc, #736]	@ (800942c <_dtoa_r+0x34c>)
 800914c:	403b      	ands	r3, r7
 800914e:	4293      	cmp	r3, r2
 8009150:	d116      	bne.n	8009180 <_dtoa_r+0xa0>
 8009152:	4bb7      	ldr	r3, [pc, #732]	@ (8009430 <_dtoa_r+0x350>)
 8009154:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	033b      	lsls	r3, r7, #12
 800915a:	0b1b      	lsrs	r3, r3, #12
 800915c:	4323      	orrs	r3, r4
 800915e:	d101      	bne.n	8009164 <_dtoa_r+0x84>
 8009160:	f000 fd80 	bl	8009c64 <_dtoa_r+0xb84>
 8009164:	4bb3      	ldr	r3, [pc, #716]	@ (8009434 <_dtoa_r+0x354>)
 8009166:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009168:	9308      	str	r3, [sp, #32]
 800916a:	2a00      	cmp	r2, #0
 800916c:	d002      	beq.n	8009174 <_dtoa_r+0x94>
 800916e:	4bb2      	ldr	r3, [pc, #712]	@ (8009438 <_dtoa_r+0x358>)
 8009170:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	9808      	ldr	r0, [sp, #32]
 8009176:	b01d      	add	sp, #116	@ 0x74
 8009178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800917a:	2300      	movs	r3, #0
 800917c:	603b      	str	r3, [r7, #0]
 800917e:	e7e2      	b.n	8009146 <_dtoa_r+0x66>
 8009180:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009184:	9212      	str	r2, [sp, #72]	@ 0x48
 8009186:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009188:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800918a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800918c:	2200      	movs	r2, #0
 800918e:	2300      	movs	r3, #0
 8009190:	f7f7 f95c 	bl	800044c <__aeabi_dcmpeq>
 8009194:	1e06      	subs	r6, r0, #0
 8009196:	d00b      	beq.n	80091b0 <_dtoa_r+0xd0>
 8009198:	2301      	movs	r3, #1
 800919a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <_dtoa_r+0xca>
 80091a4:	4ba5      	ldr	r3, [pc, #660]	@ (800943c <_dtoa_r+0x35c>)
 80091a6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	4ba5      	ldr	r3, [pc, #660]	@ (8009440 <_dtoa_r+0x360>)
 80091ac:	9308      	str	r3, [sp, #32]
 80091ae:	e7e1      	b.n	8009174 <_dtoa_r+0x94>
 80091b0:	ab1a      	add	r3, sp, #104	@ 0x68
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	9803      	ldr	r0, [sp, #12]
 80091ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091be:	f001 f9c1 	bl	800a544 <__d2b>
 80091c2:	007a      	lsls	r2, r7, #1
 80091c4:	9005      	str	r0, [sp, #20]
 80091c6:	0d52      	lsrs	r2, r2, #21
 80091c8:	d100      	bne.n	80091cc <_dtoa_r+0xec>
 80091ca:	e07b      	b.n	80092c4 <_dtoa_r+0x1e4>
 80091cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091ce:	9618      	str	r6, [sp, #96]	@ 0x60
 80091d0:	0319      	lsls	r1, r3, #12
 80091d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009444 <_dtoa_r+0x364>)
 80091d4:	0b09      	lsrs	r1, r1, #12
 80091d6:	430b      	orrs	r3, r1
 80091d8:	499b      	ldr	r1, [pc, #620]	@ (8009448 <_dtoa_r+0x368>)
 80091da:	1857      	adds	r7, r2, r1
 80091dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80091de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80091e0:	0019      	movs	r1, r3
 80091e2:	2200      	movs	r2, #0
 80091e4:	4b99      	ldr	r3, [pc, #612]	@ (800944c <_dtoa_r+0x36c>)
 80091e6:	f7f8 fedb 	bl	8001fa0 <__aeabi_dsub>
 80091ea:	4a99      	ldr	r2, [pc, #612]	@ (8009450 <_dtoa_r+0x370>)
 80091ec:	4b99      	ldr	r3, [pc, #612]	@ (8009454 <_dtoa_r+0x374>)
 80091ee:	f7f8 fbf1 	bl	80019d4 <__aeabi_dmul>
 80091f2:	4a99      	ldr	r2, [pc, #612]	@ (8009458 <_dtoa_r+0x378>)
 80091f4:	4b99      	ldr	r3, [pc, #612]	@ (800945c <_dtoa_r+0x37c>)
 80091f6:	f7f7 fbed 	bl	80009d4 <__aeabi_dadd>
 80091fa:	0004      	movs	r4, r0
 80091fc:	0038      	movs	r0, r7
 80091fe:	000d      	movs	r5, r1
 8009200:	f7f9 fb36 	bl	8002870 <__aeabi_i2d>
 8009204:	4a96      	ldr	r2, [pc, #600]	@ (8009460 <_dtoa_r+0x380>)
 8009206:	4b97      	ldr	r3, [pc, #604]	@ (8009464 <_dtoa_r+0x384>)
 8009208:	f7f8 fbe4 	bl	80019d4 <__aeabi_dmul>
 800920c:	0002      	movs	r2, r0
 800920e:	000b      	movs	r3, r1
 8009210:	0020      	movs	r0, r4
 8009212:	0029      	movs	r1, r5
 8009214:	f7f7 fbde 	bl	80009d4 <__aeabi_dadd>
 8009218:	0004      	movs	r4, r0
 800921a:	000d      	movs	r5, r1
 800921c:	f7f9 faec 	bl	80027f8 <__aeabi_d2iz>
 8009220:	2200      	movs	r2, #0
 8009222:	9004      	str	r0, [sp, #16]
 8009224:	2300      	movs	r3, #0
 8009226:	0020      	movs	r0, r4
 8009228:	0029      	movs	r1, r5
 800922a:	f7f7 f915 	bl	8000458 <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	d00b      	beq.n	800924a <_dtoa_r+0x16a>
 8009232:	9804      	ldr	r0, [sp, #16]
 8009234:	f7f9 fb1c 	bl	8002870 <__aeabi_i2d>
 8009238:	002b      	movs	r3, r5
 800923a:	0022      	movs	r2, r4
 800923c:	f7f7 f906 	bl	800044c <__aeabi_dcmpeq>
 8009240:	4243      	negs	r3, r0
 8009242:	4158      	adcs	r0, r3
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	1a1b      	subs	r3, r3, r0
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	2301      	movs	r3, #1
 800924c:	9315      	str	r3, [sp, #84]	@ 0x54
 800924e:	9b04      	ldr	r3, [sp, #16]
 8009250:	2b16      	cmp	r3, #22
 8009252:	d810      	bhi.n	8009276 <_dtoa_r+0x196>
 8009254:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009256:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009258:	9a04      	ldr	r2, [sp, #16]
 800925a:	4b83      	ldr	r3, [pc, #524]	@ (8009468 <_dtoa_r+0x388>)
 800925c:	00d2      	lsls	r2, r2, #3
 800925e:	189b      	adds	r3, r3, r2
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f7f7 f8f8 	bl	8000458 <__aeabi_dcmplt>
 8009268:	2800      	cmp	r0, #0
 800926a:	d047      	beq.n	80092fc <_dtoa_r+0x21c>
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	3b01      	subs	r3, #1
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	2300      	movs	r3, #0
 8009274:	9315      	str	r3, [sp, #84]	@ 0x54
 8009276:	2200      	movs	r2, #0
 8009278:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800927a:	9206      	str	r2, [sp, #24]
 800927c:	1bdb      	subs	r3, r3, r7
 800927e:	1e5a      	subs	r2, r3, #1
 8009280:	d53e      	bpl.n	8009300 <_dtoa_r+0x220>
 8009282:	2201      	movs	r2, #1
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	9306      	str	r3, [sp, #24]
 8009288:	2300      	movs	r3, #0
 800928a:	930d      	str	r3, [sp, #52]	@ 0x34
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	db38      	blt.n	8009304 <_dtoa_r+0x224>
 8009292:	9a04      	ldr	r2, [sp, #16]
 8009294:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009296:	4694      	mov	ip, r2
 8009298:	4463      	add	r3, ip
 800929a:	930d      	str	r3, [sp, #52]	@ 0x34
 800929c:	2300      	movs	r3, #0
 800929e:	9214      	str	r2, [sp, #80]	@ 0x50
 80092a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80092a4:	2401      	movs	r4, #1
 80092a6:	2b09      	cmp	r3, #9
 80092a8:	d862      	bhi.n	8009370 <_dtoa_r+0x290>
 80092aa:	2b05      	cmp	r3, #5
 80092ac:	dd02      	ble.n	80092b4 <_dtoa_r+0x1d4>
 80092ae:	2400      	movs	r4, #0
 80092b0:	3b04      	subs	r3, #4
 80092b2:	9322      	str	r3, [sp, #136]	@ 0x88
 80092b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80092b6:	1e98      	subs	r0, r3, #2
 80092b8:	2803      	cmp	r0, #3
 80092ba:	d863      	bhi.n	8009384 <_dtoa_r+0x2a4>
 80092bc:	f7f6 ff2c 	bl	8000118 <__gnu_thumb1_case_uqi>
 80092c0:	2b385654 	.word	0x2b385654
 80092c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80092c6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80092c8:	18f6      	adds	r6, r6, r3
 80092ca:	4b68      	ldr	r3, [pc, #416]	@ (800946c <_dtoa_r+0x38c>)
 80092cc:	18f2      	adds	r2, r6, r3
 80092ce:	2a20      	cmp	r2, #32
 80092d0:	dd0f      	ble.n	80092f2 <_dtoa_r+0x212>
 80092d2:	2340      	movs	r3, #64	@ 0x40
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	409f      	lsls	r7, r3
 80092d8:	4b65      	ldr	r3, [pc, #404]	@ (8009470 <_dtoa_r+0x390>)
 80092da:	0038      	movs	r0, r7
 80092dc:	18f3      	adds	r3, r6, r3
 80092de:	40dc      	lsrs	r4, r3
 80092e0:	4320      	orrs	r0, r4
 80092e2:	f7f9 faf3 	bl	80028cc <__aeabi_ui2d>
 80092e6:	2201      	movs	r2, #1
 80092e8:	4b62      	ldr	r3, [pc, #392]	@ (8009474 <_dtoa_r+0x394>)
 80092ea:	1e77      	subs	r7, r6, #1
 80092ec:	18cb      	adds	r3, r1, r3
 80092ee:	9218      	str	r2, [sp, #96]	@ 0x60
 80092f0:	e776      	b.n	80091e0 <_dtoa_r+0x100>
 80092f2:	2320      	movs	r3, #32
 80092f4:	0020      	movs	r0, r4
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	4098      	lsls	r0, r3
 80092fa:	e7f2      	b.n	80092e2 <_dtoa_r+0x202>
 80092fc:	9015      	str	r0, [sp, #84]	@ 0x54
 80092fe:	e7ba      	b.n	8009276 <_dtoa_r+0x196>
 8009300:	920d      	str	r2, [sp, #52]	@ 0x34
 8009302:	e7c3      	b.n	800928c <_dtoa_r+0x1ac>
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	9a04      	ldr	r2, [sp, #16]
 8009308:	1a9b      	subs	r3, r3, r2
 800930a:	9306      	str	r3, [sp, #24]
 800930c:	4253      	negs	r3, r2
 800930e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009310:	2300      	movs	r3, #0
 8009312:	9314      	str	r3, [sp, #80]	@ 0x50
 8009314:	e7c5      	b.n	80092a2 <_dtoa_r+0x1c2>
 8009316:	2301      	movs	r3, #1
 8009318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800931a:	9310      	str	r3, [sp, #64]	@ 0x40
 800931c:	4694      	mov	ip, r2
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	4463      	add	r3, ip
 8009322:	930e      	str	r3, [sp, #56]	@ 0x38
 8009324:	3301      	adds	r3, #1
 8009326:	9309      	str	r3, [sp, #36]	@ 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	dc08      	bgt.n	800933e <_dtoa_r+0x25e>
 800932c:	2301      	movs	r3, #1
 800932e:	e006      	b.n	800933e <_dtoa_r+0x25e>
 8009330:	2301      	movs	r3, #1
 8009332:	9310      	str	r3, [sp, #64]	@ 0x40
 8009334:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009336:	2b00      	cmp	r3, #0
 8009338:	dd28      	ble.n	800938c <_dtoa_r+0x2ac>
 800933a:	930e      	str	r3, [sp, #56]	@ 0x38
 800933c:	9309      	str	r3, [sp, #36]	@ 0x24
 800933e:	9a03      	ldr	r2, [sp, #12]
 8009340:	2100      	movs	r1, #0
 8009342:	69d0      	ldr	r0, [r2, #28]
 8009344:	2204      	movs	r2, #4
 8009346:	0015      	movs	r5, r2
 8009348:	3514      	adds	r5, #20
 800934a:	429d      	cmp	r5, r3
 800934c:	d923      	bls.n	8009396 <_dtoa_r+0x2b6>
 800934e:	6041      	str	r1, [r0, #4]
 8009350:	9803      	ldr	r0, [sp, #12]
 8009352:	f000 fdbb 	bl	8009ecc <_Balloc>
 8009356:	9008      	str	r0, [sp, #32]
 8009358:	2800      	cmp	r0, #0
 800935a:	d11f      	bne.n	800939c <_dtoa_r+0x2bc>
 800935c:	21b0      	movs	r1, #176	@ 0xb0
 800935e:	4b46      	ldr	r3, [pc, #280]	@ (8009478 <_dtoa_r+0x398>)
 8009360:	4831      	ldr	r0, [pc, #196]	@ (8009428 <_dtoa_r+0x348>)
 8009362:	9a08      	ldr	r2, [sp, #32]
 8009364:	31ff      	adds	r1, #255	@ 0xff
 8009366:	e6d0      	b.n	800910a <_dtoa_r+0x2a>
 8009368:	2300      	movs	r3, #0
 800936a:	e7e2      	b.n	8009332 <_dtoa_r+0x252>
 800936c:	2300      	movs	r3, #0
 800936e:	e7d3      	b.n	8009318 <_dtoa_r+0x238>
 8009370:	2300      	movs	r3, #0
 8009372:	9410      	str	r4, [sp, #64]	@ 0x40
 8009374:	9322      	str	r3, [sp, #136]	@ 0x88
 8009376:	3b01      	subs	r3, #1
 8009378:	2200      	movs	r2, #0
 800937a:	930e      	str	r3, [sp, #56]	@ 0x38
 800937c:	9309      	str	r3, [sp, #36]	@ 0x24
 800937e:	3313      	adds	r3, #19
 8009380:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009382:	e7dc      	b.n	800933e <_dtoa_r+0x25e>
 8009384:	2301      	movs	r3, #1
 8009386:	9310      	str	r3, [sp, #64]	@ 0x40
 8009388:	3b02      	subs	r3, #2
 800938a:	e7f5      	b.n	8009378 <_dtoa_r+0x298>
 800938c:	2301      	movs	r3, #1
 800938e:	001a      	movs	r2, r3
 8009390:	930e      	str	r3, [sp, #56]	@ 0x38
 8009392:	9309      	str	r3, [sp, #36]	@ 0x24
 8009394:	e7f4      	b.n	8009380 <_dtoa_r+0x2a0>
 8009396:	3101      	adds	r1, #1
 8009398:	0052      	lsls	r2, r2, #1
 800939a:	e7d4      	b.n	8009346 <_dtoa_r+0x266>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	9a08      	ldr	r2, [sp, #32]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a6:	2b0e      	cmp	r3, #14
 80093a8:	d900      	bls.n	80093ac <_dtoa_r+0x2cc>
 80093aa:	e0d6      	b.n	800955a <_dtoa_r+0x47a>
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	d100      	bne.n	80093b2 <_dtoa_r+0x2d2>
 80093b0:	e0d3      	b.n	800955a <_dtoa_r+0x47a>
 80093b2:	9b04      	ldr	r3, [sp, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd63      	ble.n	8009480 <_dtoa_r+0x3a0>
 80093b8:	210f      	movs	r1, #15
 80093ba:	9a04      	ldr	r2, [sp, #16]
 80093bc:	4b2a      	ldr	r3, [pc, #168]	@ (8009468 <_dtoa_r+0x388>)
 80093be:	400a      	ands	r2, r1
 80093c0:	00d2      	lsls	r2, r2, #3
 80093c2:	189b      	adds	r3, r3, r2
 80093c4:	681e      	ldr	r6, [r3, #0]
 80093c6:	685f      	ldr	r7, [r3, #4]
 80093c8:	9b04      	ldr	r3, [sp, #16]
 80093ca:	2402      	movs	r4, #2
 80093cc:	111d      	asrs	r5, r3, #4
 80093ce:	05db      	lsls	r3, r3, #23
 80093d0:	d50a      	bpl.n	80093e8 <_dtoa_r+0x308>
 80093d2:	4b2a      	ldr	r3, [pc, #168]	@ (800947c <_dtoa_r+0x39c>)
 80093d4:	400d      	ands	r5, r1
 80093d6:	6a1a      	ldr	r2, [r3, #32]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093da:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80093dc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80093de:	f7f7 febf 	bl	8001160 <__aeabi_ddiv>
 80093e2:	900a      	str	r0, [sp, #40]	@ 0x28
 80093e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80093e6:	3401      	adds	r4, #1
 80093e8:	4b24      	ldr	r3, [pc, #144]	@ (800947c <_dtoa_r+0x39c>)
 80093ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	d108      	bne.n	8009402 <_dtoa_r+0x322>
 80093f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093f4:	0032      	movs	r2, r6
 80093f6:	003b      	movs	r3, r7
 80093f8:	f7f7 feb2 	bl	8001160 <__aeabi_ddiv>
 80093fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80093fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009400:	e059      	b.n	80094b6 <_dtoa_r+0x3d6>
 8009402:	2301      	movs	r3, #1
 8009404:	421d      	tst	r5, r3
 8009406:	d009      	beq.n	800941c <_dtoa_r+0x33c>
 8009408:	18e4      	adds	r4, r4, r3
 800940a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800940c:	0030      	movs	r0, r6
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	0039      	movs	r1, r7
 8009414:	f7f8 fade 	bl	80019d4 <__aeabi_dmul>
 8009418:	0006      	movs	r6, r0
 800941a:	000f      	movs	r7, r1
 800941c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800941e:	106d      	asrs	r5, r5, #1
 8009420:	3308      	adds	r3, #8
 8009422:	e7e2      	b.n	80093ea <_dtoa_r+0x30a>
 8009424:	0800af19 	.word	0x0800af19
 8009428:	0800af30 	.word	0x0800af30
 800942c:	7ff00000 	.word	0x7ff00000
 8009430:	0000270f 	.word	0x0000270f
 8009434:	0800af15 	.word	0x0800af15
 8009438:	0800af18 	.word	0x0800af18
 800943c:	0800aee9 	.word	0x0800aee9
 8009440:	0800aee8 	.word	0x0800aee8
 8009444:	3ff00000 	.word	0x3ff00000
 8009448:	fffffc01 	.word	0xfffffc01
 800944c:	3ff80000 	.word	0x3ff80000
 8009450:	636f4361 	.word	0x636f4361
 8009454:	3fd287a7 	.word	0x3fd287a7
 8009458:	8b60c8b3 	.word	0x8b60c8b3
 800945c:	3fc68a28 	.word	0x3fc68a28
 8009460:	509f79fb 	.word	0x509f79fb
 8009464:	3fd34413 	.word	0x3fd34413
 8009468:	0800b080 	.word	0x0800b080
 800946c:	00000432 	.word	0x00000432
 8009470:	00000412 	.word	0x00000412
 8009474:	fe100000 	.word	0xfe100000
 8009478:	0800af88 	.word	0x0800af88
 800947c:	0800b058 	.word	0x0800b058
 8009480:	9b04      	ldr	r3, [sp, #16]
 8009482:	2402      	movs	r4, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d016      	beq.n	80094b6 <_dtoa_r+0x3d6>
 8009488:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800948a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800948c:	220f      	movs	r2, #15
 800948e:	425d      	negs	r5, r3
 8009490:	402a      	ands	r2, r5
 8009492:	4bd5      	ldr	r3, [pc, #852]	@ (80097e8 <_dtoa_r+0x708>)
 8009494:	00d2      	lsls	r2, r2, #3
 8009496:	189b      	adds	r3, r3, r2
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f7f8 fa9a 	bl	80019d4 <__aeabi_dmul>
 80094a0:	2701      	movs	r7, #1
 80094a2:	2300      	movs	r3, #0
 80094a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80094a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094a8:	4ed0      	ldr	r6, [pc, #832]	@ (80097ec <_dtoa_r+0x70c>)
 80094aa:	112d      	asrs	r5, r5, #4
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	d000      	beq.n	80094b2 <_dtoa_r+0x3d2>
 80094b0:	e095      	b.n	80095de <_dtoa_r+0x4fe>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1a2      	bne.n	80093fc <_dtoa_r+0x31c>
 80094b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80094b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80094ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d100      	bne.n	80094c2 <_dtoa_r+0x3e2>
 80094c0:	e098      	b.n	80095f4 <_dtoa_r+0x514>
 80094c2:	2200      	movs	r2, #0
 80094c4:	0030      	movs	r0, r6
 80094c6:	0039      	movs	r1, r7
 80094c8:	4bc9      	ldr	r3, [pc, #804]	@ (80097f0 <_dtoa_r+0x710>)
 80094ca:	f7f6 ffc5 	bl	8000458 <__aeabi_dcmplt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d100      	bne.n	80094d4 <_dtoa_r+0x3f4>
 80094d2:	e08f      	b.n	80095f4 <_dtoa_r+0x514>
 80094d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d100      	bne.n	80094dc <_dtoa_r+0x3fc>
 80094da:	e08b      	b.n	80095f4 <_dtoa_r+0x514>
 80094dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094de:	2b00      	cmp	r3, #0
 80094e0:	dd37      	ble.n	8009552 <_dtoa_r+0x472>
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	2200      	movs	r2, #0
 80094e6:	3b01      	subs	r3, #1
 80094e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80094ea:	0030      	movs	r0, r6
 80094ec:	4bc1      	ldr	r3, [pc, #772]	@ (80097f4 <_dtoa_r+0x714>)
 80094ee:	0039      	movs	r1, r7
 80094f0:	f7f8 fa70 	bl	80019d4 <__aeabi_dmul>
 80094f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80094f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094fa:	3401      	adds	r4, #1
 80094fc:	0020      	movs	r0, r4
 80094fe:	9311      	str	r3, [sp, #68]	@ 0x44
 8009500:	f7f9 f9b6 	bl	8002870 <__aeabi_i2d>
 8009504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	f7f8 fa64 	bl	80019d4 <__aeabi_dmul>
 800950c:	4bba      	ldr	r3, [pc, #744]	@ (80097f8 <_dtoa_r+0x718>)
 800950e:	2200      	movs	r2, #0
 8009510:	f7f7 fa60 	bl	80009d4 <__aeabi_dadd>
 8009514:	4bb9      	ldr	r3, [pc, #740]	@ (80097fc <_dtoa_r+0x71c>)
 8009516:	0006      	movs	r6, r0
 8009518:	18cf      	adds	r7, r1, r3
 800951a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800951c:	2b00      	cmp	r3, #0
 800951e:	d16d      	bne.n	80095fc <_dtoa_r+0x51c>
 8009520:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009522:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009524:	2200      	movs	r2, #0
 8009526:	4bb6      	ldr	r3, [pc, #728]	@ (8009800 <_dtoa_r+0x720>)
 8009528:	f7f8 fd3a 	bl	8001fa0 <__aeabi_dsub>
 800952c:	0032      	movs	r2, r6
 800952e:	003b      	movs	r3, r7
 8009530:	0004      	movs	r4, r0
 8009532:	000d      	movs	r5, r1
 8009534:	f7f6 ffa4 	bl	8000480 <__aeabi_dcmpgt>
 8009538:	2800      	cmp	r0, #0
 800953a:	d000      	beq.n	800953e <_dtoa_r+0x45e>
 800953c:	e2b6      	b.n	8009aac <_dtoa_r+0x9cc>
 800953e:	2180      	movs	r1, #128	@ 0x80
 8009540:	0609      	lsls	r1, r1, #24
 8009542:	187b      	adds	r3, r7, r1
 8009544:	0032      	movs	r2, r6
 8009546:	0020      	movs	r0, r4
 8009548:	0029      	movs	r1, r5
 800954a:	f7f6 ff85 	bl	8000458 <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	d128      	bne.n	80095a4 <_dtoa_r+0x4c4>
 8009552:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009554:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009556:	930a      	str	r3, [sp, #40]	@ 0x28
 8009558:	940b      	str	r4, [sp, #44]	@ 0x2c
 800955a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800955c:	2b00      	cmp	r3, #0
 800955e:	da00      	bge.n	8009562 <_dtoa_r+0x482>
 8009560:	e174      	b.n	800984c <_dtoa_r+0x76c>
 8009562:	9a04      	ldr	r2, [sp, #16]
 8009564:	2a0e      	cmp	r2, #14
 8009566:	dd00      	ble.n	800956a <_dtoa_r+0x48a>
 8009568:	e170      	b.n	800984c <_dtoa_r+0x76c>
 800956a:	4b9f      	ldr	r3, [pc, #636]	@ (80097e8 <_dtoa_r+0x708>)
 800956c:	00d2      	lsls	r2, r2, #3
 800956e:	189b      	adds	r3, r3, r2
 8009570:	685c      	ldr	r4, [r3, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	9306      	str	r3, [sp, #24]
 8009576:	9407      	str	r4, [sp, #28]
 8009578:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800957a:	2b00      	cmp	r3, #0
 800957c:	db00      	blt.n	8009580 <_dtoa_r+0x4a0>
 800957e:	e0e7      	b.n	8009750 <_dtoa_r+0x670>
 8009580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009582:	2b00      	cmp	r3, #0
 8009584:	dd00      	ble.n	8009588 <_dtoa_r+0x4a8>
 8009586:	e0e3      	b.n	8009750 <_dtoa_r+0x670>
 8009588:	d10c      	bne.n	80095a4 <_dtoa_r+0x4c4>
 800958a:	9806      	ldr	r0, [sp, #24]
 800958c:	9907      	ldr	r1, [sp, #28]
 800958e:	2200      	movs	r2, #0
 8009590:	4b9b      	ldr	r3, [pc, #620]	@ (8009800 <_dtoa_r+0x720>)
 8009592:	f7f8 fa1f 	bl	80019d4 <__aeabi_dmul>
 8009596:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009598:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800959a:	f7f6 ff7b 	bl	8000494 <__aeabi_dcmpge>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d100      	bne.n	80095a4 <_dtoa_r+0x4c4>
 80095a2:	e286      	b.n	8009ab2 <_dtoa_r+0x9d2>
 80095a4:	2600      	movs	r6, #0
 80095a6:	0037      	movs	r7, r6
 80095a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095aa:	9c08      	ldr	r4, [sp, #32]
 80095ac:	43db      	mvns	r3, r3
 80095ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80095b0:	9704      	str	r7, [sp, #16]
 80095b2:	2700      	movs	r7, #0
 80095b4:	0031      	movs	r1, r6
 80095b6:	9803      	ldr	r0, [sp, #12]
 80095b8:	f000 fccc 	bl	8009f54 <_Bfree>
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d100      	bne.n	80095c4 <_dtoa_r+0x4e4>
 80095c2:	e0bb      	b.n	800973c <_dtoa_r+0x65c>
 80095c4:	2f00      	cmp	r7, #0
 80095c6:	d005      	beq.n	80095d4 <_dtoa_r+0x4f4>
 80095c8:	429f      	cmp	r7, r3
 80095ca:	d003      	beq.n	80095d4 <_dtoa_r+0x4f4>
 80095cc:	0039      	movs	r1, r7
 80095ce:	9803      	ldr	r0, [sp, #12]
 80095d0:	f000 fcc0 	bl	8009f54 <_Bfree>
 80095d4:	9904      	ldr	r1, [sp, #16]
 80095d6:	9803      	ldr	r0, [sp, #12]
 80095d8:	f000 fcbc 	bl	8009f54 <_Bfree>
 80095dc:	e0ae      	b.n	800973c <_dtoa_r+0x65c>
 80095de:	423d      	tst	r5, r7
 80095e0:	d005      	beq.n	80095ee <_dtoa_r+0x50e>
 80095e2:	6832      	ldr	r2, [r6, #0]
 80095e4:	6873      	ldr	r3, [r6, #4]
 80095e6:	f7f8 f9f5 	bl	80019d4 <__aeabi_dmul>
 80095ea:	003b      	movs	r3, r7
 80095ec:	3401      	adds	r4, #1
 80095ee:	106d      	asrs	r5, r5, #1
 80095f0:	3608      	adds	r6, #8
 80095f2:	e75b      	b.n	80094ac <_dtoa_r+0x3cc>
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80095f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095fa:	e77f      	b.n	80094fc <_dtoa_r+0x41c>
 80095fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095fe:	4b7a      	ldr	r3, [pc, #488]	@ (80097e8 <_dtoa_r+0x708>)
 8009600:	3a01      	subs	r2, #1
 8009602:	00d2      	lsls	r2, r2, #3
 8009604:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009606:	189b      	adds	r3, r3, r2
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2900      	cmp	r1, #0
 800960e:	d04c      	beq.n	80096aa <_dtoa_r+0x5ca>
 8009610:	2000      	movs	r0, #0
 8009612:	497c      	ldr	r1, [pc, #496]	@ (8009804 <_dtoa_r+0x724>)
 8009614:	f7f7 fda4 	bl	8001160 <__aeabi_ddiv>
 8009618:	0032      	movs	r2, r6
 800961a:	003b      	movs	r3, r7
 800961c:	f7f8 fcc0 	bl	8001fa0 <__aeabi_dsub>
 8009620:	9a08      	ldr	r2, [sp, #32]
 8009622:	0006      	movs	r6, r0
 8009624:	4694      	mov	ip, r2
 8009626:	000f      	movs	r7, r1
 8009628:	9b08      	ldr	r3, [sp, #32]
 800962a:	9316      	str	r3, [sp, #88]	@ 0x58
 800962c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800962e:	4463      	add	r3, ip
 8009630:	9311      	str	r3, [sp, #68]	@ 0x44
 8009632:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009634:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009636:	f7f9 f8df 	bl	80027f8 <__aeabi_d2iz>
 800963a:	0005      	movs	r5, r0
 800963c:	f7f9 f918 	bl	8002870 <__aeabi_i2d>
 8009640:	0002      	movs	r2, r0
 8009642:	000b      	movs	r3, r1
 8009644:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009646:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009648:	f7f8 fcaa 	bl	8001fa0 <__aeabi_dsub>
 800964c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800964e:	3530      	adds	r5, #48	@ 0x30
 8009650:	1c5c      	adds	r4, r3, #1
 8009652:	701d      	strb	r5, [r3, #0]
 8009654:	0032      	movs	r2, r6
 8009656:	003b      	movs	r3, r7
 8009658:	900a      	str	r0, [sp, #40]	@ 0x28
 800965a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800965c:	f7f6 fefc 	bl	8000458 <__aeabi_dcmplt>
 8009660:	2800      	cmp	r0, #0
 8009662:	d16b      	bne.n	800973c <_dtoa_r+0x65c>
 8009664:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009668:	2000      	movs	r0, #0
 800966a:	4961      	ldr	r1, [pc, #388]	@ (80097f0 <_dtoa_r+0x710>)
 800966c:	f7f8 fc98 	bl	8001fa0 <__aeabi_dsub>
 8009670:	0032      	movs	r2, r6
 8009672:	003b      	movs	r3, r7
 8009674:	f7f6 fef0 	bl	8000458 <__aeabi_dcmplt>
 8009678:	2800      	cmp	r0, #0
 800967a:	d000      	beq.n	800967e <_dtoa_r+0x59e>
 800967c:	e0c6      	b.n	800980c <_dtoa_r+0x72c>
 800967e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009680:	42a3      	cmp	r3, r4
 8009682:	d100      	bne.n	8009686 <_dtoa_r+0x5a6>
 8009684:	e765      	b.n	8009552 <_dtoa_r+0x472>
 8009686:	2200      	movs	r2, #0
 8009688:	0030      	movs	r0, r6
 800968a:	0039      	movs	r1, r7
 800968c:	4b59      	ldr	r3, [pc, #356]	@ (80097f4 <_dtoa_r+0x714>)
 800968e:	f7f8 f9a1 	bl	80019d4 <__aeabi_dmul>
 8009692:	2200      	movs	r2, #0
 8009694:	0006      	movs	r6, r0
 8009696:	000f      	movs	r7, r1
 8009698:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800969a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800969c:	4b55      	ldr	r3, [pc, #340]	@ (80097f4 <_dtoa_r+0x714>)
 800969e:	f7f8 f999 	bl	80019d4 <__aeabi_dmul>
 80096a2:	9416      	str	r4, [sp, #88]	@ 0x58
 80096a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80096a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096a8:	e7c3      	b.n	8009632 <_dtoa_r+0x552>
 80096aa:	0030      	movs	r0, r6
 80096ac:	0039      	movs	r1, r7
 80096ae:	f7f8 f991 	bl	80019d4 <__aeabi_dmul>
 80096b2:	9d08      	ldr	r5, [sp, #32]
 80096b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80096b6:	002b      	movs	r3, r5
 80096b8:	4694      	mov	ip, r2
 80096ba:	9016      	str	r0, [sp, #88]	@ 0x58
 80096bc:	9117      	str	r1, [sp, #92]	@ 0x5c
 80096be:	4463      	add	r3, ip
 80096c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80096c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096c6:	f7f9 f897 	bl	80027f8 <__aeabi_d2iz>
 80096ca:	0004      	movs	r4, r0
 80096cc:	f7f9 f8d0 	bl	8002870 <__aeabi_i2d>
 80096d0:	000b      	movs	r3, r1
 80096d2:	0002      	movs	r2, r0
 80096d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096d8:	f7f8 fc62 	bl	8001fa0 <__aeabi_dsub>
 80096dc:	3430      	adds	r4, #48	@ 0x30
 80096de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096e0:	702c      	strb	r4, [r5, #0]
 80096e2:	3501      	adds	r5, #1
 80096e4:	0006      	movs	r6, r0
 80096e6:	000f      	movs	r7, r1
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	d12a      	bne.n	8009742 <_dtoa_r+0x662>
 80096ec:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80096ee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80096f0:	9b08      	ldr	r3, [sp, #32]
 80096f2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80096f4:	469c      	mov	ip, r3
 80096f6:	2200      	movs	r2, #0
 80096f8:	4b42      	ldr	r3, [pc, #264]	@ (8009804 <_dtoa_r+0x724>)
 80096fa:	4464      	add	r4, ip
 80096fc:	f7f7 f96a 	bl	80009d4 <__aeabi_dadd>
 8009700:	0002      	movs	r2, r0
 8009702:	000b      	movs	r3, r1
 8009704:	0030      	movs	r0, r6
 8009706:	0039      	movs	r1, r7
 8009708:	f7f6 feba 	bl	8000480 <__aeabi_dcmpgt>
 800970c:	2800      	cmp	r0, #0
 800970e:	d000      	beq.n	8009712 <_dtoa_r+0x632>
 8009710:	e07c      	b.n	800980c <_dtoa_r+0x72c>
 8009712:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009714:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009716:	2000      	movs	r0, #0
 8009718:	493a      	ldr	r1, [pc, #232]	@ (8009804 <_dtoa_r+0x724>)
 800971a:	f7f8 fc41 	bl	8001fa0 <__aeabi_dsub>
 800971e:	0002      	movs	r2, r0
 8009720:	000b      	movs	r3, r1
 8009722:	0030      	movs	r0, r6
 8009724:	0039      	movs	r1, r7
 8009726:	f7f6 fe97 	bl	8000458 <__aeabi_dcmplt>
 800972a:	2800      	cmp	r0, #0
 800972c:	d100      	bne.n	8009730 <_dtoa_r+0x650>
 800972e:	e710      	b.n	8009552 <_dtoa_r+0x472>
 8009730:	0023      	movs	r3, r4
 8009732:	3c01      	subs	r4, #1
 8009734:	7822      	ldrb	r2, [r4, #0]
 8009736:	2a30      	cmp	r2, #48	@ 0x30
 8009738:	d0fa      	beq.n	8009730 <_dtoa_r+0x650>
 800973a:	001c      	movs	r4, r3
 800973c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800973e:	9304      	str	r3, [sp, #16]
 8009740:	e042      	b.n	80097c8 <_dtoa_r+0x6e8>
 8009742:	2200      	movs	r2, #0
 8009744:	4b2b      	ldr	r3, [pc, #172]	@ (80097f4 <_dtoa_r+0x714>)
 8009746:	f7f8 f945 	bl	80019d4 <__aeabi_dmul>
 800974a:	900a      	str	r0, [sp, #40]	@ 0x28
 800974c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800974e:	e7b8      	b.n	80096c2 <_dtoa_r+0x5e2>
 8009750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009752:	9d08      	ldr	r5, [sp, #32]
 8009754:	3b01      	subs	r3, #1
 8009756:	195b      	adds	r3, r3, r5
 8009758:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800975a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800975c:	930a      	str	r3, [sp, #40]	@ 0x28
 800975e:	9a06      	ldr	r2, [sp, #24]
 8009760:	9b07      	ldr	r3, [sp, #28]
 8009762:	0030      	movs	r0, r6
 8009764:	0039      	movs	r1, r7
 8009766:	f7f7 fcfb 	bl	8001160 <__aeabi_ddiv>
 800976a:	f7f9 f845 	bl	80027f8 <__aeabi_d2iz>
 800976e:	9009      	str	r0, [sp, #36]	@ 0x24
 8009770:	f7f9 f87e 	bl	8002870 <__aeabi_i2d>
 8009774:	9a06      	ldr	r2, [sp, #24]
 8009776:	9b07      	ldr	r3, [sp, #28]
 8009778:	f7f8 f92c 	bl	80019d4 <__aeabi_dmul>
 800977c:	0002      	movs	r2, r0
 800977e:	000b      	movs	r3, r1
 8009780:	0030      	movs	r0, r6
 8009782:	0039      	movs	r1, r7
 8009784:	f7f8 fc0c 	bl	8001fa0 <__aeabi_dsub>
 8009788:	002b      	movs	r3, r5
 800978a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800978c:	3501      	adds	r5, #1
 800978e:	3230      	adds	r2, #48	@ 0x30
 8009790:	701a      	strb	r2, [r3, #0]
 8009792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009794:	002c      	movs	r4, r5
 8009796:	429a      	cmp	r2, r3
 8009798:	d14b      	bne.n	8009832 <_dtoa_r+0x752>
 800979a:	0002      	movs	r2, r0
 800979c:	000b      	movs	r3, r1
 800979e:	f7f7 f919 	bl	80009d4 <__aeabi_dadd>
 80097a2:	9a06      	ldr	r2, [sp, #24]
 80097a4:	9b07      	ldr	r3, [sp, #28]
 80097a6:	0006      	movs	r6, r0
 80097a8:	000f      	movs	r7, r1
 80097aa:	f7f6 fe69 	bl	8000480 <__aeabi_dcmpgt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d12a      	bne.n	8009808 <_dtoa_r+0x728>
 80097b2:	9a06      	ldr	r2, [sp, #24]
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	0030      	movs	r0, r6
 80097b8:	0039      	movs	r1, r7
 80097ba:	f7f6 fe47 	bl	800044c <__aeabi_dcmpeq>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d002      	beq.n	80097c8 <_dtoa_r+0x6e8>
 80097c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c4:	07dd      	lsls	r5, r3, #31
 80097c6:	d41f      	bmi.n	8009808 <_dtoa_r+0x728>
 80097c8:	9905      	ldr	r1, [sp, #20]
 80097ca:	9803      	ldr	r0, [sp, #12]
 80097cc:	f000 fbc2 	bl	8009f54 <_Bfree>
 80097d0:	2300      	movs	r3, #0
 80097d2:	7023      	strb	r3, [r4, #0]
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80097d8:	3301      	adds	r3, #1
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d100      	bne.n	80097e4 <_dtoa_r+0x704>
 80097e2:	e4c7      	b.n	8009174 <_dtoa_r+0x94>
 80097e4:	601c      	str	r4, [r3, #0]
 80097e6:	e4c5      	b.n	8009174 <_dtoa_r+0x94>
 80097e8:	0800b080 	.word	0x0800b080
 80097ec:	0800b058 	.word	0x0800b058
 80097f0:	3ff00000 	.word	0x3ff00000
 80097f4:	40240000 	.word	0x40240000
 80097f8:	401c0000 	.word	0x401c0000
 80097fc:	fcc00000 	.word	0xfcc00000
 8009800:	40140000 	.word	0x40140000
 8009804:	3fe00000 	.word	0x3fe00000
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	930c      	str	r3, [sp, #48]	@ 0x30
 800980c:	0023      	movs	r3, r4
 800980e:	001c      	movs	r4, r3
 8009810:	3b01      	subs	r3, #1
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	2a39      	cmp	r2, #57	@ 0x39
 8009816:	d108      	bne.n	800982a <_dtoa_r+0x74a>
 8009818:	9a08      	ldr	r2, [sp, #32]
 800981a:	429a      	cmp	r2, r3
 800981c:	d1f7      	bne.n	800980e <_dtoa_r+0x72e>
 800981e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009820:	9908      	ldr	r1, [sp, #32]
 8009822:	3201      	adds	r2, #1
 8009824:	920c      	str	r2, [sp, #48]	@ 0x30
 8009826:	2230      	movs	r2, #48	@ 0x30
 8009828:	700a      	strb	r2, [r1, #0]
 800982a:	781a      	ldrb	r2, [r3, #0]
 800982c:	3201      	adds	r2, #1
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e784      	b.n	800973c <_dtoa_r+0x65c>
 8009832:	2200      	movs	r2, #0
 8009834:	4bc6      	ldr	r3, [pc, #792]	@ (8009b50 <_dtoa_r+0xa70>)
 8009836:	f7f8 f8cd 	bl	80019d4 <__aeabi_dmul>
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	0006      	movs	r6, r0
 8009840:	000f      	movs	r7, r1
 8009842:	f7f6 fe03 	bl	800044c <__aeabi_dcmpeq>
 8009846:	2800      	cmp	r0, #0
 8009848:	d089      	beq.n	800975e <_dtoa_r+0x67e>
 800984a:	e7bd      	b.n	80097c8 <_dtoa_r+0x6e8>
 800984c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800984e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009850:	9c06      	ldr	r4, [sp, #24]
 8009852:	2f00      	cmp	r7, #0
 8009854:	d014      	beq.n	8009880 <_dtoa_r+0x7a0>
 8009856:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009858:	2a01      	cmp	r2, #1
 800985a:	dd00      	ble.n	800985e <_dtoa_r+0x77e>
 800985c:	e0e4      	b.n	8009a28 <_dtoa_r+0x948>
 800985e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009860:	2a00      	cmp	r2, #0
 8009862:	d100      	bne.n	8009866 <_dtoa_r+0x786>
 8009864:	e0da      	b.n	8009a1c <_dtoa_r+0x93c>
 8009866:	4abb      	ldr	r2, [pc, #748]	@ (8009b54 <_dtoa_r+0xa74>)
 8009868:	189b      	adds	r3, r3, r2
 800986a:	9a06      	ldr	r2, [sp, #24]
 800986c:	2101      	movs	r1, #1
 800986e:	18d2      	adds	r2, r2, r3
 8009870:	9206      	str	r2, [sp, #24]
 8009872:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009874:	9803      	ldr	r0, [sp, #12]
 8009876:	18d3      	adds	r3, r2, r3
 8009878:	930d      	str	r3, [sp, #52]	@ 0x34
 800987a:	f000 fc23 	bl	800a0c4 <__i2b>
 800987e:	0007      	movs	r7, r0
 8009880:	2c00      	cmp	r4, #0
 8009882:	d00e      	beq.n	80098a2 <_dtoa_r+0x7c2>
 8009884:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009886:	2b00      	cmp	r3, #0
 8009888:	dd0b      	ble.n	80098a2 <_dtoa_r+0x7c2>
 800988a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800988c:	0023      	movs	r3, r4
 800988e:	4294      	cmp	r4, r2
 8009890:	dd00      	ble.n	8009894 <_dtoa_r+0x7b4>
 8009892:	0013      	movs	r3, r2
 8009894:	9a06      	ldr	r2, [sp, #24]
 8009896:	1ae4      	subs	r4, r4, r3
 8009898:	1ad2      	subs	r2, r2, r3
 800989a:	9206      	str	r2, [sp, #24]
 800989c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80098a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d021      	beq.n	80098ec <_dtoa_r+0x80c>
 80098a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d100      	bne.n	80098b0 <_dtoa_r+0x7d0>
 80098ae:	e0d3      	b.n	8009a58 <_dtoa_r+0x978>
 80098b0:	9e05      	ldr	r6, [sp, #20]
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	d014      	beq.n	80098e0 <_dtoa_r+0x800>
 80098b6:	0039      	movs	r1, r7
 80098b8:	002a      	movs	r2, r5
 80098ba:	9803      	ldr	r0, [sp, #12]
 80098bc:	f000 fcc4 	bl	800a248 <__pow5mult>
 80098c0:	9a05      	ldr	r2, [sp, #20]
 80098c2:	0001      	movs	r1, r0
 80098c4:	0007      	movs	r7, r0
 80098c6:	9803      	ldr	r0, [sp, #12]
 80098c8:	f000 fc14 	bl	800a0f4 <__multiply>
 80098cc:	0006      	movs	r6, r0
 80098ce:	9905      	ldr	r1, [sp, #20]
 80098d0:	9803      	ldr	r0, [sp, #12]
 80098d2:	f000 fb3f 	bl	8009f54 <_Bfree>
 80098d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098d8:	9605      	str	r6, [sp, #20]
 80098da:	1b5b      	subs	r3, r3, r5
 80098dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098de:	d005      	beq.n	80098ec <_dtoa_r+0x80c>
 80098e0:	0031      	movs	r1, r6
 80098e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098e4:	9803      	ldr	r0, [sp, #12]
 80098e6:	f000 fcaf 	bl	800a248 <__pow5mult>
 80098ea:	9005      	str	r0, [sp, #20]
 80098ec:	2101      	movs	r1, #1
 80098ee:	9803      	ldr	r0, [sp, #12]
 80098f0:	f000 fbe8 	bl	800a0c4 <__i2b>
 80098f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80098f6:	0006      	movs	r6, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d100      	bne.n	80098fe <_dtoa_r+0x81e>
 80098fc:	e1bc      	b.n	8009c78 <_dtoa_r+0xb98>
 80098fe:	001a      	movs	r2, r3
 8009900:	0001      	movs	r1, r0
 8009902:	9803      	ldr	r0, [sp, #12]
 8009904:	f000 fca0 	bl	800a248 <__pow5mult>
 8009908:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800990a:	0006      	movs	r6, r0
 800990c:	2500      	movs	r5, #0
 800990e:	2b01      	cmp	r3, #1
 8009910:	dc16      	bgt.n	8009940 <_dtoa_r+0x860>
 8009912:	2500      	movs	r5, #0
 8009914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009916:	42ab      	cmp	r3, r5
 8009918:	d10e      	bne.n	8009938 <_dtoa_r+0x858>
 800991a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800991c:	031b      	lsls	r3, r3, #12
 800991e:	42ab      	cmp	r3, r5
 8009920:	d10a      	bne.n	8009938 <_dtoa_r+0x858>
 8009922:	4b8d      	ldr	r3, [pc, #564]	@ (8009b58 <_dtoa_r+0xa78>)
 8009924:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009926:	4213      	tst	r3, r2
 8009928:	d006      	beq.n	8009938 <_dtoa_r+0x858>
 800992a:	9b06      	ldr	r3, [sp, #24]
 800992c:	3501      	adds	r5, #1
 800992e:	3301      	adds	r3, #1
 8009930:	9306      	str	r3, [sp, #24]
 8009932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009934:	3301      	adds	r3, #1
 8009936:	930d      	str	r3, [sp, #52]	@ 0x34
 8009938:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800993a:	2001      	movs	r0, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <_dtoa_r+0x872>
 8009940:	6933      	ldr	r3, [r6, #16]
 8009942:	3303      	adds	r3, #3
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	18f3      	adds	r3, r6, r3
 8009948:	6858      	ldr	r0, [r3, #4]
 800994a:	f000 fb6b 	bl	800a024 <__hi0bits>
 800994e:	2320      	movs	r3, #32
 8009950:	1a18      	subs	r0, r3, r0
 8009952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009954:	1818      	adds	r0, r3, r0
 8009956:	0002      	movs	r2, r0
 8009958:	231f      	movs	r3, #31
 800995a:	401a      	ands	r2, r3
 800995c:	4218      	tst	r0, r3
 800995e:	d100      	bne.n	8009962 <_dtoa_r+0x882>
 8009960:	e081      	b.n	8009a66 <_dtoa_r+0x986>
 8009962:	3301      	adds	r3, #1
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	2b04      	cmp	r3, #4
 8009968:	dd79      	ble.n	8009a5e <_dtoa_r+0x97e>
 800996a:	231c      	movs	r3, #28
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	9a06      	ldr	r2, [sp, #24]
 8009970:	18e4      	adds	r4, r4, r3
 8009972:	18d2      	adds	r2, r2, r3
 8009974:	9206      	str	r2, [sp, #24]
 8009976:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009978:	18d3      	adds	r3, r2, r3
 800997a:	930d      	str	r3, [sp, #52]	@ 0x34
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	2b00      	cmp	r3, #0
 8009980:	dd05      	ble.n	800998e <_dtoa_r+0x8ae>
 8009982:	001a      	movs	r2, r3
 8009984:	9905      	ldr	r1, [sp, #20]
 8009986:	9803      	ldr	r0, [sp, #12]
 8009988:	f000 fcba 	bl	800a300 <__lshift>
 800998c:	9005      	str	r0, [sp, #20]
 800998e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009990:	2b00      	cmp	r3, #0
 8009992:	dd05      	ble.n	80099a0 <_dtoa_r+0x8c0>
 8009994:	0031      	movs	r1, r6
 8009996:	001a      	movs	r2, r3
 8009998:	9803      	ldr	r0, [sp, #12]
 800999a:	f000 fcb1 	bl	800a300 <__lshift>
 800999e:	0006      	movs	r6, r0
 80099a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d061      	beq.n	8009a6a <_dtoa_r+0x98a>
 80099a6:	0031      	movs	r1, r6
 80099a8:	9805      	ldr	r0, [sp, #20]
 80099aa:	f000 fd15 	bl	800a3d8 <__mcmp>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	da5b      	bge.n	8009a6a <_dtoa_r+0x98a>
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	220a      	movs	r2, #10
 80099b6:	3b01      	subs	r3, #1
 80099b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80099ba:	9905      	ldr	r1, [sp, #20]
 80099bc:	2300      	movs	r3, #0
 80099be:	9803      	ldr	r0, [sp, #12]
 80099c0:	f000 faec 	bl	8009f9c <__multadd>
 80099c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099c6:	9005      	str	r0, [sp, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d100      	bne.n	80099ce <_dtoa_r+0x8ee>
 80099cc:	e15b      	b.n	8009c86 <_dtoa_r+0xba6>
 80099ce:	2300      	movs	r3, #0
 80099d0:	0039      	movs	r1, r7
 80099d2:	220a      	movs	r2, #10
 80099d4:	9803      	ldr	r0, [sp, #12]
 80099d6:	f000 fae1 	bl	8009f9c <__multadd>
 80099da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099dc:	0007      	movs	r7, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dc4d      	bgt.n	8009a7e <_dtoa_r+0x99e>
 80099e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	dd46      	ble.n	8009a76 <_dtoa_r+0x996>
 80099e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d000      	beq.n	80099f0 <_dtoa_r+0x910>
 80099ee:	e5db      	b.n	80095a8 <_dtoa_r+0x4c8>
 80099f0:	0031      	movs	r1, r6
 80099f2:	2205      	movs	r2, #5
 80099f4:	9803      	ldr	r0, [sp, #12]
 80099f6:	f000 fad1 	bl	8009f9c <__multadd>
 80099fa:	0006      	movs	r6, r0
 80099fc:	0001      	movs	r1, r0
 80099fe:	9805      	ldr	r0, [sp, #20]
 8009a00:	f000 fcea 	bl	800a3d8 <__mcmp>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	dc00      	bgt.n	8009a0a <_dtoa_r+0x92a>
 8009a08:	e5ce      	b.n	80095a8 <_dtoa_r+0x4c8>
 8009a0a:	9b08      	ldr	r3, [sp, #32]
 8009a0c:	9a08      	ldr	r2, [sp, #32]
 8009a0e:	1c5c      	adds	r4, r3, #1
 8009a10:	2331      	movs	r3, #49	@ 0x31
 8009a12:	7013      	strb	r3, [r2, #0]
 8009a14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a16:	3301      	adds	r3, #1
 8009a18:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a1a:	e5c9      	b.n	80095b0 <_dtoa_r+0x4d0>
 8009a1c:	2336      	movs	r3, #54	@ 0x36
 8009a1e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a20:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009a22:	1a9b      	subs	r3, r3, r2
 8009a24:	9c06      	ldr	r4, [sp, #24]
 8009a26:	e720      	b.n	800986a <_dtoa_r+0x78a>
 8009a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2a:	1e5d      	subs	r5, r3, #1
 8009a2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2e:	42ab      	cmp	r3, r5
 8009a30:	db08      	blt.n	8009a44 <_dtoa_r+0x964>
 8009a32:	1b5d      	subs	r5, r3, r5
 8009a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	daf4      	bge.n	8009a24 <_dtoa_r+0x944>
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a3e:	1a9c      	subs	r4, r3, r2
 8009a40:	2300      	movs	r3, #0
 8009a42:	e712      	b.n	800986a <_dtoa_r+0x78a>
 8009a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a48:	1aeb      	subs	r3, r5, r3
 8009a4a:	18d3      	adds	r3, r2, r3
 8009a4c:	9314      	str	r3, [sp, #80]	@ 0x50
 8009a4e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009a50:	9c06      	ldr	r4, [sp, #24]
 8009a52:	2500      	movs	r5, #0
 8009a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a56:	e708      	b.n	800986a <_dtoa_r+0x78a>
 8009a58:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a5a:	9905      	ldr	r1, [sp, #20]
 8009a5c:	e742      	b.n	80098e4 <_dtoa_r+0x804>
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d08c      	beq.n	800997c <_dtoa_r+0x89c>
 8009a62:	331c      	adds	r3, #28
 8009a64:	e783      	b.n	800996e <_dtoa_r+0x88e>
 8009a66:	0013      	movs	r3, r2
 8009a68:	e7fb      	b.n	8009a62 <_dtoa_r+0x982>
 8009a6a:	9b04      	ldr	r3, [sp, #16]
 8009a6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a70:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	ddb5      	ble.n	80099e2 <_dtoa_r+0x902>
 8009a76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d100      	bne.n	8009a7e <_dtoa_r+0x99e>
 8009a7c:	e107      	b.n	8009c8e <_dtoa_r+0xbae>
 8009a7e:	2c00      	cmp	r4, #0
 8009a80:	dd05      	ble.n	8009a8e <_dtoa_r+0x9ae>
 8009a82:	0039      	movs	r1, r7
 8009a84:	0022      	movs	r2, r4
 8009a86:	9803      	ldr	r0, [sp, #12]
 8009a88:	f000 fc3a 	bl	800a300 <__lshift>
 8009a8c:	0007      	movs	r7, r0
 8009a8e:	9704      	str	r7, [sp, #16]
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	d020      	beq.n	8009ad6 <_dtoa_r+0x9f6>
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	9803      	ldr	r0, [sp, #12]
 8009a98:	f000 fa18 	bl	8009ecc <_Balloc>
 8009a9c:	1e04      	subs	r4, r0, #0
 8009a9e:	d10c      	bne.n	8009aba <_dtoa_r+0x9da>
 8009aa0:	0022      	movs	r2, r4
 8009aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8009b5c <_dtoa_r+0xa7c>)
 8009aa4:	482e      	ldr	r0, [pc, #184]	@ (8009b60 <_dtoa_r+0xa80>)
 8009aa6:	492f      	ldr	r1, [pc, #188]	@ (8009b64 <_dtoa_r+0xa84>)
 8009aa8:	f7ff fb2f 	bl	800910a <_dtoa_r+0x2a>
 8009aac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009aae:	0037      	movs	r7, r6
 8009ab0:	e7ab      	b.n	8009a0a <_dtoa_r+0x92a>
 8009ab2:	9b04      	ldr	r3, [sp, #16]
 8009ab4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009ab6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ab8:	e7f9      	b.n	8009aae <_dtoa_r+0x9ce>
 8009aba:	0039      	movs	r1, r7
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	310c      	adds	r1, #12
 8009ac0:	3202      	adds	r2, #2
 8009ac2:	0092      	lsls	r2, r2, #2
 8009ac4:	300c      	adds	r0, #12
 8009ac6:	f001 f835 	bl	800ab34 <memcpy>
 8009aca:	2201      	movs	r2, #1
 8009acc:	0021      	movs	r1, r4
 8009ace:	9803      	ldr	r0, [sp, #12]
 8009ad0:	f000 fc16 	bl	800a300 <__lshift>
 8009ad4:	9004      	str	r0, [sp, #16]
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ada:	9306      	str	r3, [sp, #24]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	189b      	adds	r3, r3, r2
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009aea:	0031      	movs	r1, r6
 8009aec:	9805      	ldr	r0, [sp, #20]
 8009aee:	f7ff fa71 	bl	8008fd4 <quorem>
 8009af2:	0039      	movs	r1, r7
 8009af4:	0005      	movs	r5, r0
 8009af6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009af8:	9805      	ldr	r0, [sp, #20]
 8009afa:	f000 fc6d 	bl	800a3d8 <__mcmp>
 8009afe:	9a04      	ldr	r2, [sp, #16]
 8009b00:	900d      	str	r0, [sp, #52]	@ 0x34
 8009b02:	0031      	movs	r1, r6
 8009b04:	9803      	ldr	r0, [sp, #12]
 8009b06:	f000 fc83 	bl	800a410 <__mdiff>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	68c3      	ldr	r3, [r0, #12]
 8009b0e:	0004      	movs	r4, r0
 8009b10:	3530      	adds	r5, #48	@ 0x30
 8009b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <_dtoa_r+0xa42>
 8009b18:	0001      	movs	r1, r0
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f000 fc5c 	bl	800a3d8 <__mcmp>
 8009b20:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b22:	0021      	movs	r1, r4
 8009b24:	9803      	ldr	r0, [sp, #12]
 8009b26:	f000 fa15 	bl	8009f54 <_Bfree>
 8009b2a:	9b06      	ldr	r3, [sp, #24]
 8009b2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009b2e:	1c5c      	adds	r4, r3, #1
 8009b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b32:	4313      	orrs	r3, r2
 8009b34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b36:	4313      	orrs	r3, r2
 8009b38:	d116      	bne.n	8009b68 <_dtoa_r+0xa88>
 8009b3a:	2d39      	cmp	r5, #57	@ 0x39
 8009b3c:	d02f      	beq.n	8009b9e <_dtoa_r+0xabe>
 8009b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dd01      	ble.n	8009b48 <_dtoa_r+0xa68>
 8009b44:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009b46:	3531      	adds	r5, #49	@ 0x31
 8009b48:	9b06      	ldr	r3, [sp, #24]
 8009b4a:	701d      	strb	r5, [r3, #0]
 8009b4c:	e532      	b.n	80095b4 <_dtoa_r+0x4d4>
 8009b4e:	46c0      	nop			@ (mov r8, r8)
 8009b50:	40240000 	.word	0x40240000
 8009b54:	00000433 	.word	0x00000433
 8009b58:	7ff00000 	.word	0x7ff00000
 8009b5c:	0800af88 	.word	0x0800af88
 8009b60:	0800af30 	.word	0x0800af30
 8009b64:	000002ef 	.word	0x000002ef
 8009b68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	db04      	blt.n	8009b78 <_dtoa_r+0xa98>
 8009b6e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009b70:	4313      	orrs	r3, r2
 8009b72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b74:	4313      	orrs	r3, r2
 8009b76:	d11e      	bne.n	8009bb6 <_dtoa_r+0xad6>
 8009b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dde4      	ble.n	8009b48 <_dtoa_r+0xa68>
 8009b7e:	9905      	ldr	r1, [sp, #20]
 8009b80:	2201      	movs	r2, #1
 8009b82:	9803      	ldr	r0, [sp, #12]
 8009b84:	f000 fbbc 	bl	800a300 <__lshift>
 8009b88:	0031      	movs	r1, r6
 8009b8a:	9005      	str	r0, [sp, #20]
 8009b8c:	f000 fc24 	bl	800a3d8 <__mcmp>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	dc02      	bgt.n	8009b9a <_dtoa_r+0xaba>
 8009b94:	d1d8      	bne.n	8009b48 <_dtoa_r+0xa68>
 8009b96:	07eb      	lsls	r3, r5, #31
 8009b98:	d5d6      	bpl.n	8009b48 <_dtoa_r+0xa68>
 8009b9a:	2d39      	cmp	r5, #57	@ 0x39
 8009b9c:	d1d2      	bne.n	8009b44 <_dtoa_r+0xa64>
 8009b9e:	2339      	movs	r3, #57	@ 0x39
 8009ba0:	9a06      	ldr	r2, [sp, #24]
 8009ba2:	7013      	strb	r3, [r2, #0]
 8009ba4:	0023      	movs	r3, r4
 8009ba6:	001c      	movs	r4, r3
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	781a      	ldrb	r2, [r3, #0]
 8009bac:	2a39      	cmp	r2, #57	@ 0x39
 8009bae:	d050      	beq.n	8009c52 <_dtoa_r+0xb72>
 8009bb0:	3201      	adds	r2, #1
 8009bb2:	701a      	strb	r2, [r3, #0]
 8009bb4:	e4fe      	b.n	80095b4 <_dtoa_r+0x4d4>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dd03      	ble.n	8009bc4 <_dtoa_r+0xae4>
 8009bbc:	2d39      	cmp	r5, #57	@ 0x39
 8009bbe:	d0ee      	beq.n	8009b9e <_dtoa_r+0xabe>
 8009bc0:	3501      	adds	r5, #1
 8009bc2:	e7c1      	b.n	8009b48 <_dtoa_r+0xa68>
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	9a06      	ldr	r2, [sp, #24]
 8009bc8:	701d      	strb	r5, [r3, #0]
 8009bca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d02b      	beq.n	8009c28 <_dtoa_r+0xb48>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	220a      	movs	r2, #10
 8009bd4:	9905      	ldr	r1, [sp, #20]
 8009bd6:	9803      	ldr	r0, [sp, #12]
 8009bd8:	f000 f9e0 	bl	8009f9c <__multadd>
 8009bdc:	9b04      	ldr	r3, [sp, #16]
 8009bde:	9005      	str	r0, [sp, #20]
 8009be0:	429f      	cmp	r7, r3
 8009be2:	d109      	bne.n	8009bf8 <_dtoa_r+0xb18>
 8009be4:	0039      	movs	r1, r7
 8009be6:	2300      	movs	r3, #0
 8009be8:	220a      	movs	r2, #10
 8009bea:	9803      	ldr	r0, [sp, #12]
 8009bec:	f000 f9d6 	bl	8009f9c <__multadd>
 8009bf0:	0007      	movs	r7, r0
 8009bf2:	9004      	str	r0, [sp, #16]
 8009bf4:	9406      	str	r4, [sp, #24]
 8009bf6:	e778      	b.n	8009aea <_dtoa_r+0xa0a>
 8009bf8:	0039      	movs	r1, r7
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	9803      	ldr	r0, [sp, #12]
 8009c00:	f000 f9cc 	bl	8009f9c <__multadd>
 8009c04:	2300      	movs	r3, #0
 8009c06:	0007      	movs	r7, r0
 8009c08:	220a      	movs	r2, #10
 8009c0a:	9904      	ldr	r1, [sp, #16]
 8009c0c:	9803      	ldr	r0, [sp, #12]
 8009c0e:	f000 f9c5 	bl	8009f9c <__multadd>
 8009c12:	9004      	str	r0, [sp, #16]
 8009c14:	e7ee      	b.n	8009bf4 <_dtoa_r+0xb14>
 8009c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c18:	2401      	movs	r4, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	dd00      	ble.n	8009c20 <_dtoa_r+0xb40>
 8009c1e:	001c      	movs	r4, r3
 8009c20:	9704      	str	r7, [sp, #16]
 8009c22:	2700      	movs	r7, #0
 8009c24:	9b08      	ldr	r3, [sp, #32]
 8009c26:	191c      	adds	r4, r3, r4
 8009c28:	9905      	ldr	r1, [sp, #20]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	9803      	ldr	r0, [sp, #12]
 8009c2e:	f000 fb67 	bl	800a300 <__lshift>
 8009c32:	0031      	movs	r1, r6
 8009c34:	9005      	str	r0, [sp, #20]
 8009c36:	f000 fbcf 	bl	800a3d8 <__mcmp>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	dcb2      	bgt.n	8009ba4 <_dtoa_r+0xac4>
 8009c3e:	d101      	bne.n	8009c44 <_dtoa_r+0xb64>
 8009c40:	07ed      	lsls	r5, r5, #31
 8009c42:	d4af      	bmi.n	8009ba4 <_dtoa_r+0xac4>
 8009c44:	0023      	movs	r3, r4
 8009c46:	001c      	movs	r4, r3
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	2a30      	cmp	r2, #48	@ 0x30
 8009c4e:	d0fa      	beq.n	8009c46 <_dtoa_r+0xb66>
 8009c50:	e4b0      	b.n	80095b4 <_dtoa_r+0x4d4>
 8009c52:	9a08      	ldr	r2, [sp, #32]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d1a6      	bne.n	8009ba6 <_dtoa_r+0xac6>
 8009c58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c5e:	2331      	movs	r3, #49	@ 0x31
 8009c60:	7013      	strb	r3, [r2, #0]
 8009c62:	e4a7      	b.n	80095b4 <_dtoa_r+0x4d4>
 8009c64:	4b14      	ldr	r3, [pc, #80]	@ (8009cb8 <_dtoa_r+0xbd8>)
 8009c66:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009c68:	9308      	str	r3, [sp, #32]
 8009c6a:	4b14      	ldr	r3, [pc, #80]	@ (8009cbc <_dtoa_r+0xbdc>)
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	d001      	beq.n	8009c74 <_dtoa_r+0xb94>
 8009c70:	f7ff fa7e 	bl	8009170 <_dtoa_r+0x90>
 8009c74:	f7ff fa7e 	bl	8009174 <_dtoa_r+0x94>
 8009c78:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	dc00      	bgt.n	8009c80 <_dtoa_r+0xba0>
 8009c7e:	e648      	b.n	8009912 <_dtoa_r+0x832>
 8009c80:	2001      	movs	r0, #1
 8009c82:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009c84:	e665      	b.n	8009952 <_dtoa_r+0x872>
 8009c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dc00      	bgt.n	8009c8e <_dtoa_r+0xbae>
 8009c8c:	e6a9      	b.n	80099e2 <_dtoa_r+0x902>
 8009c8e:	2400      	movs	r4, #0
 8009c90:	0031      	movs	r1, r6
 8009c92:	9805      	ldr	r0, [sp, #20]
 8009c94:	f7ff f99e 	bl	8008fd4 <quorem>
 8009c98:	9b08      	ldr	r3, [sp, #32]
 8009c9a:	3030      	adds	r0, #48	@ 0x30
 8009c9c:	5518      	strb	r0, [r3, r4]
 8009c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ca0:	3401      	adds	r4, #1
 8009ca2:	0005      	movs	r5, r0
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	ddb6      	ble.n	8009c16 <_dtoa_r+0xb36>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	220a      	movs	r2, #10
 8009cac:	9905      	ldr	r1, [sp, #20]
 8009cae:	9803      	ldr	r0, [sp, #12]
 8009cb0:	f000 f974 	bl	8009f9c <__multadd>
 8009cb4:	9005      	str	r0, [sp, #20]
 8009cb6:	e7eb      	b.n	8009c90 <_dtoa_r+0xbb0>
 8009cb8:	0800af0c 	.word	0x0800af0c
 8009cbc:	0800af14 	.word	0x0800af14

08009cc0 <_free_r>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	0005      	movs	r5, r0
 8009cc4:	1e0c      	subs	r4, r1, #0
 8009cc6:	d010      	beq.n	8009cea <_free_r+0x2a>
 8009cc8:	3c04      	subs	r4, #4
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	da00      	bge.n	8009cd2 <_free_r+0x12>
 8009cd0:	18e4      	adds	r4, r4, r3
 8009cd2:	0028      	movs	r0, r5
 8009cd4:	f000 f8ea 	bl	8009eac <__malloc_lock>
 8009cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d50 <_free_r+0x90>)
 8009cda:	6813      	ldr	r3, [r2, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d105      	bne.n	8009cec <_free_r+0x2c>
 8009ce0:	6063      	str	r3, [r4, #4]
 8009ce2:	6014      	str	r4, [r2, #0]
 8009ce4:	0028      	movs	r0, r5
 8009ce6:	f000 f8e9 	bl	8009ebc <__malloc_unlock>
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	d908      	bls.n	8009d02 <_free_r+0x42>
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	1821      	adds	r1, r4, r0
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	d1f3      	bne.n	8009ce0 <_free_r+0x20>
 8009cf8:	6819      	ldr	r1, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	1809      	adds	r1, r1, r0
 8009cfe:	6021      	str	r1, [r4, #0]
 8009d00:	e7ee      	b.n	8009ce0 <_free_r+0x20>
 8009d02:	001a      	movs	r2, r3
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <_free_r+0x4e>
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	d9f9      	bls.n	8009d02 <_free_r+0x42>
 8009d0e:	6811      	ldr	r1, [r2, #0]
 8009d10:	1850      	adds	r0, r2, r1
 8009d12:	42a0      	cmp	r0, r4
 8009d14:	d10b      	bne.n	8009d2e <_free_r+0x6e>
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	1809      	adds	r1, r1, r0
 8009d1a:	1850      	adds	r0, r2, r1
 8009d1c:	6011      	str	r1, [r2, #0]
 8009d1e:	4283      	cmp	r3, r0
 8009d20:	d1e0      	bne.n	8009ce4 <_free_r+0x24>
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	1841      	adds	r1, r0, r1
 8009d28:	6011      	str	r1, [r2, #0]
 8009d2a:	6053      	str	r3, [r2, #4]
 8009d2c:	e7da      	b.n	8009ce4 <_free_r+0x24>
 8009d2e:	42a0      	cmp	r0, r4
 8009d30:	d902      	bls.n	8009d38 <_free_r+0x78>
 8009d32:	230c      	movs	r3, #12
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	e7d5      	b.n	8009ce4 <_free_r+0x24>
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	1821      	adds	r1, r4, r0
 8009d3c:	428b      	cmp	r3, r1
 8009d3e:	d103      	bne.n	8009d48 <_free_r+0x88>
 8009d40:	6819      	ldr	r1, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	1809      	adds	r1, r1, r0
 8009d46:	6021      	str	r1, [r4, #0]
 8009d48:	6063      	str	r3, [r4, #4]
 8009d4a:	6054      	str	r4, [r2, #4]
 8009d4c:	e7ca      	b.n	8009ce4 <_free_r+0x24>
 8009d4e:	46c0      	nop			@ (mov r8, r8)
 8009d50:	20000504 	.word	0x20000504

08009d54 <malloc>:
 8009d54:	b510      	push	{r4, lr}
 8009d56:	4b03      	ldr	r3, [pc, #12]	@ (8009d64 <malloc+0x10>)
 8009d58:	0001      	movs	r1, r0
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	f000 f826 	bl	8009dac <_malloc_r>
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	46c0      	nop			@ (mov r8, r8)
 8009d64:	20000018 	.word	0x20000018

08009d68 <sbrk_aligned>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8009da8 <sbrk_aligned+0x40>)
 8009d6c:	000d      	movs	r5, r1
 8009d6e:	6831      	ldr	r1, [r6, #0]
 8009d70:	0004      	movs	r4, r0
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d102      	bne.n	8009d7c <sbrk_aligned+0x14>
 8009d76:	f000 fecb 	bl	800ab10 <_sbrk_r>
 8009d7a:	6030      	str	r0, [r6, #0]
 8009d7c:	0029      	movs	r1, r5
 8009d7e:	0020      	movs	r0, r4
 8009d80:	f000 fec6 	bl	800ab10 <_sbrk_r>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d103      	bne.n	8009d90 <sbrk_aligned+0x28>
 8009d88:	2501      	movs	r5, #1
 8009d8a:	426d      	negs	r5, r5
 8009d8c:	0028      	movs	r0, r5
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}
 8009d90:	2303      	movs	r3, #3
 8009d92:	1cc5      	adds	r5, r0, #3
 8009d94:	439d      	bics	r5, r3
 8009d96:	42a8      	cmp	r0, r5
 8009d98:	d0f8      	beq.n	8009d8c <sbrk_aligned+0x24>
 8009d9a:	1a29      	subs	r1, r5, r0
 8009d9c:	0020      	movs	r0, r4
 8009d9e:	f000 feb7 	bl	800ab10 <_sbrk_r>
 8009da2:	3001      	adds	r0, #1
 8009da4:	d1f2      	bne.n	8009d8c <sbrk_aligned+0x24>
 8009da6:	e7ef      	b.n	8009d88 <sbrk_aligned+0x20>
 8009da8:	20000500 	.word	0x20000500

08009dac <_malloc_r>:
 8009dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dae:	2203      	movs	r2, #3
 8009db0:	1ccb      	adds	r3, r1, #3
 8009db2:	4393      	bics	r3, r2
 8009db4:	3308      	adds	r3, #8
 8009db6:	0005      	movs	r5, r0
 8009db8:	001f      	movs	r7, r3
 8009dba:	2b0c      	cmp	r3, #12
 8009dbc:	d234      	bcs.n	8009e28 <_malloc_r+0x7c>
 8009dbe:	270c      	movs	r7, #12
 8009dc0:	42b9      	cmp	r1, r7
 8009dc2:	d833      	bhi.n	8009e2c <_malloc_r+0x80>
 8009dc4:	0028      	movs	r0, r5
 8009dc6:	f000 f871 	bl	8009eac <__malloc_lock>
 8009dca:	4e37      	ldr	r6, [pc, #220]	@ (8009ea8 <_malloc_r+0xfc>)
 8009dcc:	6833      	ldr	r3, [r6, #0]
 8009dce:	001c      	movs	r4, r3
 8009dd0:	2c00      	cmp	r4, #0
 8009dd2:	d12f      	bne.n	8009e34 <_malloc_r+0x88>
 8009dd4:	0039      	movs	r1, r7
 8009dd6:	0028      	movs	r0, r5
 8009dd8:	f7ff ffc6 	bl	8009d68 <sbrk_aligned>
 8009ddc:	0004      	movs	r4, r0
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d15f      	bne.n	8009ea2 <_malloc_r+0xf6>
 8009de2:	6834      	ldr	r4, [r6, #0]
 8009de4:	9400      	str	r4, [sp, #0]
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d14a      	bne.n	8009e82 <_malloc_r+0xd6>
 8009dec:	2c00      	cmp	r4, #0
 8009dee:	d052      	beq.n	8009e96 <_malloc_r+0xea>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	0028      	movs	r0, r5
 8009df4:	18e3      	adds	r3, r4, r3
 8009df6:	9900      	ldr	r1, [sp, #0]
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	f000 fe89 	bl	800ab10 <_sbrk_r>
 8009dfe:	9b01      	ldr	r3, [sp, #4]
 8009e00:	4283      	cmp	r3, r0
 8009e02:	d148      	bne.n	8009e96 <_malloc_r+0xea>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	0028      	movs	r0, r5
 8009e08:	1aff      	subs	r7, r7, r3
 8009e0a:	0039      	movs	r1, r7
 8009e0c:	f7ff ffac 	bl	8009d68 <sbrk_aligned>
 8009e10:	3001      	adds	r0, #1
 8009e12:	d040      	beq.n	8009e96 <_malloc_r+0xea>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	19db      	adds	r3, r3, r7
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	6833      	ldr	r3, [r6, #0]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	d133      	bne.n	8009e8a <_malloc_r+0xde>
 8009e22:	9b00      	ldr	r3, [sp, #0]
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	e019      	b.n	8009e5c <_malloc_r+0xb0>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dac9      	bge.n	8009dc0 <_malloc_r+0x14>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	602b      	str	r3, [r5, #0]
 8009e30:	2000      	movs	r0, #0
 8009e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e34:	6821      	ldr	r1, [r4, #0]
 8009e36:	1bc9      	subs	r1, r1, r7
 8009e38:	d420      	bmi.n	8009e7c <_malloc_r+0xd0>
 8009e3a:	290b      	cmp	r1, #11
 8009e3c:	d90a      	bls.n	8009e54 <_malloc_r+0xa8>
 8009e3e:	19e2      	adds	r2, r4, r7
 8009e40:	6027      	str	r7, [r4, #0]
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	d104      	bne.n	8009e50 <_malloc_r+0xa4>
 8009e46:	6032      	str	r2, [r6, #0]
 8009e48:	6863      	ldr	r3, [r4, #4]
 8009e4a:	6011      	str	r1, [r2, #0]
 8009e4c:	6053      	str	r3, [r2, #4]
 8009e4e:	e005      	b.n	8009e5c <_malloc_r+0xb0>
 8009e50:	605a      	str	r2, [r3, #4]
 8009e52:	e7f9      	b.n	8009e48 <_malloc_r+0x9c>
 8009e54:	6862      	ldr	r2, [r4, #4]
 8009e56:	42a3      	cmp	r3, r4
 8009e58:	d10e      	bne.n	8009e78 <_malloc_r+0xcc>
 8009e5a:	6032      	str	r2, [r6, #0]
 8009e5c:	0028      	movs	r0, r5
 8009e5e:	f000 f82d 	bl	8009ebc <__malloc_unlock>
 8009e62:	0020      	movs	r0, r4
 8009e64:	2207      	movs	r2, #7
 8009e66:	300b      	adds	r0, #11
 8009e68:	1d23      	adds	r3, r4, #4
 8009e6a:	4390      	bics	r0, r2
 8009e6c:	1ac2      	subs	r2, r0, r3
 8009e6e:	4298      	cmp	r0, r3
 8009e70:	d0df      	beq.n	8009e32 <_malloc_r+0x86>
 8009e72:	1a1b      	subs	r3, r3, r0
 8009e74:	50a3      	str	r3, [r4, r2]
 8009e76:	e7dc      	b.n	8009e32 <_malloc_r+0x86>
 8009e78:	605a      	str	r2, [r3, #4]
 8009e7a:	e7ef      	b.n	8009e5c <_malloc_r+0xb0>
 8009e7c:	0023      	movs	r3, r4
 8009e7e:	6864      	ldr	r4, [r4, #4]
 8009e80:	e7a6      	b.n	8009dd0 <_malloc_r+0x24>
 8009e82:	9c00      	ldr	r4, [sp, #0]
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	e7ad      	b.n	8009de6 <_malloc_r+0x3a>
 8009e8a:	001a      	movs	r2, r3
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	d1fb      	bne.n	8009e8a <_malloc_r+0xde>
 8009e92:	2300      	movs	r3, #0
 8009e94:	e7da      	b.n	8009e4c <_malloc_r+0xa0>
 8009e96:	230c      	movs	r3, #12
 8009e98:	0028      	movs	r0, r5
 8009e9a:	602b      	str	r3, [r5, #0]
 8009e9c:	f000 f80e 	bl	8009ebc <__malloc_unlock>
 8009ea0:	e7c6      	b.n	8009e30 <_malloc_r+0x84>
 8009ea2:	6007      	str	r7, [r0, #0]
 8009ea4:	e7da      	b.n	8009e5c <_malloc_r+0xb0>
 8009ea6:	46c0      	nop			@ (mov r8, r8)
 8009ea8:	20000504 	.word	0x20000504

08009eac <__malloc_lock>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	4802      	ldr	r0, [pc, #8]	@ (8009eb8 <__malloc_lock+0xc>)
 8009eb0:	f7ff f883 	bl	8008fba <__retarget_lock_acquire_recursive>
 8009eb4:	bd10      	pop	{r4, pc}
 8009eb6:	46c0      	nop			@ (mov r8, r8)
 8009eb8:	200004fc 	.word	0x200004fc

08009ebc <__malloc_unlock>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	4802      	ldr	r0, [pc, #8]	@ (8009ec8 <__malloc_unlock+0xc>)
 8009ec0:	f7ff f87c 	bl	8008fbc <__retarget_lock_release_recursive>
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	46c0      	nop			@ (mov r8, r8)
 8009ec8:	200004fc 	.word	0x200004fc

08009ecc <_Balloc>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	69c5      	ldr	r5, [r0, #28]
 8009ed0:	0006      	movs	r6, r0
 8009ed2:	000c      	movs	r4, r1
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	d10e      	bne.n	8009ef6 <_Balloc+0x2a>
 8009ed8:	2010      	movs	r0, #16
 8009eda:	f7ff ff3b 	bl	8009d54 <malloc>
 8009ede:	1e02      	subs	r2, r0, #0
 8009ee0:	61f0      	str	r0, [r6, #28]
 8009ee2:	d104      	bne.n	8009eee <_Balloc+0x22>
 8009ee4:	216b      	movs	r1, #107	@ 0x6b
 8009ee6:	4b19      	ldr	r3, [pc, #100]	@ (8009f4c <_Balloc+0x80>)
 8009ee8:	4819      	ldr	r0, [pc, #100]	@ (8009f50 <_Balloc+0x84>)
 8009eea:	f000 fe2d 	bl	800ab48 <__assert_func>
 8009eee:	6045      	str	r5, [r0, #4]
 8009ef0:	6085      	str	r5, [r0, #8]
 8009ef2:	6005      	str	r5, [r0, #0]
 8009ef4:	60c5      	str	r5, [r0, #12]
 8009ef6:	69f5      	ldr	r5, [r6, #28]
 8009ef8:	68eb      	ldr	r3, [r5, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d013      	beq.n	8009f26 <_Balloc+0x5a>
 8009efe:	69f3      	ldr	r3, [r6, #28]
 8009f00:	00a2      	lsls	r2, r4, #2
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	189b      	adds	r3, r3, r2
 8009f06:	6818      	ldr	r0, [r3, #0]
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d118      	bne.n	8009f3e <_Balloc+0x72>
 8009f0c:	2101      	movs	r1, #1
 8009f0e:	000d      	movs	r5, r1
 8009f10:	40a5      	lsls	r5, r4
 8009f12:	1d6a      	adds	r2, r5, #5
 8009f14:	0030      	movs	r0, r6
 8009f16:	0092      	lsls	r2, r2, #2
 8009f18:	f000 fe34 	bl	800ab84 <_calloc_r>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d00c      	beq.n	8009f3a <_Balloc+0x6e>
 8009f20:	6044      	str	r4, [r0, #4]
 8009f22:	6085      	str	r5, [r0, #8]
 8009f24:	e00d      	b.n	8009f42 <_Balloc+0x76>
 8009f26:	2221      	movs	r2, #33	@ 0x21
 8009f28:	2104      	movs	r1, #4
 8009f2a:	0030      	movs	r0, r6
 8009f2c:	f000 fe2a 	bl	800ab84 <_calloc_r>
 8009f30:	69f3      	ldr	r3, [r6, #28]
 8009f32:	60e8      	str	r0, [r5, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e1      	bne.n	8009efe <_Balloc+0x32>
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	bd70      	pop	{r4, r5, r6, pc}
 8009f3e:	6802      	ldr	r2, [r0, #0]
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	2300      	movs	r3, #0
 8009f44:	6103      	str	r3, [r0, #16]
 8009f46:	60c3      	str	r3, [r0, #12]
 8009f48:	e7f8      	b.n	8009f3c <_Balloc+0x70>
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	0800af19 	.word	0x0800af19
 8009f50:	0800af99 	.word	0x0800af99

08009f54 <_Bfree>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	69c6      	ldr	r6, [r0, #28]
 8009f58:	0005      	movs	r5, r0
 8009f5a:	000c      	movs	r4, r1
 8009f5c:	2e00      	cmp	r6, #0
 8009f5e:	d10e      	bne.n	8009f7e <_Bfree+0x2a>
 8009f60:	2010      	movs	r0, #16
 8009f62:	f7ff fef7 	bl	8009d54 <malloc>
 8009f66:	1e02      	subs	r2, r0, #0
 8009f68:	61e8      	str	r0, [r5, #28]
 8009f6a:	d104      	bne.n	8009f76 <_Bfree+0x22>
 8009f6c:	218f      	movs	r1, #143	@ 0x8f
 8009f6e:	4b09      	ldr	r3, [pc, #36]	@ (8009f94 <_Bfree+0x40>)
 8009f70:	4809      	ldr	r0, [pc, #36]	@ (8009f98 <_Bfree+0x44>)
 8009f72:	f000 fde9 	bl	800ab48 <__assert_func>
 8009f76:	6046      	str	r6, [r0, #4]
 8009f78:	6086      	str	r6, [r0, #8]
 8009f7a:	6006      	str	r6, [r0, #0]
 8009f7c:	60c6      	str	r6, [r0, #12]
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	d007      	beq.n	8009f92 <_Bfree+0x3e>
 8009f82:	69eb      	ldr	r3, [r5, #28]
 8009f84:	6862      	ldr	r2, [r4, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	0092      	lsls	r2, r2, #2
 8009f8a:	189b      	adds	r3, r3, r2
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	6022      	str	r2, [r4, #0]
 8009f90:	601c      	str	r4, [r3, #0]
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	0800af19 	.word	0x0800af19
 8009f98:	0800af99 	.word	0x0800af99

08009f9c <__multadd>:
 8009f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f9e:	000f      	movs	r7, r1
 8009fa0:	9001      	str	r0, [sp, #4]
 8009fa2:	000c      	movs	r4, r1
 8009fa4:	001e      	movs	r6, r3
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	690d      	ldr	r5, [r1, #16]
 8009faa:	3714      	adds	r7, #20
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	3001      	adds	r0, #1
 8009fb0:	b299      	uxth	r1, r3
 8009fb2:	4351      	muls	r1, r2
 8009fb4:	0c1b      	lsrs	r3, r3, #16
 8009fb6:	4353      	muls	r3, r2
 8009fb8:	1989      	adds	r1, r1, r6
 8009fba:	0c0e      	lsrs	r6, r1, #16
 8009fbc:	199b      	adds	r3, r3, r6
 8009fbe:	0c1e      	lsrs	r6, r3, #16
 8009fc0:	b289      	uxth	r1, r1
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	185b      	adds	r3, r3, r1
 8009fc6:	c708      	stmia	r7!, {r3}
 8009fc8:	4285      	cmp	r5, r0
 8009fca:	dcef      	bgt.n	8009fac <__multadd+0x10>
 8009fcc:	2e00      	cmp	r6, #0
 8009fce:	d022      	beq.n	800a016 <__multadd+0x7a>
 8009fd0:	68a3      	ldr	r3, [r4, #8]
 8009fd2:	42ab      	cmp	r3, r5
 8009fd4:	dc19      	bgt.n	800a00a <__multadd+0x6e>
 8009fd6:	6861      	ldr	r1, [r4, #4]
 8009fd8:	9801      	ldr	r0, [sp, #4]
 8009fda:	3101      	adds	r1, #1
 8009fdc:	f7ff ff76 	bl	8009ecc <_Balloc>
 8009fe0:	1e07      	subs	r7, r0, #0
 8009fe2:	d105      	bne.n	8009ff0 <__multadd+0x54>
 8009fe4:	003a      	movs	r2, r7
 8009fe6:	21ba      	movs	r1, #186	@ 0xba
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <__multadd+0x80>)
 8009fea:	480d      	ldr	r0, [pc, #52]	@ (800a020 <__multadd+0x84>)
 8009fec:	f000 fdac 	bl	800ab48 <__assert_func>
 8009ff0:	0021      	movs	r1, r4
 8009ff2:	6922      	ldr	r2, [r4, #16]
 8009ff4:	310c      	adds	r1, #12
 8009ff6:	3202      	adds	r2, #2
 8009ff8:	0092      	lsls	r2, r2, #2
 8009ffa:	300c      	adds	r0, #12
 8009ffc:	f000 fd9a 	bl	800ab34 <memcpy>
 800a000:	0021      	movs	r1, r4
 800a002:	9801      	ldr	r0, [sp, #4]
 800a004:	f7ff ffa6 	bl	8009f54 <_Bfree>
 800a008:	003c      	movs	r4, r7
 800a00a:	1d2b      	adds	r3, r5, #4
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	18e3      	adds	r3, r4, r3
 800a010:	3501      	adds	r5, #1
 800a012:	605e      	str	r6, [r3, #4]
 800a014:	6125      	str	r5, [r4, #16]
 800a016:	0020      	movs	r0, r4
 800a018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a01a:	46c0      	nop			@ (mov r8, r8)
 800a01c:	0800af88 	.word	0x0800af88
 800a020:	0800af99 	.word	0x0800af99

0800a024 <__hi0bits>:
 800a024:	2280      	movs	r2, #128	@ 0x80
 800a026:	0003      	movs	r3, r0
 800a028:	0252      	lsls	r2, r2, #9
 800a02a:	2000      	movs	r0, #0
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d201      	bcs.n	800a034 <__hi0bits+0x10>
 800a030:	041b      	lsls	r3, r3, #16
 800a032:	3010      	adds	r0, #16
 800a034:	2280      	movs	r2, #128	@ 0x80
 800a036:	0452      	lsls	r2, r2, #17
 800a038:	4293      	cmp	r3, r2
 800a03a:	d201      	bcs.n	800a040 <__hi0bits+0x1c>
 800a03c:	3008      	adds	r0, #8
 800a03e:	021b      	lsls	r3, r3, #8
 800a040:	2280      	movs	r2, #128	@ 0x80
 800a042:	0552      	lsls	r2, r2, #21
 800a044:	4293      	cmp	r3, r2
 800a046:	d201      	bcs.n	800a04c <__hi0bits+0x28>
 800a048:	3004      	adds	r0, #4
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	2280      	movs	r2, #128	@ 0x80
 800a04e:	05d2      	lsls	r2, r2, #23
 800a050:	4293      	cmp	r3, r2
 800a052:	d201      	bcs.n	800a058 <__hi0bits+0x34>
 800a054:	3002      	adds	r0, #2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	db03      	blt.n	800a064 <__hi0bits+0x40>
 800a05c:	3001      	adds	r0, #1
 800a05e:	4213      	tst	r3, r2
 800a060:	d100      	bne.n	800a064 <__hi0bits+0x40>
 800a062:	2020      	movs	r0, #32
 800a064:	4770      	bx	lr

0800a066 <__lo0bits>:
 800a066:	6803      	ldr	r3, [r0, #0]
 800a068:	0001      	movs	r1, r0
 800a06a:	2207      	movs	r2, #7
 800a06c:	0018      	movs	r0, r3
 800a06e:	4010      	ands	r0, r2
 800a070:	4213      	tst	r3, r2
 800a072:	d00d      	beq.n	800a090 <__lo0bits+0x2a>
 800a074:	3a06      	subs	r2, #6
 800a076:	2000      	movs	r0, #0
 800a078:	4213      	tst	r3, r2
 800a07a:	d105      	bne.n	800a088 <__lo0bits+0x22>
 800a07c:	3002      	adds	r0, #2
 800a07e:	4203      	tst	r3, r0
 800a080:	d003      	beq.n	800a08a <__lo0bits+0x24>
 800a082:	40d3      	lsrs	r3, r2
 800a084:	0010      	movs	r0, r2
 800a086:	600b      	str	r3, [r1, #0]
 800a088:	4770      	bx	lr
 800a08a:	089b      	lsrs	r3, r3, #2
 800a08c:	600b      	str	r3, [r1, #0]
 800a08e:	e7fb      	b.n	800a088 <__lo0bits+0x22>
 800a090:	b29a      	uxth	r2, r3
 800a092:	2a00      	cmp	r2, #0
 800a094:	d101      	bne.n	800a09a <__lo0bits+0x34>
 800a096:	2010      	movs	r0, #16
 800a098:	0c1b      	lsrs	r3, r3, #16
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	d101      	bne.n	800a0a4 <__lo0bits+0x3e>
 800a0a0:	3008      	adds	r0, #8
 800a0a2:	0a1b      	lsrs	r3, r3, #8
 800a0a4:	071a      	lsls	r2, r3, #28
 800a0a6:	d101      	bne.n	800a0ac <__lo0bits+0x46>
 800a0a8:	3004      	adds	r0, #4
 800a0aa:	091b      	lsrs	r3, r3, #4
 800a0ac:	079a      	lsls	r2, r3, #30
 800a0ae:	d101      	bne.n	800a0b4 <__lo0bits+0x4e>
 800a0b0:	3002      	adds	r0, #2
 800a0b2:	089b      	lsrs	r3, r3, #2
 800a0b4:	07da      	lsls	r2, r3, #31
 800a0b6:	d4e9      	bmi.n	800a08c <__lo0bits+0x26>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	085b      	lsrs	r3, r3, #1
 800a0bc:	d1e6      	bne.n	800a08c <__lo0bits+0x26>
 800a0be:	2020      	movs	r0, #32
 800a0c0:	e7e2      	b.n	800a088 <__lo0bits+0x22>
	...

0800a0c4 <__i2b>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	000c      	movs	r4, r1
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	f7ff feff 	bl	8009ecc <_Balloc>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d107      	bne.n	800a0e2 <__i2b+0x1e>
 800a0d2:	2146      	movs	r1, #70	@ 0x46
 800a0d4:	4c05      	ldr	r4, [pc, #20]	@ (800a0ec <__i2b+0x28>)
 800a0d6:	0002      	movs	r2, r0
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <__i2b+0x2c>)
 800a0da:	0020      	movs	r0, r4
 800a0dc:	31ff      	adds	r1, #255	@ 0xff
 800a0de:	f000 fd33 	bl	800ab48 <__assert_func>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	6144      	str	r4, [r0, #20]
 800a0e6:	6103      	str	r3, [r0, #16]
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	46c0      	nop			@ (mov r8, r8)
 800a0ec:	0800af99 	.word	0x0800af99
 800a0f0:	0800af88 	.word	0x0800af88

0800a0f4 <__multiply>:
 800a0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f6:	0014      	movs	r4, r2
 800a0f8:	690a      	ldr	r2, [r1, #16]
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	000d      	movs	r5, r1
 800a0fe:	b089      	sub	sp, #36	@ 0x24
 800a100:	429a      	cmp	r2, r3
 800a102:	db02      	blt.n	800a10a <__multiply+0x16>
 800a104:	0023      	movs	r3, r4
 800a106:	000c      	movs	r4, r1
 800a108:	001d      	movs	r5, r3
 800a10a:	6927      	ldr	r7, [r4, #16]
 800a10c:	692e      	ldr	r6, [r5, #16]
 800a10e:	6861      	ldr	r1, [r4, #4]
 800a110:	19bb      	adds	r3, r7, r6
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	19ba      	adds	r2, r7, r6
 800a118:	4293      	cmp	r3, r2
 800a11a:	da00      	bge.n	800a11e <__multiply+0x2a>
 800a11c:	3101      	adds	r1, #1
 800a11e:	f7ff fed5 	bl	8009ecc <_Balloc>
 800a122:	4684      	mov	ip, r0
 800a124:	2800      	cmp	r0, #0
 800a126:	d106      	bne.n	800a136 <__multiply+0x42>
 800a128:	21b1      	movs	r1, #177	@ 0xb1
 800a12a:	4662      	mov	r2, ip
 800a12c:	4b44      	ldr	r3, [pc, #272]	@ (800a240 <__multiply+0x14c>)
 800a12e:	4845      	ldr	r0, [pc, #276]	@ (800a244 <__multiply+0x150>)
 800a130:	0049      	lsls	r1, r1, #1
 800a132:	f000 fd09 	bl	800ab48 <__assert_func>
 800a136:	0002      	movs	r2, r0
 800a138:	19bb      	adds	r3, r7, r6
 800a13a:	3214      	adds	r2, #20
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	18d3      	adds	r3, r2, r3
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	2100      	movs	r1, #0
 800a144:	0013      	movs	r3, r2
 800a146:	9801      	ldr	r0, [sp, #4]
 800a148:	4283      	cmp	r3, r0
 800a14a:	d328      	bcc.n	800a19e <__multiply+0xaa>
 800a14c:	0023      	movs	r3, r4
 800a14e:	00bf      	lsls	r7, r7, #2
 800a150:	3314      	adds	r3, #20
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	3514      	adds	r5, #20
 800a156:	19db      	adds	r3, r3, r7
 800a158:	00b6      	lsls	r6, r6, #2
 800a15a:	9302      	str	r3, [sp, #8]
 800a15c:	19ab      	adds	r3, r5, r6
 800a15e:	9307      	str	r3, [sp, #28]
 800a160:	2304      	movs	r3, #4
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	0023      	movs	r3, r4
 800a166:	9902      	ldr	r1, [sp, #8]
 800a168:	3315      	adds	r3, #21
 800a16a:	4299      	cmp	r1, r3
 800a16c:	d305      	bcc.n	800a17a <__multiply+0x86>
 800a16e:	1b0c      	subs	r4, r1, r4
 800a170:	3c15      	subs	r4, #21
 800a172:	08a4      	lsrs	r4, r4, #2
 800a174:	3401      	adds	r4, #1
 800a176:	00a3      	lsls	r3, r4, #2
 800a178:	9305      	str	r3, [sp, #20]
 800a17a:	9b07      	ldr	r3, [sp, #28]
 800a17c:	429d      	cmp	r5, r3
 800a17e:	d310      	bcc.n	800a1a2 <__multiply+0xae>
 800a180:	9b00      	ldr	r3, [sp, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	dd05      	ble.n	800a192 <__multiply+0x9e>
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	3b04      	subs	r3, #4
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d052      	beq.n	800a238 <__multiply+0x144>
 800a192:	4663      	mov	r3, ip
 800a194:	4660      	mov	r0, ip
 800a196:	9a00      	ldr	r2, [sp, #0]
 800a198:	611a      	str	r2, [r3, #16]
 800a19a:	b009      	add	sp, #36	@ 0x24
 800a19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a19e:	c302      	stmia	r3!, {r1}
 800a1a0:	e7d1      	b.n	800a146 <__multiply+0x52>
 800a1a2:	682c      	ldr	r4, [r5, #0]
 800a1a4:	b2a4      	uxth	r4, r4
 800a1a6:	2c00      	cmp	r4, #0
 800a1a8:	d01f      	beq.n	800a1ea <__multiply+0xf6>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	0017      	movs	r7, r2
 800a1ae:	9e04      	ldr	r6, [sp, #16]
 800a1b0:	9303      	str	r3, [sp, #12]
 800a1b2:	ce08      	ldmia	r6!, {r3}
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	9306      	str	r3, [sp, #24]
 800a1b8:	466b      	mov	r3, sp
 800a1ba:	8b1b      	ldrh	r3, [r3, #24]
 800a1bc:	b288      	uxth	r0, r1
 800a1be:	4363      	muls	r3, r4
 800a1c0:	181b      	adds	r3, r3, r0
 800a1c2:	9803      	ldr	r0, [sp, #12]
 800a1c4:	0c09      	lsrs	r1, r1, #16
 800a1c6:	181b      	adds	r3, r3, r0
 800a1c8:	9806      	ldr	r0, [sp, #24]
 800a1ca:	0c00      	lsrs	r0, r0, #16
 800a1cc:	4360      	muls	r0, r4
 800a1ce:	1840      	adds	r0, r0, r1
 800a1d0:	0c19      	lsrs	r1, r3, #16
 800a1d2:	1841      	adds	r1, r0, r1
 800a1d4:	0c08      	lsrs	r0, r1, #16
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	0409      	lsls	r1, r1, #16
 800a1da:	4319      	orrs	r1, r3
 800a1dc:	9b02      	ldr	r3, [sp, #8]
 800a1de:	9003      	str	r0, [sp, #12]
 800a1e0:	c702      	stmia	r7!, {r1}
 800a1e2:	42b3      	cmp	r3, r6
 800a1e4:	d8e5      	bhi.n	800a1b2 <__multiply+0xbe>
 800a1e6:	9b05      	ldr	r3, [sp, #20]
 800a1e8:	50d0      	str	r0, [r2, r3]
 800a1ea:	682c      	ldr	r4, [r5, #0]
 800a1ec:	0c24      	lsrs	r4, r4, #16
 800a1ee:	d020      	beq.n	800a232 <__multiply+0x13e>
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	0010      	movs	r0, r2
 800a1f4:	6813      	ldr	r3, [r2, #0]
 800a1f6:	9e04      	ldr	r6, [sp, #16]
 800a1f8:	9103      	str	r1, [sp, #12]
 800a1fa:	6831      	ldr	r1, [r6, #0]
 800a1fc:	6807      	ldr	r7, [r0, #0]
 800a1fe:	b289      	uxth	r1, r1
 800a200:	4361      	muls	r1, r4
 800a202:	0c3f      	lsrs	r7, r7, #16
 800a204:	19c9      	adds	r1, r1, r7
 800a206:	9f03      	ldr	r7, [sp, #12]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	19c9      	adds	r1, r1, r7
 800a20c:	040f      	lsls	r7, r1, #16
 800a20e:	431f      	orrs	r7, r3
 800a210:	6007      	str	r7, [r0, #0]
 800a212:	ce80      	ldmia	r6!, {r7}
 800a214:	6843      	ldr	r3, [r0, #4]
 800a216:	0c3f      	lsrs	r7, r7, #16
 800a218:	4367      	muls	r7, r4
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	0c09      	lsrs	r1, r1, #16
 800a21e:	18fb      	adds	r3, r7, r3
 800a220:	185b      	adds	r3, r3, r1
 800a222:	0c19      	lsrs	r1, r3, #16
 800a224:	9103      	str	r1, [sp, #12]
 800a226:	9902      	ldr	r1, [sp, #8]
 800a228:	3004      	adds	r0, #4
 800a22a:	42b1      	cmp	r1, r6
 800a22c:	d8e5      	bhi.n	800a1fa <__multiply+0x106>
 800a22e:	9905      	ldr	r1, [sp, #20]
 800a230:	5053      	str	r3, [r2, r1]
 800a232:	3504      	adds	r5, #4
 800a234:	3204      	adds	r2, #4
 800a236:	e7a0      	b.n	800a17a <__multiply+0x86>
 800a238:	9b00      	ldr	r3, [sp, #0]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	e79f      	b.n	800a180 <__multiply+0x8c>
 800a240:	0800af88 	.word	0x0800af88
 800a244:	0800af99 	.word	0x0800af99

0800a248 <__pow5mult>:
 800a248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a24a:	2303      	movs	r3, #3
 800a24c:	0015      	movs	r5, r2
 800a24e:	0007      	movs	r7, r0
 800a250:	000e      	movs	r6, r1
 800a252:	401a      	ands	r2, r3
 800a254:	421d      	tst	r5, r3
 800a256:	d008      	beq.n	800a26a <__pow5mult+0x22>
 800a258:	4925      	ldr	r1, [pc, #148]	@ (800a2f0 <__pow5mult+0xa8>)
 800a25a:	3a01      	subs	r2, #1
 800a25c:	0092      	lsls	r2, r2, #2
 800a25e:	5852      	ldr	r2, [r2, r1]
 800a260:	2300      	movs	r3, #0
 800a262:	0031      	movs	r1, r6
 800a264:	f7ff fe9a 	bl	8009f9c <__multadd>
 800a268:	0006      	movs	r6, r0
 800a26a:	10ad      	asrs	r5, r5, #2
 800a26c:	d03d      	beq.n	800a2ea <__pow5mult+0xa2>
 800a26e:	69fc      	ldr	r4, [r7, #28]
 800a270:	2c00      	cmp	r4, #0
 800a272:	d10f      	bne.n	800a294 <__pow5mult+0x4c>
 800a274:	2010      	movs	r0, #16
 800a276:	f7ff fd6d 	bl	8009d54 <malloc>
 800a27a:	1e02      	subs	r2, r0, #0
 800a27c:	61f8      	str	r0, [r7, #28]
 800a27e:	d105      	bne.n	800a28c <__pow5mult+0x44>
 800a280:	21b4      	movs	r1, #180	@ 0xb4
 800a282:	4b1c      	ldr	r3, [pc, #112]	@ (800a2f4 <__pow5mult+0xac>)
 800a284:	481c      	ldr	r0, [pc, #112]	@ (800a2f8 <__pow5mult+0xb0>)
 800a286:	31ff      	adds	r1, #255	@ 0xff
 800a288:	f000 fc5e 	bl	800ab48 <__assert_func>
 800a28c:	6044      	str	r4, [r0, #4]
 800a28e:	6084      	str	r4, [r0, #8]
 800a290:	6004      	str	r4, [r0, #0]
 800a292:	60c4      	str	r4, [r0, #12]
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	689c      	ldr	r4, [r3, #8]
 800a298:	9301      	str	r3, [sp, #4]
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	d108      	bne.n	800a2b0 <__pow5mult+0x68>
 800a29e:	0038      	movs	r0, r7
 800a2a0:	4916      	ldr	r1, [pc, #88]	@ (800a2fc <__pow5mult+0xb4>)
 800a2a2:	f7ff ff0f 	bl	800a0c4 <__i2b>
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	0004      	movs	r4, r0
 800a2aa:	6098      	str	r0, [r3, #8]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	6003      	str	r3, [r0, #0]
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	421d      	tst	r5, r3
 800a2b4:	d00a      	beq.n	800a2cc <__pow5mult+0x84>
 800a2b6:	0031      	movs	r1, r6
 800a2b8:	0022      	movs	r2, r4
 800a2ba:	0038      	movs	r0, r7
 800a2bc:	f7ff ff1a 	bl	800a0f4 <__multiply>
 800a2c0:	0031      	movs	r1, r6
 800a2c2:	9001      	str	r0, [sp, #4]
 800a2c4:	0038      	movs	r0, r7
 800a2c6:	f7ff fe45 	bl	8009f54 <_Bfree>
 800a2ca:	9e01      	ldr	r6, [sp, #4]
 800a2cc:	106d      	asrs	r5, r5, #1
 800a2ce:	d00c      	beq.n	800a2ea <__pow5mult+0xa2>
 800a2d0:	6820      	ldr	r0, [r4, #0]
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d107      	bne.n	800a2e6 <__pow5mult+0x9e>
 800a2d6:	0022      	movs	r2, r4
 800a2d8:	0021      	movs	r1, r4
 800a2da:	0038      	movs	r0, r7
 800a2dc:	f7ff ff0a 	bl	800a0f4 <__multiply>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	6020      	str	r0, [r4, #0]
 800a2e4:	6003      	str	r3, [r0, #0]
 800a2e6:	0004      	movs	r4, r0
 800a2e8:	e7e2      	b.n	800a2b0 <__pow5mult+0x68>
 800a2ea:	0030      	movs	r0, r6
 800a2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2ee:	46c0      	nop			@ (mov r8, r8)
 800a2f0:	0800b04c 	.word	0x0800b04c
 800a2f4:	0800af19 	.word	0x0800af19
 800a2f8:	0800af99 	.word	0x0800af99
 800a2fc:	00000271 	.word	0x00000271

0800a300 <__lshift>:
 800a300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a302:	000c      	movs	r4, r1
 800a304:	0016      	movs	r6, r2
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	1157      	asrs	r7, r2, #5
 800a30a:	b085      	sub	sp, #20
 800a30c:	18fb      	adds	r3, r7, r3
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	3301      	adds	r3, #1
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	6849      	ldr	r1, [r1, #4]
 800a316:	68a3      	ldr	r3, [r4, #8]
 800a318:	9002      	str	r0, [sp, #8]
 800a31a:	9a00      	ldr	r2, [sp, #0]
 800a31c:	4293      	cmp	r3, r2
 800a31e:	db10      	blt.n	800a342 <__lshift+0x42>
 800a320:	9802      	ldr	r0, [sp, #8]
 800a322:	f7ff fdd3 	bl	8009ecc <_Balloc>
 800a326:	2300      	movs	r3, #0
 800a328:	0001      	movs	r1, r0
 800a32a:	0005      	movs	r5, r0
 800a32c:	001a      	movs	r2, r3
 800a32e:	3114      	adds	r1, #20
 800a330:	4298      	cmp	r0, r3
 800a332:	d10c      	bne.n	800a34e <__lshift+0x4e>
 800a334:	21ef      	movs	r1, #239	@ 0xef
 800a336:	002a      	movs	r2, r5
 800a338:	4b25      	ldr	r3, [pc, #148]	@ (800a3d0 <__lshift+0xd0>)
 800a33a:	4826      	ldr	r0, [pc, #152]	@ (800a3d4 <__lshift+0xd4>)
 800a33c:	0049      	lsls	r1, r1, #1
 800a33e:	f000 fc03 	bl	800ab48 <__assert_func>
 800a342:	3101      	adds	r1, #1
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	e7e8      	b.n	800a31a <__lshift+0x1a>
 800a348:	0098      	lsls	r0, r3, #2
 800a34a:	500a      	str	r2, [r1, r0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	42bb      	cmp	r3, r7
 800a350:	dbfa      	blt.n	800a348 <__lshift+0x48>
 800a352:	43fb      	mvns	r3, r7
 800a354:	17db      	asrs	r3, r3, #31
 800a356:	401f      	ands	r7, r3
 800a358:	00bf      	lsls	r7, r7, #2
 800a35a:	0023      	movs	r3, r4
 800a35c:	201f      	movs	r0, #31
 800a35e:	19c9      	adds	r1, r1, r7
 800a360:	0037      	movs	r7, r6
 800a362:	6922      	ldr	r2, [r4, #16]
 800a364:	3314      	adds	r3, #20
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	189a      	adds	r2, r3, r2
 800a36a:	4007      	ands	r7, r0
 800a36c:	4206      	tst	r6, r0
 800a36e:	d029      	beq.n	800a3c4 <__lshift+0xc4>
 800a370:	3001      	adds	r0, #1
 800a372:	1bc0      	subs	r0, r0, r7
 800a374:	9003      	str	r0, [sp, #12]
 800a376:	468c      	mov	ip, r1
 800a378:	2000      	movs	r0, #0
 800a37a:	681e      	ldr	r6, [r3, #0]
 800a37c:	40be      	lsls	r6, r7
 800a37e:	4306      	orrs	r6, r0
 800a380:	4660      	mov	r0, ip
 800a382:	c040      	stmia	r0!, {r6}
 800a384:	4684      	mov	ip, r0
 800a386:	9e03      	ldr	r6, [sp, #12]
 800a388:	cb01      	ldmia	r3!, {r0}
 800a38a:	40f0      	lsrs	r0, r6
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d8f4      	bhi.n	800a37a <__lshift+0x7a>
 800a390:	0026      	movs	r6, r4
 800a392:	3615      	adds	r6, #21
 800a394:	2304      	movs	r3, #4
 800a396:	42b2      	cmp	r2, r6
 800a398:	d304      	bcc.n	800a3a4 <__lshift+0xa4>
 800a39a:	1b13      	subs	r3, r2, r4
 800a39c:	3b15      	subs	r3, #21
 800a39e:	089b      	lsrs	r3, r3, #2
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	50c8      	str	r0, [r1, r3]
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d002      	beq.n	800a3b0 <__lshift+0xb0>
 800a3aa:	9b01      	ldr	r3, [sp, #4]
 800a3ac:	3302      	adds	r3, #2
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	9b00      	ldr	r3, [sp, #0]
 800a3b2:	9802      	ldr	r0, [sp, #8]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	0021      	movs	r1, r4
 800a3b8:	612b      	str	r3, [r5, #16]
 800a3ba:	f7ff fdcb 	bl	8009f54 <_Bfree>
 800a3be:	0028      	movs	r0, r5
 800a3c0:	b005      	add	sp, #20
 800a3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c4:	cb01      	ldmia	r3!, {r0}
 800a3c6:	c101      	stmia	r1!, {r0}
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d8fb      	bhi.n	800a3c4 <__lshift+0xc4>
 800a3cc:	e7f0      	b.n	800a3b0 <__lshift+0xb0>
 800a3ce:	46c0      	nop			@ (mov r8, r8)
 800a3d0:	0800af88 	.word	0x0800af88
 800a3d4:	0800af99 	.word	0x0800af99

0800a3d8 <__mcmp>:
 800a3d8:	b530      	push	{r4, r5, lr}
 800a3da:	690b      	ldr	r3, [r1, #16]
 800a3dc:	6904      	ldr	r4, [r0, #16]
 800a3de:	0002      	movs	r2, r0
 800a3e0:	1ae0      	subs	r0, r4, r3
 800a3e2:	429c      	cmp	r4, r3
 800a3e4:	d10f      	bne.n	800a406 <__mcmp+0x2e>
 800a3e6:	3214      	adds	r2, #20
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	3114      	adds	r1, #20
 800a3ec:	0014      	movs	r4, r2
 800a3ee:	18c9      	adds	r1, r1, r3
 800a3f0:	18d2      	adds	r2, r2, r3
 800a3f2:	3a04      	subs	r2, #4
 800a3f4:	3904      	subs	r1, #4
 800a3f6:	6815      	ldr	r5, [r2, #0]
 800a3f8:	680b      	ldr	r3, [r1, #0]
 800a3fa:	429d      	cmp	r5, r3
 800a3fc:	d004      	beq.n	800a408 <__mcmp+0x30>
 800a3fe:	2001      	movs	r0, #1
 800a400:	429d      	cmp	r5, r3
 800a402:	d200      	bcs.n	800a406 <__mcmp+0x2e>
 800a404:	3802      	subs	r0, #2
 800a406:	bd30      	pop	{r4, r5, pc}
 800a408:	4294      	cmp	r4, r2
 800a40a:	d3f2      	bcc.n	800a3f2 <__mcmp+0x1a>
 800a40c:	e7fb      	b.n	800a406 <__mcmp+0x2e>
	...

0800a410 <__mdiff>:
 800a410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a412:	000c      	movs	r4, r1
 800a414:	b087      	sub	sp, #28
 800a416:	9000      	str	r0, [sp, #0]
 800a418:	0011      	movs	r1, r2
 800a41a:	0020      	movs	r0, r4
 800a41c:	0017      	movs	r7, r2
 800a41e:	f7ff ffdb 	bl	800a3d8 <__mcmp>
 800a422:	1e05      	subs	r5, r0, #0
 800a424:	d110      	bne.n	800a448 <__mdiff+0x38>
 800a426:	0001      	movs	r1, r0
 800a428:	9800      	ldr	r0, [sp, #0]
 800a42a:	f7ff fd4f 	bl	8009ecc <_Balloc>
 800a42e:	1e02      	subs	r2, r0, #0
 800a430:	d104      	bne.n	800a43c <__mdiff+0x2c>
 800a432:	4b40      	ldr	r3, [pc, #256]	@ (800a534 <__mdiff+0x124>)
 800a434:	4840      	ldr	r0, [pc, #256]	@ (800a538 <__mdiff+0x128>)
 800a436:	4941      	ldr	r1, [pc, #260]	@ (800a53c <__mdiff+0x12c>)
 800a438:	f000 fb86 	bl	800ab48 <__assert_func>
 800a43c:	2301      	movs	r3, #1
 800a43e:	6145      	str	r5, [r0, #20]
 800a440:	6103      	str	r3, [r0, #16]
 800a442:	0010      	movs	r0, r2
 800a444:	b007      	add	sp, #28
 800a446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a448:	2600      	movs	r6, #0
 800a44a:	42b0      	cmp	r0, r6
 800a44c:	da03      	bge.n	800a456 <__mdiff+0x46>
 800a44e:	0023      	movs	r3, r4
 800a450:	003c      	movs	r4, r7
 800a452:	001f      	movs	r7, r3
 800a454:	3601      	adds	r6, #1
 800a456:	6861      	ldr	r1, [r4, #4]
 800a458:	9800      	ldr	r0, [sp, #0]
 800a45a:	f7ff fd37 	bl	8009ecc <_Balloc>
 800a45e:	1e02      	subs	r2, r0, #0
 800a460:	d103      	bne.n	800a46a <__mdiff+0x5a>
 800a462:	4b34      	ldr	r3, [pc, #208]	@ (800a534 <__mdiff+0x124>)
 800a464:	4834      	ldr	r0, [pc, #208]	@ (800a538 <__mdiff+0x128>)
 800a466:	4936      	ldr	r1, [pc, #216]	@ (800a540 <__mdiff+0x130>)
 800a468:	e7e6      	b.n	800a438 <__mdiff+0x28>
 800a46a:	6923      	ldr	r3, [r4, #16]
 800a46c:	3414      	adds	r4, #20
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	18e3      	adds	r3, r4, r3
 800a474:	0021      	movs	r1, r4
 800a476:	9401      	str	r4, [sp, #4]
 800a478:	003c      	movs	r4, r7
 800a47a:	9302      	str	r3, [sp, #8]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	3414      	adds	r4, #20
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	18e3      	adds	r3, r4, r3
 800a484:	9303      	str	r3, [sp, #12]
 800a486:	0003      	movs	r3, r0
 800a488:	60c6      	str	r6, [r0, #12]
 800a48a:	468c      	mov	ip, r1
 800a48c:	2000      	movs	r0, #0
 800a48e:	3314      	adds	r3, #20
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	9305      	str	r3, [sp, #20]
 800a494:	4663      	mov	r3, ip
 800a496:	cb20      	ldmia	r3!, {r5}
 800a498:	b2a9      	uxth	r1, r5
 800a49a:	000e      	movs	r6, r1
 800a49c:	469c      	mov	ip, r3
 800a49e:	cc08      	ldmia	r4!, {r3}
 800a4a0:	0c2d      	lsrs	r5, r5, #16
 800a4a2:	b299      	uxth	r1, r3
 800a4a4:	1a71      	subs	r1, r6, r1
 800a4a6:	1809      	adds	r1, r1, r0
 800a4a8:	0c1b      	lsrs	r3, r3, #16
 800a4aa:	1408      	asrs	r0, r1, #16
 800a4ac:	1aeb      	subs	r3, r5, r3
 800a4ae:	181b      	adds	r3, r3, r0
 800a4b0:	1418      	asrs	r0, r3, #16
 800a4b2:	b289      	uxth	r1, r1
 800a4b4:	041b      	lsls	r3, r3, #16
 800a4b6:	4319      	orrs	r1, r3
 800a4b8:	9b05      	ldr	r3, [sp, #20]
 800a4ba:	c302      	stmia	r3!, {r1}
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	42a3      	cmp	r3, r4
 800a4c2:	d8e7      	bhi.n	800a494 <__mdiff+0x84>
 800a4c4:	0039      	movs	r1, r7
 800a4c6:	9c03      	ldr	r4, [sp, #12]
 800a4c8:	3115      	adds	r1, #21
 800a4ca:	2304      	movs	r3, #4
 800a4cc:	428c      	cmp	r4, r1
 800a4ce:	d304      	bcc.n	800a4da <__mdiff+0xca>
 800a4d0:	1be3      	subs	r3, r4, r7
 800a4d2:	3b15      	subs	r3, #21
 800a4d4:	089b      	lsrs	r3, r3, #2
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	9901      	ldr	r1, [sp, #4]
 800a4dc:	18cd      	adds	r5, r1, r3
 800a4de:	9904      	ldr	r1, [sp, #16]
 800a4e0:	002e      	movs	r6, r5
 800a4e2:	18cb      	adds	r3, r1, r3
 800a4e4:	001f      	movs	r7, r3
 800a4e6:	9902      	ldr	r1, [sp, #8]
 800a4e8:	428e      	cmp	r6, r1
 800a4ea:	d311      	bcc.n	800a510 <__mdiff+0x100>
 800a4ec:	9c02      	ldr	r4, [sp, #8]
 800a4ee:	1ee9      	subs	r1, r5, #3
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	428c      	cmp	r4, r1
 800a4f4:	d304      	bcc.n	800a500 <__mdiff+0xf0>
 800a4f6:	0021      	movs	r1, r4
 800a4f8:	3103      	adds	r1, #3
 800a4fa:	1b49      	subs	r1, r1, r5
 800a4fc:	0889      	lsrs	r1, r1, #2
 800a4fe:	0088      	lsls	r0, r1, #2
 800a500:	181b      	adds	r3, r3, r0
 800a502:	3b04      	subs	r3, #4
 800a504:	6819      	ldr	r1, [r3, #0]
 800a506:	2900      	cmp	r1, #0
 800a508:	d010      	beq.n	800a52c <__mdiff+0x11c>
 800a50a:	9b00      	ldr	r3, [sp, #0]
 800a50c:	6113      	str	r3, [r2, #16]
 800a50e:	e798      	b.n	800a442 <__mdiff+0x32>
 800a510:	4684      	mov	ip, r0
 800a512:	ce02      	ldmia	r6!, {r1}
 800a514:	b288      	uxth	r0, r1
 800a516:	4460      	add	r0, ip
 800a518:	1400      	asrs	r0, r0, #16
 800a51a:	0c0c      	lsrs	r4, r1, #16
 800a51c:	1904      	adds	r4, r0, r4
 800a51e:	4461      	add	r1, ip
 800a520:	1420      	asrs	r0, r4, #16
 800a522:	b289      	uxth	r1, r1
 800a524:	0424      	lsls	r4, r4, #16
 800a526:	4321      	orrs	r1, r4
 800a528:	c702      	stmia	r7!, {r1}
 800a52a:	e7dc      	b.n	800a4e6 <__mdiff+0xd6>
 800a52c:	9900      	ldr	r1, [sp, #0]
 800a52e:	3901      	subs	r1, #1
 800a530:	9100      	str	r1, [sp, #0]
 800a532:	e7e6      	b.n	800a502 <__mdiff+0xf2>
 800a534:	0800af88 	.word	0x0800af88
 800a538:	0800af99 	.word	0x0800af99
 800a53c:	00000237 	.word	0x00000237
 800a540:	00000245 	.word	0x00000245

0800a544 <__d2b>:
 800a544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a546:	2101      	movs	r1, #1
 800a548:	0016      	movs	r6, r2
 800a54a:	001f      	movs	r7, r3
 800a54c:	f7ff fcbe 	bl	8009ecc <_Balloc>
 800a550:	1e04      	subs	r4, r0, #0
 800a552:	d105      	bne.n	800a560 <__d2b+0x1c>
 800a554:	0022      	movs	r2, r4
 800a556:	4b25      	ldr	r3, [pc, #148]	@ (800a5ec <__d2b+0xa8>)
 800a558:	4825      	ldr	r0, [pc, #148]	@ (800a5f0 <__d2b+0xac>)
 800a55a:	4926      	ldr	r1, [pc, #152]	@ (800a5f4 <__d2b+0xb0>)
 800a55c:	f000 faf4 	bl	800ab48 <__assert_func>
 800a560:	033b      	lsls	r3, r7, #12
 800a562:	007d      	lsls	r5, r7, #1
 800a564:	0b1b      	lsrs	r3, r3, #12
 800a566:	0d6d      	lsrs	r5, r5, #21
 800a568:	d002      	beq.n	800a570 <__d2b+0x2c>
 800a56a:	2280      	movs	r2, #128	@ 0x80
 800a56c:	0352      	lsls	r2, r2, #13
 800a56e:	4313      	orrs	r3, r2
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	2e00      	cmp	r6, #0
 800a574:	d025      	beq.n	800a5c2 <__d2b+0x7e>
 800a576:	4668      	mov	r0, sp
 800a578:	9600      	str	r6, [sp, #0]
 800a57a:	f7ff fd74 	bl	800a066 <__lo0bits>
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	2800      	cmp	r0, #0
 800a584:	d01b      	beq.n	800a5be <__d2b+0x7a>
 800a586:	2220      	movs	r2, #32
 800a588:	001e      	movs	r6, r3
 800a58a:	1a12      	subs	r2, r2, r0
 800a58c:	4096      	lsls	r6, r2
 800a58e:	0032      	movs	r2, r6
 800a590:	40c3      	lsrs	r3, r0
 800a592:	430a      	orrs	r2, r1
 800a594:	6162      	str	r2, [r4, #20]
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	9e01      	ldr	r6, [sp, #4]
 800a59a:	61a6      	str	r6, [r4, #24]
 800a59c:	1e73      	subs	r3, r6, #1
 800a59e:	419e      	sbcs	r6, r3
 800a5a0:	3601      	adds	r6, #1
 800a5a2:	6126      	str	r6, [r4, #16]
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	d014      	beq.n	800a5d2 <__d2b+0x8e>
 800a5a8:	2635      	movs	r6, #53	@ 0x35
 800a5aa:	4b13      	ldr	r3, [pc, #76]	@ (800a5f8 <__d2b+0xb4>)
 800a5ac:	18ed      	adds	r5, r5, r3
 800a5ae:	9b08      	ldr	r3, [sp, #32]
 800a5b0:	182d      	adds	r5, r5, r0
 800a5b2:	601d      	str	r5, [r3, #0]
 800a5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b6:	1a36      	subs	r6, r6, r0
 800a5b8:	601e      	str	r6, [r3, #0]
 800a5ba:	0020      	movs	r0, r4
 800a5bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5be:	6161      	str	r1, [r4, #20]
 800a5c0:	e7ea      	b.n	800a598 <__d2b+0x54>
 800a5c2:	a801      	add	r0, sp, #4
 800a5c4:	f7ff fd4f 	bl	800a066 <__lo0bits>
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	2601      	movs	r6, #1
 800a5cc:	6163      	str	r3, [r4, #20]
 800a5ce:	3020      	adds	r0, #32
 800a5d0:	e7e7      	b.n	800a5a2 <__d2b+0x5e>
 800a5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5fc <__d2b+0xb8>)
 800a5d4:	18c0      	adds	r0, r0, r3
 800a5d6:	9b08      	ldr	r3, [sp, #32]
 800a5d8:	6018      	str	r0, [r3, #0]
 800a5da:	4b09      	ldr	r3, [pc, #36]	@ (800a600 <__d2b+0xbc>)
 800a5dc:	18f3      	adds	r3, r6, r3
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	18e3      	adds	r3, r4, r3
 800a5e2:	6958      	ldr	r0, [r3, #20]
 800a5e4:	f7ff fd1e 	bl	800a024 <__hi0bits>
 800a5e8:	0176      	lsls	r6, r6, #5
 800a5ea:	e7e3      	b.n	800a5b4 <__d2b+0x70>
 800a5ec:	0800af88 	.word	0x0800af88
 800a5f0:	0800af99 	.word	0x0800af99
 800a5f4:	0000030f 	.word	0x0000030f
 800a5f8:	fffffbcd 	.word	0xfffffbcd
 800a5fc:	fffffbce 	.word	0xfffffbce
 800a600:	3fffffff 	.word	0x3fffffff

0800a604 <__sfputc_r>:
 800a604:	6893      	ldr	r3, [r2, #8]
 800a606:	b510      	push	{r4, lr}
 800a608:	3b01      	subs	r3, #1
 800a60a:	6093      	str	r3, [r2, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da04      	bge.n	800a61a <__sfputc_r+0x16>
 800a610:	6994      	ldr	r4, [r2, #24]
 800a612:	42a3      	cmp	r3, r4
 800a614:	db07      	blt.n	800a626 <__sfputc_r+0x22>
 800a616:	290a      	cmp	r1, #10
 800a618:	d005      	beq.n	800a626 <__sfputc_r+0x22>
 800a61a:	6813      	ldr	r3, [r2, #0]
 800a61c:	1c58      	adds	r0, r3, #1
 800a61e:	6010      	str	r0, [r2, #0]
 800a620:	7019      	strb	r1, [r3, #0]
 800a622:	0008      	movs	r0, r1
 800a624:	bd10      	pop	{r4, pc}
 800a626:	f7fe fba3 	bl	8008d70 <__swbuf_r>
 800a62a:	0001      	movs	r1, r0
 800a62c:	e7f9      	b.n	800a622 <__sfputc_r+0x1e>

0800a62e <__sfputs_r>:
 800a62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a630:	0006      	movs	r6, r0
 800a632:	000f      	movs	r7, r1
 800a634:	0014      	movs	r4, r2
 800a636:	18d5      	adds	r5, r2, r3
 800a638:	42ac      	cmp	r4, r5
 800a63a:	d101      	bne.n	800a640 <__sfputs_r+0x12>
 800a63c:	2000      	movs	r0, #0
 800a63e:	e007      	b.n	800a650 <__sfputs_r+0x22>
 800a640:	7821      	ldrb	r1, [r4, #0]
 800a642:	003a      	movs	r2, r7
 800a644:	0030      	movs	r0, r6
 800a646:	f7ff ffdd 	bl	800a604 <__sfputc_r>
 800a64a:	3401      	adds	r4, #1
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d1f3      	bne.n	800a638 <__sfputs_r+0xa>
 800a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a654 <_vfiprintf_r>:
 800a654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a656:	b0a1      	sub	sp, #132	@ 0x84
 800a658:	000f      	movs	r7, r1
 800a65a:	0015      	movs	r5, r2
 800a65c:	001e      	movs	r6, r3
 800a65e:	9003      	str	r0, [sp, #12]
 800a660:	2800      	cmp	r0, #0
 800a662:	d004      	beq.n	800a66e <_vfiprintf_r+0x1a>
 800a664:	6a03      	ldr	r3, [r0, #32]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <_vfiprintf_r+0x1a>
 800a66a:	f7fe fa91 	bl	8008b90 <__sinit>
 800a66e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a670:	07db      	lsls	r3, r3, #31
 800a672:	d405      	bmi.n	800a680 <_vfiprintf_r+0x2c>
 800a674:	89bb      	ldrh	r3, [r7, #12]
 800a676:	059b      	lsls	r3, r3, #22
 800a678:	d402      	bmi.n	800a680 <_vfiprintf_r+0x2c>
 800a67a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a67c:	f7fe fc9d 	bl	8008fba <__retarget_lock_acquire_recursive>
 800a680:	89bb      	ldrh	r3, [r7, #12]
 800a682:	071b      	lsls	r3, r3, #28
 800a684:	d502      	bpl.n	800a68c <_vfiprintf_r+0x38>
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d113      	bne.n	800a6b4 <_vfiprintf_r+0x60>
 800a68c:	0039      	movs	r1, r7
 800a68e:	9803      	ldr	r0, [sp, #12]
 800a690:	f7fe fbb0 	bl	8008df4 <__swsetup_r>
 800a694:	2800      	cmp	r0, #0
 800a696:	d00d      	beq.n	800a6b4 <_vfiprintf_r+0x60>
 800a698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a69a:	07db      	lsls	r3, r3, #31
 800a69c:	d503      	bpl.n	800a6a6 <_vfiprintf_r+0x52>
 800a69e:	2001      	movs	r0, #1
 800a6a0:	4240      	negs	r0, r0
 800a6a2:	b021      	add	sp, #132	@ 0x84
 800a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a6:	89bb      	ldrh	r3, [r7, #12]
 800a6a8:	059b      	lsls	r3, r3, #22
 800a6aa:	d4f8      	bmi.n	800a69e <_vfiprintf_r+0x4a>
 800a6ac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a6ae:	f7fe fc85 	bl	8008fbc <__retarget_lock_release_recursive>
 800a6b2:	e7f4      	b.n	800a69e <_vfiprintf_r+0x4a>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	ac08      	add	r4, sp, #32
 800a6b8:	6163      	str	r3, [r4, #20]
 800a6ba:	3320      	adds	r3, #32
 800a6bc:	7663      	strb	r3, [r4, #25]
 800a6be:	3310      	adds	r3, #16
 800a6c0:	76a3      	strb	r3, [r4, #26]
 800a6c2:	9607      	str	r6, [sp, #28]
 800a6c4:	002e      	movs	r6, r5
 800a6c6:	7833      	ldrb	r3, [r6, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <_vfiprintf_r+0x7c>
 800a6cc:	2b25      	cmp	r3, #37	@ 0x25
 800a6ce:	d148      	bne.n	800a762 <_vfiprintf_r+0x10e>
 800a6d0:	1b73      	subs	r3, r6, r5
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	42ae      	cmp	r6, r5
 800a6d6:	d00b      	beq.n	800a6f0 <_vfiprintf_r+0x9c>
 800a6d8:	002a      	movs	r2, r5
 800a6da:	0039      	movs	r1, r7
 800a6dc:	9803      	ldr	r0, [sp, #12]
 800a6de:	f7ff ffa6 	bl	800a62e <__sfputs_r>
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	d100      	bne.n	800a6e8 <_vfiprintf_r+0x94>
 800a6e6:	e0ae      	b.n	800a846 <_vfiprintf_r+0x1f2>
 800a6e8:	6963      	ldr	r3, [r4, #20]
 800a6ea:	9a05      	ldr	r2, [sp, #20]
 800a6ec:	189b      	adds	r3, r3, r2
 800a6ee:	6163      	str	r3, [r4, #20]
 800a6f0:	7833      	ldrb	r3, [r6, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d100      	bne.n	800a6f8 <_vfiprintf_r+0xa4>
 800a6f6:	e0a6      	b.n	800a846 <_vfiprintf_r+0x1f2>
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	4252      	negs	r2, r2
 800a6fe:	6062      	str	r2, [r4, #4]
 800a700:	a904      	add	r1, sp, #16
 800a702:	3254      	adds	r2, #84	@ 0x54
 800a704:	1852      	adds	r2, r2, r1
 800a706:	1c75      	adds	r5, r6, #1
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	60e3      	str	r3, [r4, #12]
 800a70c:	60a3      	str	r3, [r4, #8]
 800a70e:	7013      	strb	r3, [r2, #0]
 800a710:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a712:	4b59      	ldr	r3, [pc, #356]	@ (800a878 <_vfiprintf_r+0x224>)
 800a714:	2205      	movs	r2, #5
 800a716:	0018      	movs	r0, r3
 800a718:	7829      	ldrb	r1, [r5, #0]
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	f7fe fc4f 	bl	8008fbe <memchr>
 800a720:	1c6e      	adds	r6, r5, #1
 800a722:	2800      	cmp	r0, #0
 800a724:	d11f      	bne.n	800a766 <_vfiprintf_r+0x112>
 800a726:	6822      	ldr	r2, [r4, #0]
 800a728:	06d3      	lsls	r3, r2, #27
 800a72a:	d504      	bpl.n	800a736 <_vfiprintf_r+0xe2>
 800a72c:	2353      	movs	r3, #83	@ 0x53
 800a72e:	a904      	add	r1, sp, #16
 800a730:	185b      	adds	r3, r3, r1
 800a732:	2120      	movs	r1, #32
 800a734:	7019      	strb	r1, [r3, #0]
 800a736:	0713      	lsls	r3, r2, #28
 800a738:	d504      	bpl.n	800a744 <_vfiprintf_r+0xf0>
 800a73a:	2353      	movs	r3, #83	@ 0x53
 800a73c:	a904      	add	r1, sp, #16
 800a73e:	185b      	adds	r3, r3, r1
 800a740:	212b      	movs	r1, #43	@ 0x2b
 800a742:	7019      	strb	r1, [r3, #0]
 800a744:	782b      	ldrb	r3, [r5, #0]
 800a746:	2b2a      	cmp	r3, #42	@ 0x2a
 800a748:	d016      	beq.n	800a778 <_vfiprintf_r+0x124>
 800a74a:	002e      	movs	r6, r5
 800a74c:	2100      	movs	r1, #0
 800a74e:	200a      	movs	r0, #10
 800a750:	68e3      	ldr	r3, [r4, #12]
 800a752:	7832      	ldrb	r2, [r6, #0]
 800a754:	1c75      	adds	r5, r6, #1
 800a756:	3a30      	subs	r2, #48	@ 0x30
 800a758:	2a09      	cmp	r2, #9
 800a75a:	d950      	bls.n	800a7fe <_vfiprintf_r+0x1aa>
 800a75c:	2900      	cmp	r1, #0
 800a75e:	d111      	bne.n	800a784 <_vfiprintf_r+0x130>
 800a760:	e017      	b.n	800a792 <_vfiprintf_r+0x13e>
 800a762:	3601      	adds	r6, #1
 800a764:	e7af      	b.n	800a6c6 <_vfiprintf_r+0x72>
 800a766:	9b05      	ldr	r3, [sp, #20]
 800a768:	6822      	ldr	r2, [r4, #0]
 800a76a:	1ac0      	subs	r0, r0, r3
 800a76c:	2301      	movs	r3, #1
 800a76e:	4083      	lsls	r3, r0
 800a770:	4313      	orrs	r3, r2
 800a772:	0035      	movs	r5, r6
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	e7cc      	b.n	800a712 <_vfiprintf_r+0xbe>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	1d19      	adds	r1, r3, #4
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	9107      	str	r1, [sp, #28]
 800a780:	2b00      	cmp	r3, #0
 800a782:	db01      	blt.n	800a788 <_vfiprintf_r+0x134>
 800a784:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a786:	e004      	b.n	800a792 <_vfiprintf_r+0x13e>
 800a788:	425b      	negs	r3, r3
 800a78a:	60e3      	str	r3, [r4, #12]
 800a78c:	2302      	movs	r3, #2
 800a78e:	4313      	orrs	r3, r2
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	7833      	ldrb	r3, [r6, #0]
 800a794:	2b2e      	cmp	r3, #46	@ 0x2e
 800a796:	d10c      	bne.n	800a7b2 <_vfiprintf_r+0x15e>
 800a798:	7873      	ldrb	r3, [r6, #1]
 800a79a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a79c:	d134      	bne.n	800a808 <_vfiprintf_r+0x1b4>
 800a79e:	9b07      	ldr	r3, [sp, #28]
 800a7a0:	3602      	adds	r6, #2
 800a7a2:	1d1a      	adds	r2, r3, #4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	9207      	str	r2, [sp, #28]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	da01      	bge.n	800a7b0 <_vfiprintf_r+0x15c>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	425b      	negs	r3, r3
 800a7b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7b2:	4d32      	ldr	r5, [pc, #200]	@ (800a87c <_vfiprintf_r+0x228>)
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	0028      	movs	r0, r5
 800a7b8:	7831      	ldrb	r1, [r6, #0]
 800a7ba:	f7fe fc00 	bl	8008fbe <memchr>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d006      	beq.n	800a7d0 <_vfiprintf_r+0x17c>
 800a7c2:	2340      	movs	r3, #64	@ 0x40
 800a7c4:	1b40      	subs	r0, r0, r5
 800a7c6:	4083      	lsls	r3, r0
 800a7c8:	6822      	ldr	r2, [r4, #0]
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	7831      	ldrb	r1, [r6, #0]
 800a7d2:	2206      	movs	r2, #6
 800a7d4:	482a      	ldr	r0, [pc, #168]	@ (800a880 <_vfiprintf_r+0x22c>)
 800a7d6:	1c75      	adds	r5, r6, #1
 800a7d8:	7621      	strb	r1, [r4, #24]
 800a7da:	f7fe fbf0 	bl	8008fbe <memchr>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d040      	beq.n	800a864 <_vfiprintf_r+0x210>
 800a7e2:	4b28      	ldr	r3, [pc, #160]	@ (800a884 <_vfiprintf_r+0x230>)
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d122      	bne.n	800a82e <_vfiprintf_r+0x1da>
 800a7e8:	2207      	movs	r2, #7
 800a7ea:	9b07      	ldr	r3, [sp, #28]
 800a7ec:	3307      	adds	r3, #7
 800a7ee:	4393      	bics	r3, r2
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	9307      	str	r3, [sp, #28]
 800a7f4:	6963      	ldr	r3, [r4, #20]
 800a7f6:	9a04      	ldr	r2, [sp, #16]
 800a7f8:	189b      	adds	r3, r3, r2
 800a7fa:	6163      	str	r3, [r4, #20]
 800a7fc:	e762      	b.n	800a6c4 <_vfiprintf_r+0x70>
 800a7fe:	4343      	muls	r3, r0
 800a800:	002e      	movs	r6, r5
 800a802:	2101      	movs	r1, #1
 800a804:	189b      	adds	r3, r3, r2
 800a806:	e7a4      	b.n	800a752 <_vfiprintf_r+0xfe>
 800a808:	2300      	movs	r3, #0
 800a80a:	200a      	movs	r0, #10
 800a80c:	0019      	movs	r1, r3
 800a80e:	3601      	adds	r6, #1
 800a810:	6063      	str	r3, [r4, #4]
 800a812:	7832      	ldrb	r2, [r6, #0]
 800a814:	1c75      	adds	r5, r6, #1
 800a816:	3a30      	subs	r2, #48	@ 0x30
 800a818:	2a09      	cmp	r2, #9
 800a81a:	d903      	bls.n	800a824 <_vfiprintf_r+0x1d0>
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0c8      	beq.n	800a7b2 <_vfiprintf_r+0x15e>
 800a820:	9109      	str	r1, [sp, #36]	@ 0x24
 800a822:	e7c6      	b.n	800a7b2 <_vfiprintf_r+0x15e>
 800a824:	4341      	muls	r1, r0
 800a826:	002e      	movs	r6, r5
 800a828:	2301      	movs	r3, #1
 800a82a:	1889      	adds	r1, r1, r2
 800a82c:	e7f1      	b.n	800a812 <_vfiprintf_r+0x1be>
 800a82e:	aa07      	add	r2, sp, #28
 800a830:	9200      	str	r2, [sp, #0]
 800a832:	0021      	movs	r1, r4
 800a834:	003a      	movs	r2, r7
 800a836:	4b14      	ldr	r3, [pc, #80]	@ (800a888 <_vfiprintf_r+0x234>)
 800a838:	9803      	ldr	r0, [sp, #12]
 800a83a:	f7fd fd5f 	bl	80082fc <_printf_float>
 800a83e:	9004      	str	r0, [sp, #16]
 800a840:	9b04      	ldr	r3, [sp, #16]
 800a842:	3301      	adds	r3, #1
 800a844:	d1d6      	bne.n	800a7f4 <_vfiprintf_r+0x1a0>
 800a846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a848:	07db      	lsls	r3, r3, #31
 800a84a:	d405      	bmi.n	800a858 <_vfiprintf_r+0x204>
 800a84c:	89bb      	ldrh	r3, [r7, #12]
 800a84e:	059b      	lsls	r3, r3, #22
 800a850:	d402      	bmi.n	800a858 <_vfiprintf_r+0x204>
 800a852:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a854:	f7fe fbb2 	bl	8008fbc <__retarget_lock_release_recursive>
 800a858:	89bb      	ldrh	r3, [r7, #12]
 800a85a:	065b      	lsls	r3, r3, #25
 800a85c:	d500      	bpl.n	800a860 <_vfiprintf_r+0x20c>
 800a85e:	e71e      	b.n	800a69e <_vfiprintf_r+0x4a>
 800a860:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a862:	e71e      	b.n	800a6a2 <_vfiprintf_r+0x4e>
 800a864:	aa07      	add	r2, sp, #28
 800a866:	9200      	str	r2, [sp, #0]
 800a868:	0021      	movs	r1, r4
 800a86a:	003a      	movs	r2, r7
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <_vfiprintf_r+0x234>)
 800a86e:	9803      	ldr	r0, [sp, #12]
 800a870:	f7fd fff2 	bl	8008858 <_printf_i>
 800a874:	e7e3      	b.n	800a83e <_vfiprintf_r+0x1ea>
 800a876:	46c0      	nop			@ (mov r8, r8)
 800a878:	0800aff2 	.word	0x0800aff2
 800a87c:	0800aff8 	.word	0x0800aff8
 800a880:	0800affc 	.word	0x0800affc
 800a884:	080082fd 	.word	0x080082fd
 800a888:	0800a62f 	.word	0x0800a62f

0800a88c <__sflush_r>:
 800a88c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a88e:	220c      	movs	r2, #12
 800a890:	5e8b      	ldrsh	r3, [r1, r2]
 800a892:	0005      	movs	r5, r0
 800a894:	000c      	movs	r4, r1
 800a896:	071a      	lsls	r2, r3, #28
 800a898:	d456      	bmi.n	800a948 <__sflush_r+0xbc>
 800a89a:	684a      	ldr	r2, [r1, #4]
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	dc02      	bgt.n	800a8a6 <__sflush_r+0x1a>
 800a8a0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	dd4e      	ble.n	800a944 <__sflush_r+0xb8>
 800a8a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a8a8:	2f00      	cmp	r7, #0
 800a8aa:	d04b      	beq.n	800a944 <__sflush_r+0xb8>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2080      	movs	r0, #128	@ 0x80
 800a8b0:	682e      	ldr	r6, [r5, #0]
 800a8b2:	602a      	str	r2, [r5, #0]
 800a8b4:	001a      	movs	r2, r3
 800a8b6:	0140      	lsls	r0, r0, #5
 800a8b8:	6a21      	ldr	r1, [r4, #32]
 800a8ba:	4002      	ands	r2, r0
 800a8bc:	4203      	tst	r3, r0
 800a8be:	d033      	beq.n	800a928 <__sflush_r+0x9c>
 800a8c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	075b      	lsls	r3, r3, #29
 800a8c6:	d506      	bpl.n	800a8d6 <__sflush_r+0x4a>
 800a8c8:	6863      	ldr	r3, [r4, #4]
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <__sflush_r+0x4a>
 800a8d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8d4:	1ad2      	subs	r2, r2, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	0028      	movs	r0, r5
 800a8da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a8dc:	6a21      	ldr	r1, [r4, #32]
 800a8de:	47b8      	blx	r7
 800a8e0:	89a2      	ldrh	r2, [r4, #12]
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d106      	bne.n	800a8f4 <__sflush_r+0x68>
 800a8e6:	6829      	ldr	r1, [r5, #0]
 800a8e8:	291d      	cmp	r1, #29
 800a8ea:	d846      	bhi.n	800a97a <__sflush_r+0xee>
 800a8ec:	4b29      	ldr	r3, [pc, #164]	@ (800a994 <__sflush_r+0x108>)
 800a8ee:	40cb      	lsrs	r3, r1
 800a8f0:	07db      	lsls	r3, r3, #31
 800a8f2:	d542      	bpl.n	800a97a <__sflush_r+0xee>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	04d2      	lsls	r2, r2, #19
 800a8fe:	d505      	bpl.n	800a90c <__sflush_r+0x80>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <__sflush_r+0x7e>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d100      	bne.n	800a90c <__sflush_r+0x80>
 800a90a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a90c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a90e:	602e      	str	r6, [r5, #0]
 800a910:	2900      	cmp	r1, #0
 800a912:	d017      	beq.n	800a944 <__sflush_r+0xb8>
 800a914:	0023      	movs	r3, r4
 800a916:	3344      	adds	r3, #68	@ 0x44
 800a918:	4299      	cmp	r1, r3
 800a91a:	d002      	beq.n	800a922 <__sflush_r+0x96>
 800a91c:	0028      	movs	r0, r5
 800a91e:	f7ff f9cf 	bl	8009cc0 <_free_r>
 800a922:	2300      	movs	r3, #0
 800a924:	6363      	str	r3, [r4, #52]	@ 0x34
 800a926:	e00d      	b.n	800a944 <__sflush_r+0xb8>
 800a928:	2301      	movs	r3, #1
 800a92a:	0028      	movs	r0, r5
 800a92c:	47b8      	blx	r7
 800a92e:	0002      	movs	r2, r0
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d1c6      	bne.n	800a8c2 <__sflush_r+0x36>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0c3      	beq.n	800a8c2 <__sflush_r+0x36>
 800a93a:	2b1d      	cmp	r3, #29
 800a93c:	d001      	beq.n	800a942 <__sflush_r+0xb6>
 800a93e:	2b16      	cmp	r3, #22
 800a940:	d11a      	bne.n	800a978 <__sflush_r+0xec>
 800a942:	602e      	str	r6, [r5, #0]
 800a944:	2000      	movs	r0, #0
 800a946:	e01e      	b.n	800a986 <__sflush_r+0xfa>
 800a948:	690e      	ldr	r6, [r1, #16]
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	d0fa      	beq.n	800a944 <__sflush_r+0xb8>
 800a94e:	680f      	ldr	r7, [r1, #0]
 800a950:	600e      	str	r6, [r1, #0]
 800a952:	1bba      	subs	r2, r7, r6
 800a954:	9201      	str	r2, [sp, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	079b      	lsls	r3, r3, #30
 800a95a:	d100      	bne.n	800a95e <__sflush_r+0xd2>
 800a95c:	694a      	ldr	r2, [r1, #20]
 800a95e:	60a2      	str	r2, [r4, #8]
 800a960:	9b01      	ldr	r3, [sp, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	ddee      	ble.n	800a944 <__sflush_r+0xb8>
 800a966:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a968:	0032      	movs	r2, r6
 800a96a:	001f      	movs	r7, r3
 800a96c:	0028      	movs	r0, r5
 800a96e:	9b01      	ldr	r3, [sp, #4]
 800a970:	6a21      	ldr	r1, [r4, #32]
 800a972:	47b8      	blx	r7
 800a974:	2800      	cmp	r0, #0
 800a976:	dc07      	bgt.n	800a988 <__sflush_r+0xfc>
 800a978:	89a2      	ldrh	r2, [r4, #12]
 800a97a:	2340      	movs	r3, #64	@ 0x40
 800a97c:	2001      	movs	r0, #1
 800a97e:	4313      	orrs	r3, r2
 800a980:	b21b      	sxth	r3, r3
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	4240      	negs	r0, r0
 800a986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	1836      	adds	r6, r6, r0
 800a98c:	1a1b      	subs	r3, r3, r0
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	e7e6      	b.n	800a960 <__sflush_r+0xd4>
 800a992:	46c0      	nop			@ (mov r8, r8)
 800a994:	20400001 	.word	0x20400001

0800a998 <_fflush_r>:
 800a998:	690b      	ldr	r3, [r1, #16]
 800a99a:	b570      	push	{r4, r5, r6, lr}
 800a99c:	0005      	movs	r5, r0
 800a99e:	000c      	movs	r4, r1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d102      	bne.n	800a9aa <_fflush_r+0x12>
 800a9a4:	2500      	movs	r5, #0
 800a9a6:	0028      	movs	r0, r5
 800a9a8:	bd70      	pop	{r4, r5, r6, pc}
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d004      	beq.n	800a9b8 <_fflush_r+0x20>
 800a9ae:	6a03      	ldr	r3, [r0, #32]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <_fflush_r+0x20>
 800a9b4:	f7fe f8ec 	bl	8008b90 <__sinit>
 800a9b8:	220c      	movs	r2, #12
 800a9ba:	5ea3      	ldrsh	r3, [r4, r2]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0f1      	beq.n	800a9a4 <_fflush_r+0xc>
 800a9c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9c2:	07d2      	lsls	r2, r2, #31
 800a9c4:	d404      	bmi.n	800a9d0 <_fflush_r+0x38>
 800a9c6:	059b      	lsls	r3, r3, #22
 800a9c8:	d402      	bmi.n	800a9d0 <_fflush_r+0x38>
 800a9ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9cc:	f7fe faf5 	bl	8008fba <__retarget_lock_acquire_recursive>
 800a9d0:	0028      	movs	r0, r5
 800a9d2:	0021      	movs	r1, r4
 800a9d4:	f7ff ff5a 	bl	800a88c <__sflush_r>
 800a9d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9da:	0005      	movs	r5, r0
 800a9dc:	07db      	lsls	r3, r3, #31
 800a9de:	d4e2      	bmi.n	800a9a6 <_fflush_r+0xe>
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	059b      	lsls	r3, r3, #22
 800a9e4:	d4df      	bmi.n	800a9a6 <_fflush_r+0xe>
 800a9e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9e8:	f7fe fae8 	bl	8008fbc <__retarget_lock_release_recursive>
 800a9ec:	e7db      	b.n	800a9a6 <_fflush_r+0xe>
	...

0800a9f0 <__swhatbuf_r>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	000e      	movs	r6, r1
 800a9f4:	001d      	movs	r5, r3
 800a9f6:	230e      	movs	r3, #14
 800a9f8:	5ec9      	ldrsh	r1, [r1, r3]
 800a9fa:	0014      	movs	r4, r2
 800a9fc:	b096      	sub	sp, #88	@ 0x58
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	da0c      	bge.n	800aa1c <__swhatbuf_r+0x2c>
 800aa02:	89b2      	ldrh	r2, [r6, #12]
 800aa04:	2380      	movs	r3, #128	@ 0x80
 800aa06:	0011      	movs	r1, r2
 800aa08:	4019      	ands	r1, r3
 800aa0a:	421a      	tst	r2, r3
 800aa0c:	d114      	bne.n	800aa38 <__swhatbuf_r+0x48>
 800aa0e:	2380      	movs	r3, #128	@ 0x80
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	2000      	movs	r0, #0
 800aa14:	6029      	str	r1, [r5, #0]
 800aa16:	6023      	str	r3, [r4, #0]
 800aa18:	b016      	add	sp, #88	@ 0x58
 800aa1a:	bd70      	pop	{r4, r5, r6, pc}
 800aa1c:	466a      	mov	r2, sp
 800aa1e:	f000 f853 	bl	800aac8 <_fstat_r>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	dbed      	blt.n	800aa02 <__swhatbuf_r+0x12>
 800aa26:	23f0      	movs	r3, #240	@ 0xf0
 800aa28:	9901      	ldr	r1, [sp, #4]
 800aa2a:	021b      	lsls	r3, r3, #8
 800aa2c:	4019      	ands	r1, r3
 800aa2e:	4b04      	ldr	r3, [pc, #16]	@ (800aa40 <__swhatbuf_r+0x50>)
 800aa30:	18c9      	adds	r1, r1, r3
 800aa32:	424b      	negs	r3, r1
 800aa34:	4159      	adcs	r1, r3
 800aa36:	e7ea      	b.n	800aa0e <__swhatbuf_r+0x1e>
 800aa38:	2100      	movs	r1, #0
 800aa3a:	2340      	movs	r3, #64	@ 0x40
 800aa3c:	e7e9      	b.n	800aa12 <__swhatbuf_r+0x22>
 800aa3e:	46c0      	nop			@ (mov r8, r8)
 800aa40:	ffffe000 	.word	0xffffe000

0800aa44 <__smakebuf_r>:
 800aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa46:	2602      	movs	r6, #2
 800aa48:	898b      	ldrh	r3, [r1, #12]
 800aa4a:	0005      	movs	r5, r0
 800aa4c:	000c      	movs	r4, r1
 800aa4e:	b085      	sub	sp, #20
 800aa50:	4233      	tst	r3, r6
 800aa52:	d007      	beq.n	800aa64 <__smakebuf_r+0x20>
 800aa54:	0023      	movs	r3, r4
 800aa56:	3347      	adds	r3, #71	@ 0x47
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	6123      	str	r3, [r4, #16]
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	6163      	str	r3, [r4, #20]
 800aa60:	b005      	add	sp, #20
 800aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa64:	ab03      	add	r3, sp, #12
 800aa66:	aa02      	add	r2, sp, #8
 800aa68:	f7ff ffc2 	bl	800a9f0 <__swhatbuf_r>
 800aa6c:	9f02      	ldr	r7, [sp, #8]
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	0039      	movs	r1, r7
 800aa72:	0028      	movs	r0, r5
 800aa74:	f7ff f99a 	bl	8009dac <_malloc_r>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d108      	bne.n	800aa8e <__smakebuf_r+0x4a>
 800aa7c:	220c      	movs	r2, #12
 800aa7e:	5ea3      	ldrsh	r3, [r4, r2]
 800aa80:	059a      	lsls	r2, r3, #22
 800aa82:	d4ed      	bmi.n	800aa60 <__smakebuf_r+0x1c>
 800aa84:	2203      	movs	r2, #3
 800aa86:	4393      	bics	r3, r2
 800aa88:	431e      	orrs	r6, r3
 800aa8a:	81a6      	strh	r6, [r4, #12]
 800aa8c:	e7e2      	b.n	800aa54 <__smakebuf_r+0x10>
 800aa8e:	2380      	movs	r3, #128	@ 0x80
 800aa90:	89a2      	ldrh	r2, [r4, #12]
 800aa92:	6020      	str	r0, [r4, #0]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	6120      	str	r0, [r4, #16]
 800aa9c:	6167      	str	r7, [r4, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00c      	beq.n	800aabc <__smakebuf_r+0x78>
 800aaa2:	0028      	movs	r0, r5
 800aaa4:	230e      	movs	r3, #14
 800aaa6:	5ee1      	ldrsh	r1, [r4, r3]
 800aaa8:	f000 f820 	bl	800aaec <_isatty_r>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d005      	beq.n	800aabc <__smakebuf_r+0x78>
 800aab0:	2303      	movs	r3, #3
 800aab2:	89a2      	ldrh	r2, [r4, #12]
 800aab4:	439a      	bics	r2, r3
 800aab6:	3b02      	subs	r3, #2
 800aab8:	4313      	orrs	r3, r2
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	9a01      	ldr	r2, [sp, #4]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	e7cc      	b.n	800aa60 <__smakebuf_r+0x1c>
	...

0800aac8 <_fstat_r>:
 800aac8:	2300      	movs	r3, #0
 800aaca:	b570      	push	{r4, r5, r6, lr}
 800aacc:	4d06      	ldr	r5, [pc, #24]	@ (800aae8 <_fstat_r+0x20>)
 800aace:	0004      	movs	r4, r0
 800aad0:	0008      	movs	r0, r1
 800aad2:	0011      	movs	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7f8 fccd 	bl	8003474 <_fstat>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d103      	bne.n	800aae6 <_fstat_r+0x1e>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d000      	beq.n	800aae6 <_fstat_r+0x1e>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	200004f8 	.word	0x200004f8

0800aaec <_isatty_r>:
 800aaec:	2300      	movs	r3, #0
 800aaee:	b570      	push	{r4, r5, r6, lr}
 800aaf0:	4d06      	ldr	r5, [pc, #24]	@ (800ab0c <_isatty_r+0x20>)
 800aaf2:	0004      	movs	r4, r0
 800aaf4:	0008      	movs	r0, r1
 800aaf6:	602b      	str	r3, [r5, #0]
 800aaf8:	f7f8 fcca 	bl	8003490 <_isatty>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d103      	bne.n	800ab08 <_isatty_r+0x1c>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d000      	beq.n	800ab08 <_isatty_r+0x1c>
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	bd70      	pop	{r4, r5, r6, pc}
 800ab0a:	46c0      	nop			@ (mov r8, r8)
 800ab0c:	200004f8 	.word	0x200004f8

0800ab10 <_sbrk_r>:
 800ab10:	2300      	movs	r3, #0
 800ab12:	b570      	push	{r4, r5, r6, lr}
 800ab14:	4d06      	ldr	r5, [pc, #24]	@ (800ab30 <_sbrk_r+0x20>)
 800ab16:	0004      	movs	r4, r0
 800ab18:	0008      	movs	r0, r1
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	f7f8 fccc 	bl	80034b8 <_sbrk>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d103      	bne.n	800ab2c <_sbrk_r+0x1c>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d000      	beq.n	800ab2c <_sbrk_r+0x1c>
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	bd70      	pop	{r4, r5, r6, pc}
 800ab2e:	46c0      	nop			@ (mov r8, r8)
 800ab30:	200004f8 	.word	0x200004f8

0800ab34 <memcpy>:
 800ab34:	2300      	movs	r3, #0
 800ab36:	b510      	push	{r4, lr}
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d100      	bne.n	800ab3e <memcpy+0xa>
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	5ccc      	ldrb	r4, [r1, r3]
 800ab40:	54c4      	strb	r4, [r0, r3]
 800ab42:	3301      	adds	r3, #1
 800ab44:	e7f8      	b.n	800ab38 <memcpy+0x4>
	...

0800ab48 <__assert_func>:
 800ab48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ab4a:	0014      	movs	r4, r2
 800ab4c:	001a      	movs	r2, r3
 800ab4e:	4b09      	ldr	r3, [pc, #36]	@ (800ab74 <__assert_func+0x2c>)
 800ab50:	0005      	movs	r5, r0
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	000e      	movs	r6, r1
 800ab56:	68d8      	ldr	r0, [r3, #12]
 800ab58:	4b07      	ldr	r3, [pc, #28]	@ (800ab78 <__assert_func+0x30>)
 800ab5a:	2c00      	cmp	r4, #0
 800ab5c:	d101      	bne.n	800ab62 <__assert_func+0x1a>
 800ab5e:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <__assert_func+0x34>)
 800ab60:	001c      	movs	r4, r3
 800ab62:	4907      	ldr	r1, [pc, #28]	@ (800ab80 <__assert_func+0x38>)
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	9402      	str	r4, [sp, #8]
 800ab68:	002b      	movs	r3, r5
 800ab6a:	9600      	str	r6, [sp, #0]
 800ab6c:	f000 f856 	bl	800ac1c <fiprintf>
 800ab70:	f000 f864 	bl	800ac3c <abort>
 800ab74:	20000018 	.word	0x20000018
 800ab78:	0800b00d 	.word	0x0800b00d
 800ab7c:	0800b048 	.word	0x0800b048
 800ab80:	0800b01a 	.word	0x0800b01a

0800ab84 <_calloc_r>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	0c0b      	lsrs	r3, r1, #16
 800ab88:	0c15      	lsrs	r5, r2, #16
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d11e      	bne.n	800abcc <_calloc_r+0x48>
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	d10c      	bne.n	800abac <_calloc_r+0x28>
 800ab92:	b289      	uxth	r1, r1
 800ab94:	b294      	uxth	r4, r2
 800ab96:	434c      	muls	r4, r1
 800ab98:	0021      	movs	r1, r4
 800ab9a:	f7ff f907 	bl	8009dac <_malloc_r>
 800ab9e:	1e05      	subs	r5, r0, #0
 800aba0:	d01b      	beq.n	800abda <_calloc_r+0x56>
 800aba2:	0022      	movs	r2, r4
 800aba4:	2100      	movs	r1, #0
 800aba6:	f7fe f983 	bl	8008eb0 <memset>
 800abaa:	e016      	b.n	800abda <_calloc_r+0x56>
 800abac:	1c2b      	adds	r3, r5, #0
 800abae:	1c0c      	adds	r4, r1, #0
 800abb0:	b289      	uxth	r1, r1
 800abb2:	b292      	uxth	r2, r2
 800abb4:	434a      	muls	r2, r1
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	b2a1      	uxth	r1, r4
 800abba:	4359      	muls	r1, r3
 800abbc:	0c14      	lsrs	r4, r2, #16
 800abbe:	190c      	adds	r4, r1, r4
 800abc0:	0c23      	lsrs	r3, r4, #16
 800abc2:	d107      	bne.n	800abd4 <_calloc_r+0x50>
 800abc4:	0424      	lsls	r4, r4, #16
 800abc6:	b292      	uxth	r2, r2
 800abc8:	4314      	orrs	r4, r2
 800abca:	e7e5      	b.n	800ab98 <_calloc_r+0x14>
 800abcc:	2d00      	cmp	r5, #0
 800abce:	d101      	bne.n	800abd4 <_calloc_r+0x50>
 800abd0:	1c14      	adds	r4, r2, #0
 800abd2:	e7ed      	b.n	800abb0 <_calloc_r+0x2c>
 800abd4:	230c      	movs	r3, #12
 800abd6:	2500      	movs	r5, #0
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	0028      	movs	r0, r5
 800abdc:	bd70      	pop	{r4, r5, r6, pc}

0800abde <__ascii_mbtowc>:
 800abde:	b082      	sub	sp, #8
 800abe0:	2900      	cmp	r1, #0
 800abe2:	d100      	bne.n	800abe6 <__ascii_mbtowc+0x8>
 800abe4:	a901      	add	r1, sp, #4
 800abe6:	1e10      	subs	r0, r2, #0
 800abe8:	d006      	beq.n	800abf8 <__ascii_mbtowc+0x1a>
 800abea:	2b00      	cmp	r3, #0
 800abec:	d006      	beq.n	800abfc <__ascii_mbtowc+0x1e>
 800abee:	7813      	ldrb	r3, [r2, #0]
 800abf0:	600b      	str	r3, [r1, #0]
 800abf2:	7810      	ldrb	r0, [r2, #0]
 800abf4:	1e43      	subs	r3, r0, #1
 800abf6:	4198      	sbcs	r0, r3
 800abf8:	b002      	add	sp, #8
 800abfa:	4770      	bx	lr
 800abfc:	2002      	movs	r0, #2
 800abfe:	4240      	negs	r0, r0
 800ac00:	e7fa      	b.n	800abf8 <__ascii_mbtowc+0x1a>

0800ac02 <__ascii_wctomb>:
 800ac02:	0003      	movs	r3, r0
 800ac04:	1e08      	subs	r0, r1, #0
 800ac06:	d005      	beq.n	800ac14 <__ascii_wctomb+0x12>
 800ac08:	2aff      	cmp	r2, #255	@ 0xff
 800ac0a:	d904      	bls.n	800ac16 <__ascii_wctomb+0x14>
 800ac0c:	228a      	movs	r2, #138	@ 0x8a
 800ac0e:	2001      	movs	r0, #1
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	4240      	negs	r0, r0
 800ac14:	4770      	bx	lr
 800ac16:	2001      	movs	r0, #1
 800ac18:	700a      	strb	r2, [r1, #0]
 800ac1a:	e7fb      	b.n	800ac14 <__ascii_wctomb+0x12>

0800ac1c <fiprintf>:
 800ac1c:	b40e      	push	{r1, r2, r3}
 800ac1e:	b517      	push	{r0, r1, r2, r4, lr}
 800ac20:	4c05      	ldr	r4, [pc, #20]	@ (800ac38 <fiprintf+0x1c>)
 800ac22:	ab05      	add	r3, sp, #20
 800ac24:	cb04      	ldmia	r3!, {r2}
 800ac26:	0001      	movs	r1, r0
 800ac28:	6820      	ldr	r0, [r4, #0]
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	f7ff fd12 	bl	800a654 <_vfiprintf_r>
 800ac30:	bc1e      	pop	{r1, r2, r3, r4}
 800ac32:	bc08      	pop	{r3}
 800ac34:	b003      	add	sp, #12
 800ac36:	4718      	bx	r3
 800ac38:	20000018 	.word	0x20000018

0800ac3c <abort>:
 800ac3c:	2006      	movs	r0, #6
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	f000 f82c 	bl	800ac9c <raise>
 800ac44:	2001      	movs	r0, #1
 800ac46:	f7f8 fbc5 	bl	80033d4 <_exit>

0800ac4a <_raise_r>:
 800ac4a:	b570      	push	{r4, r5, r6, lr}
 800ac4c:	0004      	movs	r4, r0
 800ac4e:	000d      	movs	r5, r1
 800ac50:	291f      	cmp	r1, #31
 800ac52:	d904      	bls.n	800ac5e <_raise_r+0x14>
 800ac54:	2316      	movs	r3, #22
 800ac56:	6003      	str	r3, [r0, #0]
 800ac58:	2001      	movs	r0, #1
 800ac5a:	4240      	negs	r0, r0
 800ac5c:	bd70      	pop	{r4, r5, r6, pc}
 800ac5e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <_raise_r+0x24>
 800ac64:	008a      	lsls	r2, r1, #2
 800ac66:	189b      	adds	r3, r3, r2
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	2a00      	cmp	r2, #0
 800ac6c:	d108      	bne.n	800ac80 <_raise_r+0x36>
 800ac6e:	0020      	movs	r0, r4
 800ac70:	f000 f830 	bl	800acd4 <_getpid_r>
 800ac74:	002a      	movs	r2, r5
 800ac76:	0001      	movs	r1, r0
 800ac78:	0020      	movs	r0, r4
 800ac7a:	f000 f819 	bl	800acb0 <_kill_r>
 800ac7e:	e7ed      	b.n	800ac5c <_raise_r+0x12>
 800ac80:	2a01      	cmp	r2, #1
 800ac82:	d009      	beq.n	800ac98 <_raise_r+0x4e>
 800ac84:	1c51      	adds	r1, r2, #1
 800ac86:	d103      	bne.n	800ac90 <_raise_r+0x46>
 800ac88:	2316      	movs	r3, #22
 800ac8a:	6003      	str	r3, [r0, #0]
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	e7e5      	b.n	800ac5c <_raise_r+0x12>
 800ac90:	2100      	movs	r1, #0
 800ac92:	0028      	movs	r0, r5
 800ac94:	6019      	str	r1, [r3, #0]
 800ac96:	4790      	blx	r2
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e7df      	b.n	800ac5c <_raise_r+0x12>

0800ac9c <raise>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	4b03      	ldr	r3, [pc, #12]	@ (800acac <raise+0x10>)
 800aca0:	0001      	movs	r1, r0
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	f7ff ffd1 	bl	800ac4a <_raise_r>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	46c0      	nop			@ (mov r8, r8)
 800acac:	20000018 	.word	0x20000018

0800acb0 <_kill_r>:
 800acb0:	2300      	movs	r3, #0
 800acb2:	b570      	push	{r4, r5, r6, lr}
 800acb4:	4d06      	ldr	r5, [pc, #24]	@ (800acd0 <_kill_r+0x20>)
 800acb6:	0004      	movs	r4, r0
 800acb8:	0008      	movs	r0, r1
 800acba:	0011      	movs	r1, r2
 800acbc:	602b      	str	r3, [r5, #0]
 800acbe:	f7f8 fb79 	bl	80033b4 <_kill>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d103      	bne.n	800acce <_kill_r+0x1e>
 800acc6:	682b      	ldr	r3, [r5, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d000      	beq.n	800acce <_kill_r+0x1e>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	200004f8 	.word	0x200004f8

0800acd4 <_getpid_r>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	f7f8 fb67 	bl	80033a8 <_getpid>
 800acda:	bd10      	pop	{r4, pc}

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	46c0      	nop			@ (mov r8, r8)
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	46c0      	nop			@ (mov r8, r8)
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
